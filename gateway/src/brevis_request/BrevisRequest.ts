/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../contract/typechain/common";

export declare namespace Brevis {
  export type ProofDataStruct = {
    commitHash: BytesLike;
    vkHash: BytesLike;
    appCommitHash: BytesLike;
    appVkHash: BytesLike;
    smtRoot: BytesLike;
  };

  export type ProofDataStructOutput = [
    commitHash: string,
    vkHash: string,
    appCommitHash: string,
    appVkHash: string,
    smtRoot: string
  ] & {
    commitHash: string;
    vkHash: string;
    appCommitHash: string;
    appVkHash: string;
    smtRoot: string;
  };
}

export interface BrevisRequestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "brevisProof"
      | "collectFee"
      | "feeCollector"
      | "fulfillAggRequests"
      | "fulfillRequest"
      | "owner"
      | "queryRequestStatus"
      | "refund"
      | "renounceOwnership"
      | "requestTimeout"
      | "requests"
      | "sendRequest"
      | "setFeeCollector"
      | "setRequestTimeout"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeeCollectorUpdated"
      | "OwnershipTransferred"
      | "RequestCallbackFailed"
      | "RequestFulfilled"
      | "RequestRefunded"
      | "RequestSent"
      | "RequestTimeoutUpdated"
      | "RequestsCallbackFailed"
      | "RequestsFulfilled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "brevisProof",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectFee",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillAggRequests",
    values: [
      BigNumberish,
      BytesLike[],
      BytesLike,
      Brevis.ProofDataStruct[],
      BytesLike[],
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillRequest",
    values: [BytesLike, BigNumberish, BytesLike, boolean, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queryRequestStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "refund", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestTimeout",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "requests", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "sendRequest",
    values: [BytesLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequestTimeout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "brevisProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collectFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillAggRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryRequestStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequestTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace FeeCollectorUpdatedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestCallbackFailedEvent {
  export type InputTuple = [requestId: BytesLike];
  export type OutputTuple = [requestId: string];
  export interface OutputObject {
    requestId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestFulfilledEvent {
  export type InputTuple = [requestId: BytesLike];
  export type OutputTuple = [requestId: string];
  export interface OutputObject {
    requestId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestRefundedEvent {
  export type InputTuple = [requestId: BytesLike];
  export type OutputTuple = [requestId: string];
  export interface OutputObject {
    requestId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestSentEvent {
  export type InputTuple = [
    requestId: BytesLike,
    sender: AddressLike,
    fee: BigNumberish,
    callback: AddressLike
  ];
  export type OutputTuple = [
    requestId: string,
    sender: string,
    fee: bigint,
    callback: string
  ];
  export interface OutputObject {
    requestId: string;
    sender: string;
    fee: bigint;
    callback: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestTimeoutUpdatedEvent {
  export type InputTuple = [from: BigNumberish, to: BigNumberish];
  export type OutputTuple = [from: bigint, to: bigint];
  export interface OutputObject {
    from: bigint;
    to: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestsCallbackFailedEvent {
  export type InputTuple = [requestIds: BytesLike[]];
  export type OutputTuple = [requestIds: string[]];
  export interface OutputObject {
    requestIds: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestsFulfilledEvent {
  export type InputTuple = [requestId: BytesLike[]];
  export type OutputTuple = [requestId: string[]];
  export interface OutputObject {
    requestId: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BrevisRequest extends BaseContract {
  connect(runner?: ContractRunner | null): BrevisRequest;
  waitForDeployment(): Promise<this>;

  interface: BrevisRequestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  brevisProof: TypedContractMethod<[], [string], "view">;

  collectFee: TypedContractMethod<
    [_amount: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  feeCollector: TypedContractMethod<[], [string], "view">;

  fulfillAggRequests: TypedContractMethod<
    [
      _chainId: BigNumberish,
      _requestIds: BytesLike[],
      _proof: BytesLike,
      _proofDataArray: Brevis.ProofDataStruct[],
      _appCircuitOutputs: BytesLike[],
      _callback: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  fulfillRequest: TypedContractMethod<
    [
      _requestId: BytesLike,
      _chainId: BigNumberish,
      _proof: BytesLike,
      _withAppProof: boolean,
      _appCircuitOutput: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  queryRequestStatus: TypedContractMethod<
    [_requestId: BytesLike],
    [bigint],
    "view"
  >;

  refund: TypedContractMethod<[_requestId: BytesLike], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestTimeout: TypedContractMethod<[], [bigint], "view">;

  requests: TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, string, string, bigint] & {
        deadline: bigint;
        fee: bigint;
        refundee: string;
        callback: string;
        status: bigint;
      }
    ],
    "view"
  >;

  sendRequest: TypedContractMethod<
    [_requestId: BytesLike, _refundee: AddressLike, _callback: AddressLike],
    [void],
    "payable"
  >;

  setFeeCollector: TypedContractMethod<
    [_feeCollector: AddressLike],
    [void],
    "nonpayable"
  >;

  setRequestTimeout: TypedContractMethod<
    [_timeout: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "brevisProof"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collectFee"
  ): TypedContractMethod<
    [_amount: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeCollector"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fulfillAggRequests"
  ): TypedContractMethod<
    [
      _chainId: BigNumberish,
      _requestIds: BytesLike[],
      _proof: BytesLike,
      _proofDataArray: Brevis.ProofDataStruct[],
      _appCircuitOutputs: BytesLike[],
      _callback: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fulfillRequest"
  ): TypedContractMethod<
    [
      _requestId: BytesLike,
      _chainId: BigNumberish,
      _proof: BytesLike,
      _withAppProof: boolean,
      _appCircuitOutput: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "queryRequestStatus"
  ): TypedContractMethod<[_requestId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<[_requestId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestTimeout"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requests"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, string, string, bigint] & {
        deadline: bigint;
        fee: bigint;
        refundee: string;
        callback: string;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "sendRequest"
  ): TypedContractMethod<
    [_requestId: BytesLike, _refundee: AddressLike, _callback: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setFeeCollector"
  ): TypedContractMethod<[_feeCollector: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRequestTimeout"
  ): TypedContractMethod<[_timeout: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "FeeCollectorUpdated"
  ): TypedContractEvent<
    FeeCollectorUpdatedEvent.InputTuple,
    FeeCollectorUpdatedEvent.OutputTuple,
    FeeCollectorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RequestCallbackFailed"
  ): TypedContractEvent<
    RequestCallbackFailedEvent.InputTuple,
    RequestCallbackFailedEvent.OutputTuple,
    RequestCallbackFailedEvent.OutputObject
  >;
  getEvent(
    key: "RequestFulfilled"
  ): TypedContractEvent<
    RequestFulfilledEvent.InputTuple,
    RequestFulfilledEvent.OutputTuple,
    RequestFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "RequestRefunded"
  ): TypedContractEvent<
    RequestRefundedEvent.InputTuple,
    RequestRefundedEvent.OutputTuple,
    RequestRefundedEvent.OutputObject
  >;
  getEvent(
    key: "RequestSent"
  ): TypedContractEvent<
    RequestSentEvent.InputTuple,
    RequestSentEvent.OutputTuple,
    RequestSentEvent.OutputObject
  >;
  getEvent(
    key: "RequestTimeoutUpdated"
  ): TypedContractEvent<
    RequestTimeoutUpdatedEvent.InputTuple,
    RequestTimeoutUpdatedEvent.OutputTuple,
    RequestTimeoutUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RequestsCallbackFailed"
  ): TypedContractEvent<
    RequestsCallbackFailedEvent.InputTuple,
    RequestsCallbackFailedEvent.OutputTuple,
    RequestsCallbackFailedEvent.OutputObject
  >;
  getEvent(
    key: "RequestsFulfilled"
  ): TypedContractEvent<
    RequestsFulfilledEvent.InputTuple,
    RequestsFulfilledEvent.OutputTuple,
    RequestsFulfilledEvent.OutputObject
  >;

  filters: {
    "FeeCollectorUpdated(address,address)": TypedContractEvent<
      FeeCollectorUpdatedEvent.InputTuple,
      FeeCollectorUpdatedEvent.OutputTuple,
      FeeCollectorUpdatedEvent.OutputObject
    >;
    FeeCollectorUpdated: TypedContractEvent<
      FeeCollectorUpdatedEvent.InputTuple,
      FeeCollectorUpdatedEvent.OutputTuple,
      FeeCollectorUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RequestCallbackFailed(bytes32)": TypedContractEvent<
      RequestCallbackFailedEvent.InputTuple,
      RequestCallbackFailedEvent.OutputTuple,
      RequestCallbackFailedEvent.OutputObject
    >;
    RequestCallbackFailed: TypedContractEvent<
      RequestCallbackFailedEvent.InputTuple,
      RequestCallbackFailedEvent.OutputTuple,
      RequestCallbackFailedEvent.OutputObject
    >;

    "RequestFulfilled(bytes32)": TypedContractEvent<
      RequestFulfilledEvent.InputTuple,
      RequestFulfilledEvent.OutputTuple,
      RequestFulfilledEvent.OutputObject
    >;
    RequestFulfilled: TypedContractEvent<
      RequestFulfilledEvent.InputTuple,
      RequestFulfilledEvent.OutputTuple,
      RequestFulfilledEvent.OutputObject
    >;

    "RequestRefunded(bytes32)": TypedContractEvent<
      RequestRefundedEvent.InputTuple,
      RequestRefundedEvent.OutputTuple,
      RequestRefundedEvent.OutputObject
    >;
    RequestRefunded: TypedContractEvent<
      RequestRefundedEvent.InputTuple,
      RequestRefundedEvent.OutputTuple,
      RequestRefundedEvent.OutputObject
    >;

    "RequestSent(bytes32,address,uint256,address)": TypedContractEvent<
      RequestSentEvent.InputTuple,
      RequestSentEvent.OutputTuple,
      RequestSentEvent.OutputObject
    >;
    RequestSent: TypedContractEvent<
      RequestSentEvent.InputTuple,
      RequestSentEvent.OutputTuple,
      RequestSentEvent.OutputObject
    >;

    "RequestTimeoutUpdated(uint256,uint256)": TypedContractEvent<
      RequestTimeoutUpdatedEvent.InputTuple,
      RequestTimeoutUpdatedEvent.OutputTuple,
      RequestTimeoutUpdatedEvent.OutputObject
    >;
    RequestTimeoutUpdated: TypedContractEvent<
      RequestTimeoutUpdatedEvent.InputTuple,
      RequestTimeoutUpdatedEvent.OutputTuple,
      RequestTimeoutUpdatedEvent.OutputObject
    >;

    "RequestsCallbackFailed(bytes32[])": TypedContractEvent<
      RequestsCallbackFailedEvent.InputTuple,
      RequestsCallbackFailedEvent.OutputTuple,
      RequestsCallbackFailedEvent.OutputObject
    >;
    RequestsCallbackFailed: TypedContractEvent<
      RequestsCallbackFailedEvent.InputTuple,
      RequestsCallbackFailedEvent.OutputTuple,
      RequestsCallbackFailedEvent.OutputObject
    >;

    "RequestsFulfilled(bytes32[])": TypedContractEvent<
      RequestsFulfilledEvent.InputTuple,
      RequestsFulfilledEvent.OutputTuple,
      RequestsFulfilledEvent.OutputObject
    >;
    RequestsFulfilled: TypedContractEvent<
      RequestsFulfilledEvent.InputTuple,
      RequestsFulfilledEvent.OutputTuple,
      RequestsFulfilledEvent.OutputObject
    >;
  };
}
