/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../contracts/typechain/common";

export interface BrevisRequestInterface extends utils.Interface {
  contractName: "BrevisRequest";
  functions: {
    "brevisProof()": FunctionFragment;
    "chargeFee(bytes32)": FunctionFragment;
    "collectFee(uint256,address)": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "fulfillRequest(bytes32,uint64,bytes,bool,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "queryRequestStatus(bytes32)": FunctionFragment;
    "refund(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestTimeout()": FunctionFragment;
    "requests(bytes32)": FunctionFragment;
    "sendRequest(bytes32,address,address)": FunctionFragment;
    "setFeeCollector(address)": FunctionFragment;
    "setRequestTimeout(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "brevisProof",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chargeFee",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFee",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillRequest",
    values: [BytesLike, BigNumberish, BytesLike, boolean, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queryRequestStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "refund", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestTimeout",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "requests", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "sendRequest",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequestTimeout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "brevisProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chargeFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collectFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryRequestStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequestTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "FeeCollectorUpdated(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RequestFulfilled(bytes32)": EventFragment;
    "RequestSent(bytes32,address,uint256,address)": EventFragment;
    "RequestTimeoutUpdated(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeCollectorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestTimeoutUpdated"): EventFragment;
}

export type FeeCollectorUpdatedEvent = TypedEvent<
  [string, string],
  { from: string; to: string }
>;

export type FeeCollectorUpdatedEventFilter =
  TypedEventFilter<FeeCollectorUpdatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RequestFulfilledEvent = TypedEvent<[string], { requestId: string }>;

export type RequestFulfilledEventFilter =
  TypedEventFilter<RequestFulfilledEvent>;

export type RequestSentEvent = TypedEvent<
  [string, string, BigNumber, string],
  { requestId: string; sender: string; fee: BigNumber; callback: string }
>;

export type RequestSentEventFilter = TypedEventFilter<RequestSentEvent>;

export type RequestTimeoutUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { from: BigNumber; to: BigNumber }
>;

export type RequestTimeoutUpdatedEventFilter =
  TypedEventFilter<RequestTimeoutUpdatedEvent>;

export interface BrevisRequest extends BaseContract {
  contractName: "BrevisRequest";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BrevisRequestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    brevisProof(overrides?: CallOverrides): Promise<[string]>;

    chargeFee(
      _requestId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectFee(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    fulfillRequest(
      _requestId: BytesLike,
      _chainId: BigNumberish,
      _proof: BytesLike,
      _withAppProof: boolean,
      _appCircuitOutput: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    queryRequestStatus(
      _requestId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    refund(
      _requestId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestTimeout(overrides?: CallOverrides): Promise<[BigNumber]>;

    requests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, number] & {
        deadline: BigNumber;
        fee: BigNumber;
        refundee: string;
        callback: string;
        status: number;
      }
    >;

    sendRequest(
      _requestId: BytesLike,
      _refundee: string,
      _callback: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRequestTimeout(
      _timeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  brevisProof(overrides?: CallOverrides): Promise<string>;

  chargeFee(
    _requestId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectFee(
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  fulfillRequest(
    _requestId: BytesLike,
    _chainId: BigNumberish,
    _proof: BytesLike,
    _withAppProof: boolean,
    _appCircuitOutput: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  queryRequestStatus(
    _requestId: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  refund(
    _requestId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestTimeout(overrides?: CallOverrides): Promise<BigNumber>;

  requests(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, number] & {
      deadline: BigNumber;
      fee: BigNumber;
      refundee: string;
      callback: string;
      status: number;
    }
  >;

  sendRequest(
    _requestId: BytesLike,
    _refundee: string,
    _callback: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeCollector(
    _feeCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRequestTimeout(
    _timeout: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    brevisProof(overrides?: CallOverrides): Promise<string>;

    chargeFee(_requestId: BytesLike, overrides?: CallOverrides): Promise<void>;

    collectFee(
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    fulfillRequest(
      _requestId: BytesLike,
      _chainId: BigNumberish,
      _proof: BytesLike,
      _withAppProof: boolean,
      _appCircuitOutput: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    queryRequestStatus(
      _requestId: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    refund(_requestId: BytesLike, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    requests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, number] & {
        deadline: BigNumber;
        fee: BigNumber;
        refundee: string;
        callback: string;
        status: number;
      }
    >;

    sendRequest(
      _requestId: BytesLike,
      _refundee: string,
      _callback: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRequestTimeout(
      _timeout: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeeCollectorUpdated(address,address)"(
      from?: null,
      to?: null
    ): FeeCollectorUpdatedEventFilter;
    FeeCollectorUpdated(from?: null, to?: null): FeeCollectorUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RequestFulfilled(bytes32)"(requestId?: null): RequestFulfilledEventFilter;
    RequestFulfilled(requestId?: null): RequestFulfilledEventFilter;

    "RequestSent(bytes32,address,uint256,address)"(
      requestId?: null,
      sender?: null,
      fee?: null,
      callback?: null
    ): RequestSentEventFilter;
    RequestSent(
      requestId?: null,
      sender?: null,
      fee?: null,
      callback?: null
    ): RequestSentEventFilter;

    "RequestTimeoutUpdated(uint256,uint256)"(
      from?: null,
      to?: null
    ): RequestTimeoutUpdatedEventFilter;
    RequestTimeoutUpdated(
      from?: null,
      to?: null
    ): RequestTimeoutUpdatedEventFilter;
  };

  estimateGas: {
    brevisProof(overrides?: CallOverrides): Promise<BigNumber>;

    chargeFee(
      _requestId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectFee(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillRequest(
      _requestId: BytesLike,
      _chainId: BigNumberish,
      _proof: BytesLike,
      _withAppProof: boolean,
      _appCircuitOutput: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    queryRequestStatus(
      _requestId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refund(
      _requestId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    requests(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    sendRequest(
      _requestId: BytesLike,
      _refundee: string,
      _callback: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRequestTimeout(
      _timeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    brevisProof(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chargeFee(
      _requestId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectFee(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fulfillRequest(
      _requestId: BytesLike,
      _chainId: BigNumberish,
      _proof: BytesLike,
      _withAppProof: boolean,
      _appCircuitOutput: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryRequestStatus(
      _requestId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refund(
      _requestId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestTimeout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendRequest(
      _requestId: BytesLike,
      _refundee: string,
      _callback: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRequestTimeout(
      _timeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
