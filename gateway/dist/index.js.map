{"version":3,"sources":["../src/server/index.ts","../../markets.json","../src/constants/index.ts","../src/db/index.ts","../src/graphql/common.ts","../src/graphql/index.ts","../src/prover/index.ts","../src/ether_interactions/index.ts","../../contract/typechain/index.ts","../../contract/typechain/factories/index.ts","../../contract/typechain/factories/@openzeppelin/index.ts","../../contract/typechain/factories/@openzeppelin/contracts/index.ts","../../contract/typechain/factories/@openzeppelin/contracts/access/index.ts","../../contract/typechain/factories/@openzeppelin/contracts/access/Ownable__factory.ts","../../contract/typechain/factories/@openzeppelin/contracts/token/index.ts","../../contract/typechain/factories/@openzeppelin/contracts/token/ERC20/index.ts","../../contract/typechain/factories/@openzeppelin/contracts/token/ERC20/IERC20__factory.ts","../../contract/typechain/factories/brevis-contracts/index.ts","../../contract/typechain/factories/brevis-contracts/contracts/index.ts","../../contract/typechain/factories/brevis-contracts/contracts/sdk/index.ts","../../contract/typechain/factories/brevis-contracts/contracts/sdk/apps/index.ts","../../contract/typechain/factories/brevis-contracts/contracts/sdk/apps/framework/index.ts","../../contract/typechain/factories/brevis-contracts/contracts/sdk/apps/framework/BrevisApp__factory.ts","../../contract/typechain/factories/brevis-contracts/contracts/sdk/interface/index.ts","../../contract/typechain/factories/brevis-contracts/contracts/sdk/interface/IBrevisProof__factory.ts","../../contract/typechain/factories/brevis-contracts/contracts/sdk/lib/index.ts","../../contract/typechain/factories/brevis-contracts/contracts/sdk/lib/Lib.sol/index.ts","../../contract/typechain/factories/brevis-contracts/contracts/sdk/lib/Lib.sol/Tx__factory.ts","../../contract/typechain/factories/contracts/index.ts","../../contract/typechain/factories/contracts/FeeReimbursementApp.sol/index.ts","../../contract/typechain/factories/contracts/FeeReimbursementApp.sol/FeeReimbursementApp__factory.ts","../../contract/typechain/factories/contracts/FeeReimbursementApp.sol/IFeeRebateTierModule__factory.ts","../../contract/typechain/factories/contracts/FeeReimbursementApp.sol/IMigration__factory.ts","../../contract/typechain/factories/contracts/MockFeeModule__factory.ts","../src/brevis_request/BrevisRequest__factory.ts","../src/rpc/index.ts","../src/interval_jobs/index.ts","../src/index.ts"],"sourcesContent":["import express from \"express\";\nimport { findUserExistingUTVF, findUserExistingUTVFByDate, getUserTradeVolumeFee, insertUserTradeVolumeFee } from \"../db/index.ts\";\nimport {\n  PROOF_STATUS_ONCHAIN_VERIFIED,\n  \n  FEE_REIMBURSEMENT_INFO_STATUS_INIT,\n  FEE_REIMBURSEMENT_INFO_STATUS_NEED_TO_SUBMIT_REQUEST,\n  FEE_REIMBURSEMENT_INFO_STATUS_UNDEFINED,\n  FEE_REIMBURSEMENT_INFO_STATUS_WAITING_FOR_RESULT,\n  FEE_REIMBURSEMENT_INFO_STATUS_FEE_REIMBURSED,\n  FEE_REIMBURSEMENT_INFO_STATUS_INELIGIBLE_ACCOUNT_ID,\n  PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED,\n  PROOF_STATUS_INELIGIBLE_ACCOUNT_ID,\n  PROOF_STATUS_BREVIS_QUERY_ERROR,\n} from \"../constants/index.ts\";\nimport {\n  checkRequestStatusOnchain,\n  getReceiptInfos,\n  getStorageInfos,\n  prepareNewDayTradeClaims,\n  prepareTrades,\n  prepareUserSwapAmountProof,\n  submitUserSwapAmountTx,\n  uploadProofs,\n  uploadUserSwapAmountProof,\n} from \"../interval_jobs/index.ts\";\nimport {\n  monitorFeeAccumulated,\n  submitBrevisRequestTx,\n} from \"../ether_interactions/index.ts\";\nimport { validTimeNumber, UserTradeVolumeFee, findNextDay, findDayStartTimestamp, findDayEndTimestamp } from \"./type.ts\";\nimport moment from \"moment\";\nimport { getAccountTradesList, getAllTradesWithin30Day } from \"../graphql/index.ts\";\nimport { error } from \"console\";\n\nconst app = express();\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\napp.use((req, res, next) => {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Headers\", \"Content-Type\");\n  next();\n});\ngetReceiptInfos().then();\nsetInterval(getReceiptInfos, 1000);\n\nprepareUserSwapAmountProof().then();\nsetInterval(prepareUserSwapAmountProof, 30000);\n\nuploadUserSwapAmountProof().then();\nsetInterval(uploadUserSwapAmountProof, 15000);\n\nprepareTrades().then();\nsetInterval(prepareTrades, 1000);\n\nmonitorFeeAccumulated();\n\nprepareNewDayTradeClaims();\nsetInterval(prepareNewDayTradeClaims, 60000);\n\nsubmitUserSwapAmountTx();\nsetInterval(submitUserSwapAmountTx, 2000);\n\ncheckRequestStatusOnchain();\nsetInterval(checkRequestStatusOnchain, 1000);\n\nuploadProofs();\nsetInterval(uploadProofs, 5000);\n\nvar deleteDay = 0\n// a()\n// setInterval(a, 30000)\n\nasync function a() {\n  deleteDay += 1\n  const yesterday = Number((moment.utc(new Date()).subtract(deleteDay, \"d\")).format('YYYYMMDD'))\n  const yesterdayStart = moment.utc(yesterday.toString(), \"YYYYMMDD\", true)\n  const tsStart = yesterdayStart.utc().unix()\n  const tsEnd = yesterdayStart.utc().add(1, \"d\").unix() - 1\n  const ts30DAgo = yesterdayStart.utc().subtract(29, \"d\").unix()\n\n  getAllTradesWithin30Day(ts30DAgo, tsEnd).then(result => {\n    const accountTradesList = getAccountTradesList(result.trades)\n  \n    type TradesInfo = {\n      tradeLength: number,\n      unclaimableLength: number,\n      claimableLength: number,\n    }\n    const tradesInfos: TradesInfo[] = []      \n    for (var i = 0; i < accountTradesList.length; i++) {\n      const trades = accountTradesList[i].trades\n      if (trades.length === 0) {\n        tradesInfos.push({\n          tradeLength: 0,\n          unclaimableLength: 0,\n          claimableLength: 0,\n        })\n        continue\n      }\n  \n      const claimableTrades = trades.filter(trade => {\n        return trade.timestamp >= tsStart && trade.timestamp <= tsEnd\n      })\n  \n      tradesInfos.push({\n        tradeLength: trades.length,\n        claimableLength: claimableTrades.length,\n        unclaimableLength: trades.length-claimableTrades.length,\n      })\n    }\n  \n    tradesInfos.sort((a,b) => {\n      if (a.tradeLength > b.tradeLength) {\n        return -1\n      } else if (a.tradeLength == b.tradeLength && a.claimableLength > b.claimableLength) {\n        return -1\n      } else {\n        return 1\n      }\n    })\n\n    const smallCircuit = tradesInfos.filter(info => {\n      return info.claimableLength > 0 && info.claimableLength <= 20 && info.unclaimableLength <= 216\n    }).length\n\n    const noClaimable = tradesInfos.filter(info => {\n      return info.claimableLength == 0 \n    }).length\n\n    const claimable = tradesInfos.filter(info => {\n      return info.claimableLength > 0 \n    }).length\n\n    const mCircuit = tradesInfos.filter(info => {\n      return info.claimableLength > 0 && info.claimableLength <= 50 && info.unclaimableLength <= 412\n    }).length\n\n    const lCircuit = tradesInfos.filter(info => {\n      return info.claimableLength > 0 && info.claimableLength <= 300\n    }).length\n\n    const notSupport = tradesInfos.filter(info => {\n      return info.claimableLength > 300\n    }).length\n\n    console.log(`\n     ${yesterday} length: ${tradesInfos.length},\n     claimable account length: ${claimable}\n     smallCircuit support: ${smallCircuit} coverage: ${ smallCircuit/claimable * 100}%\n     mediumCircuit: ${mCircuit- smallCircuit} coverage: ${ (mCircuit-smallCircuit)/claimable * 100}%\n     lCircuit: ${lCircuit- mCircuit} coverage: ${ (lCircuit- mCircuit)/claimable * 100}%\n     no claimable account: ${noClaimable} percentage: ${noClaimable/tradesInfos.length*100}%\n     claimable trades length not support: ${notSupport} percentage: ${ notSupport/tradesInfos.length * 100}%\n     `)\n\n  \n    // for (var i = 0; i < 20; i++) {\n    //   if (i < tradesInfos.length ) {\n    //     const tradesInfo = tradesInfos[i]\n    //     console.log(`trades ${tradesInfo.tradeLength} claimable: ${tradesInfo.claimableLength} and unclaimable: ${tradesInfo.unclaimableLength}`)  \n    //   }\n     \n    // }\n    console.log(`=========================================================================================`)\n\n  }).catch(error => {\n    console.error(\"get all trades within 30day error\", error)\n  })\n}\n\n\n","{\n  \"contracts\": [\n    \"0x001b7876f567f0b3a639332ed1e363839c6d85e2\",\n    \"0x01a43786c2279dc417e7901d45b917afa51ceb9a\",\n    \"0x031a448f59111000b96f016c37e9c71e57845096\",\n    \"0x074b8f19fc91d6b2eb51143e1f186ca0ddb88042\",\n    \"0x08388dc122a956887c2f736aaec4a0ce6f0536ce\",\n    \"0x0940b0a96c5e1ba33aee331a9f950bb2a6f2fb25\",\n    \"0x09f9d7aaa6bef9598c3b676c0e19c9786aa566a8\",\n    \"0x0ea09d97b4084d859328ec4bf8ebcf9ecca26f1d\",\n    \"0x10305c1854d6db8a1060df60bdf8a8b2981249cf\",\n    \"0x105f7f2986a2414b4007958b836904100a53d1ad\",\n    \"0x1228c7d8bbc5bc53db181bd7b1fce765aa83bf8a\",\n    \"0x139f94e4f0e1101c1464a321cba815c34d58b5d9\",\n    \"0x152da6a8f32f25b56a32ef5559d4a2a96d09148b\",\n    \"0x1681212a0edaf314496b489ab57cb3a5ad7a833f\",\n    \"0x1dad8808d8ac58a0df912adc4b215ca3b93d6c49\",\n    \"0x2292865b2b6c837b7406e819200ce61c1c4f8d43\",\n    \"0x27665271210acff4fab08ad9bb657e91866471f0\",\n    \"0x296286ae0b5c066cbcfe46cc4ffb375bccafe640\",\n    \"0x2b3bb4c683bfc5239b029131eef3b1d214478d93\",\n    \"0x2c5e2148bf3409659967fe3684fd999a76171235\",\n    \"0x2ea06e73083f1b3314fa090eae4a5f70eb058f2e\",\n    \"0x2f0f0865dfdd52adefb583ae824dde7d60b76a3b\",\n    \"0x2f0fe4b621e7e54110446ce2df699004c6194636\",\n    \"0x2fd9a39acf071aa61f92f3d7a98332c68d6b6602\",\n    \"0x31a1659ca00f617e86dc765b6494afe70a5a9c1a\",\n    \"0x33d4613639603c845e61a02cd3d2a78be7d513dc\",\n    \"0x35b0ed8473e7943d31ee1eeead06c8767034ce39\",\n    \"0x3a52b21816168dfe35be99b7c5fc209f17a0adb1\",\n    \"0x3d3f34416f60f77a0a6cc8e32abe45d32a7497cb\",\n    \"0x3ed04ceff4c91872f19b1da35740c0be9ca21558\",\n    \"0x3f957df3ab99ff502ee09071dd353bf4352bbefe\",\n    \"0x4272b356e7e406eeef15e47692f7f4de86370634\",\n    \"0x4308427c463caeaab50fff98a9dec569c31e4e87\",\n    \"0x442b69937a0daf9d46439a71567fabe6cb69fbaf\",\n    \"0x4434f56ddbde28fab08c4ae71970a06b300f8881\",\n    \"0x48beadab5781af9c4fec27ac6c8e0f402f2cc3d6\",\n    \"0x4aa0dabd22bc0894975324bec293443c8538bd08\",\n    \"0x4bf3c1af0faa689e3a808e6ad7a8d89d07bb9ec7\",\n    \"0x4ff54624d5fb61c34c634c3314ed3bfe4dbb665a\",\n    \"0x509072a5ae4a87ac89fc8d64d94adcb44bd4b88e\",\n    \"0x50a40d947726ac1373dc438e7aadede9b237564d\",\n    \"0x5374761526175b59f1e583246e20639909e189ce\",\n    \"0x549dbdffbd47bd5639f9348ebe82e63e2f9f777a\",\n    \"0x572f816f21f56d47e4c4fa577837bd3f58088676\",\n    \"0x59b007e9ea8f89b069c43f8f45834d30853e3699\",\n    \"0x5af0072617f7f2aeb0e314e2fad1de0231ba97cd\",\n    \"0x5b6beb79e959aac2659bee60fe0d0885468bf886\",\n    \"0x5ed8d0946b59d015f5a60039922b870537d43689\",\n    \"0x6110df298b411a46d6edce72f5caca9ad826c1de\",\n    \"0x66fc48720f09ac386608fb65ede53bb220d0d5bc\",\n    \"0x6940e7c6125a177b052c662189bb27692e88e9cb\",\n    \"0x69f5f465a46f324fb7bf3fd7c0d5c00f7165c7ea\",\n    \"0x71f42ca320b3e9a8e4816e26de70c9b69eaf9d24\",\n    \"0x76bb1edf0c55ec68f4c8c7fb3c076b811b1a9b9f\",\n    \"0x77da808032dcdd48077fa7c57afbf088713e09ad\",\n    \"0x852210f0616ac226a486ad3387dbf990e690116a\",\n    \"0x86bbb4e38ffa64f263e84a0820138c5d938ba86e\",\n    \"0x87ae62c5720dab812bdacba66cc24839440048d1\",\n    \"0x88c8316e5cccce2e27e5bfcdac99f1251246196a\",\n    \"0x8b9b5f94aac2316f048025b3cbe442386e85984b\",\n    \"0x90c9b9d7399323fffe63819788eed7cde1e6a78c\",\n    \"0x91cc4a83d026e5171525afcaed020123a653c2c9\",\n    \"0x9615b6bfff240c44d3e33d0cd9a11f563a2e8d8b\",\n    \"0x96690aae7cb7c4a9b5be5695e94d72827decc33f\",\n    \"0x96f2842007021a4c5f06bcc72961701d66ff8465\",\n    \"0x98ccbc721cc05e28a125943d69039b39be6a21e9\",\n    \"0x9de146b5663b82f44e5052dede2aa3fd4cbcdc99\",\n    \"0x9f1c2f0071bc3b31447aeda9fa3a68d651eb4632\",\n    \"0x9f231dbe53d460f359b2b8cc47574493caa5b7bf\",\n    \"0xa1ace9ce6862e865937939005b1a6c5ac938a11f\",\n    \"0xaa94c874b91ef16c8b56a1c5b2f34e39366bd484\",\n    \"0xad44873632840144ffc97b2d1de716f6e2cf0366\",\n    \"0xae90e9bb73b32505fb56a0f4fd4ec8cf94bab730\",\n    \"0xaf2e4c337b038eafa1de23b44c163d0008e49ead\",\n    \"0xb147c69bee211f57290a6cde9d1babfd0dcf3ea3\",\n    \"0xb25529266d9677e9171beaf333a0dea506c5f99a\",\n    \"0xb3422e49db926f7c5f5d7daf5f1069abf1b7e894\",\n    \"0xb7059ed9950f2d9fdc0155fc0d79e63d4441e806\",\n    \"0xb815eb8d3a9da3eddd926225c0fbd3a566e8c749\",\n    \"0xbb16c7b3244dfa1a6bf83fcce3ee4560837763cd\",\n    \"0xbbd74c2c8c89d45b822e08fce400f4dde99e600b\",\n    \"0xbcb2d435045e16b059b2130b28be70b5ca47bfe5\",\n    \"0xbdb26bfb6a229d7f254faf1b2c744887ec5f1f31\",\n    \"0xc18f85a6dd3bcd0516a1ca08d3b1f0a4e191a2c4\",\n    \"0xc203a12f298ce73e44f7d45a4f59a43dbffe204d\",\n    \"0xc645a757dd81c69641e010add2da894b4b7bc921\",\n    \"0xc8fcd6fb4d15dd7c455373297def375a08942ece\",\n    \"0xcf853f7f8f78b2b801095b66f8ba9c5f04db1640\",\n    \"0xd325b17d5c9c3f2b6853a760afcf81945b0184d3\",\n    \"0xd4e9e0784c3ce4796f54f2ea0d337c7cfccfd645\",\n    \"0xd5faaa459e5b3c118fd85fc0fd67f56310b1618d\",\n    \"0xd5fbf7136b86021ef9d0be5d798f948dce9c0dea\",\n    \"0xd5fccd43205cef11fbaf9b38df15adbe1b186869\",\n    \"0xd91db82733987513286b81e7115091d96730b62a\",\n    \"0xdcb8438c979fa030581314e5a5df42bbfed744a0\",\n    \"0xdccda0cfbee25b33ff4ccca64467e89512511bf6\",\n    \"0xe698ccc3cd4f2172a848094ea6d28d89d750c16f\",\n    \"0xeaf0191bca9dd417202cef2b18b7515abff1e196\",\n    \"0xee8804d8ad10b0c3ad1bd57ac3737242ad24bb95\",\n    \"0xf7d9bd13f877171f6c7f93f71bdf8e380335dc12\",\n    \"0xf86048dff23cf130107dfb4e6386f574231a5c65\",\n    \"0xf8ab6b9008f2290965426d3076bc9d2ea835575e\",\n    \"0xf9ae92bc49a5dd96ae5840eaae75218016811c99\",\n    \"0xf9dd29d2fd9b38cd90e390c797f1b7e0523f43a9\",\n    \"0xfad0835dad2985b25ddab17eace356237589e5c7\",\n    \"0xfbbbfa96af2980ae4014d5d5a2ef14bd79b2a299\",\n    \"0xfe00395ec846240dc693e92ab2dd720f94765aa3\"\n  ]\n}\n","import * as contracts from \"../../../markets.json\"\n\nconst STATUS_UNKNOWN = BigInt(0)\nconst STATUS_INIT = BigInt(1)\nconst STATUS_READY = BigInt(2)\n\nconst PROOF_STATUS_UNKNOWN = BigInt(0)\nconst PROOF_STATUS_INIT = BigInt(1)\nconst PROOF_STATUS_INPUT_READY = BigInt(2)\nconst PROOF_STATUS_PROVING_SENT = BigInt(3)\nconst PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED = BigInt(4)\nconst PROOF_STATUS_PROOF_UPLOAD_SENT = BigInt(5)\nconst PROOF_STATUS_PROOF_UPLOADED = BigInt(6)\nconst PROOF_STATUS_BREVIS_QUERY_ERROR = BigInt(7)\nconst PROOF_STATUS_ONCHAIN_VERIFIED = BigInt(8)\nconst PROOF_STATUS_RETRY = BigInt(9)\nconst PROOF_STATUS_INELIGIBLE_ACCOUNT_ID = BigInt(99)\n\nconst FEE_REIMBURSEMENT_INFO_STATUS_UNDEFINED = 0\nconst FEE_REIMBURSEMENT_INFO_STATUS_INIT = 1\nconst FEE_REIMBURSEMENT_INFO_STATUS_INELIGIBLE_ACCOUNT_ID = 2\nconst FEE_REIMBURSEMENT_INFO_STATUS_NEED_TO_SUBMIT_REQUEST = 3\nconst FEE_REIMBURSEMENT_INFO_STATUS_WAITING_FOR_RESULT = 4\nconst FEE_REIMBURSEMENT_INFO_STATUS_FEE_REIMBURSED = 5\n\nconst TX_TYPE_ORDER_FEE_FLOW = 1\nconst TX_TYPE_EXECUTION = 2\n\nconst OrderFlowFeeImposedEvent                = \"0x213209073252965f156ceca72c65727bfcf77e3f25ca2a1f23a1b9db58295d48\".toLowerCase()\nconst OrderFlowFeeImposedEventContractAddress = \"0x6B32d15a6Cb77ea227A6Fb19532b2de542c45AC6\".toLowerCase()\nconst DelayedOrderSubmittedEvent              = \"0x9deb3648ccf8efc44205985ac6ead4ffb30791fea9ce7f9437ae398b31cf9d5a\".toLowerCase()\nconst PositionModifiedEvent                   = \"0xc0d933baa356386a245ade48f9a9c59db4612af2b5b9c17de5b451c628760f43\".toLowerCase()\n\nconst PositionModifiedContracts = contracts.contracts\n\nfunction hexStringToUint8Array(hexString: string){\n    if (hexString.length % 2 !== 0){\n      throw \"Invalid hexString\";\n    }/*from  w w w.  j  av a 2s  . c  o  m*/\n    var arrayBuffer = new Uint8Array(hexString.length / 2);\n  \n    for (var i = 0; i < hexString.length; i += 2) {\n      var byteValue = parseInt(hexString.substr(i, 2), 16);\n      if (isNaN(byteValue)){\n        throw \"Invalid hexString\";\n      }\n      arrayBuffer[i/2] = byteValue;\n    }\n  \n    return arrayBuffer;\n}\n\nfunction isValidPositionModifiedContract(contract: string) {\n  return PositionModifiedContracts.find(value => {\n    return contract.toLowerCase() === value.toLowerCase()\n  })\n}\n\nexport {\n    STATUS_UNKNOWN,\n    STATUS_INIT,\n    STATUS_READY,\n    PROOF_STATUS_UNKNOWN,\n    PROOF_STATUS_INIT,\n    PROOF_STATUS_INPUT_READY,\n    PROOF_STATUS_PROVING_SENT,\n    PROOF_STATUS_PROOF_UPLOAD_SENT,\n    PROOF_STATUS_PROOF_UPLOADED,\n    PROOF_STATUS_BREVIS_QUERY_ERROR,\n    PROOF_STATUS_ONCHAIN_VERIFIED,\n    PROOF_STATUS_INELIGIBLE_ACCOUNT_ID,\n    PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED,\n    \n    FEE_REIMBURSEMENT_INFO_STATUS_UNDEFINED,\n    FEE_REIMBURSEMENT_INFO_STATUS_INIT,\n    FEE_REIMBURSEMENT_INFO_STATUS_INELIGIBLE_ACCOUNT_ID,\n    FEE_REIMBURSEMENT_INFO_STATUS_NEED_TO_SUBMIT_REQUEST,\n    FEE_REIMBURSEMENT_INFO_STATUS_WAITING_FOR_RESULT,\n    FEE_REIMBURSEMENT_INFO_STATUS_FEE_REIMBURSED,\n\n    TX_TYPE_ORDER_FEE_FLOW,\n    TX_TYPE_EXECUTION,\n\n    OrderFlowFeeImposedEvent,\n    OrderFlowFeeImposedEventContractAddress,\n    DelayedOrderSubmittedEvent,\n    PositionModifiedEvent,\n    PositionModifiedContracts,\n    hexStringToUint8Array,\n    isValidPositionModifiedContract\n}\n","import { PrismaClient } from \"@prisma/client\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  PROOF_STATUS_BREVIS_QUERY_ERROR,\n  PROOF_STATUS_INIT,\n  PROOF_STATUS_PROOF_UPLOAD_SENT,\n  PROOF_STATUS_PROOF_UPLOADED,\n  PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED,\n  STATUS_INIT,\n} from \"../constants/index.ts\";\nimport { Trade } from \"../graphql/common.ts\";\n\nconst prisma = new PrismaClient();\n\n// transaction_type: OrderFeeFlowTx is 1, ExecutionTx is 2\nasync function insertReceipt(tx_hash: string, account: string, transaction_type: bigint): Promise<any> {\n  console.log(`Insert receipt: tx: ${tx_hash}, account: ${account}, transaction_type: ${transaction_type}`)\n  return prisma.receipt.create({\n    data: {\n      id: uuidv4(),\n      tx_hash: tx_hash?.toLowerCase(),\n      account: account?.toLowerCase(),\n      status: STATUS_INIT,\n      create_time: new Date(),\n      update_time: new Date(),\n      transaction_type: transaction_type,\n    },\n  });\n}\n\nasync function updateReceipt(\n  tx_hash: string,\n  account: string,\n  transaction_type: bigint,\n  status: bigint,\n  data: string,\n  should_be_filtered_out: boolean,\n): Promise<any> {\n  return prisma.receipt.update({\n    where: {\n      tx_hash_account_transaction_type: {\n        tx_hash: tx_hash?.toLowerCase(),\n        account: account?.toLowerCase(),\n        transaction_type: transaction_type,\n      }\n    },\n    data: {\n      status: status,\n      update_time: new Date(),\n      should_be_filtered_out: should_be_filtered_out,\n      data: data,\n    },\n  });\n}\n\nasync function getReceipt(id: string): Promise<any> {\n  return prisma.receipt.findFirst({\n    where: {\n      id: id,\n    },\n  });\n}\n\nasync function getReceiptByHash(\n  tx_hash: string,\n  account: string,\n  transaction_type: bigint,\n): Promise<any> {\n  return prisma.receipt.findUnique({\n    where: {\n      tx_hash_account_transaction_type: {\n        tx_hash: tx_hash?.toLowerCase(),\n        account: account?.toLowerCase(),\n        transaction_type: transaction_type,\n      }\n    }\n  })\n}\n\nasync function findNotReadyReceipts(): Promise<any> {\n  return prisma.receipt.findMany({\n    take: 50,\n    where: {\n      status: STATUS_INIT,\n    },\n  });\n}\n\nasync function findNotReadyTrades(): Promise<any> {\n  return prisma.trade.findMany({\n    take: 50,\n    where: {\n      status: STATUS_INIT,\n    },\n  });\n}\n\n\nasync function insertStorage(account: string, key: string, blkNumber: bigint): Promise<any> {\n  return prisma.storage.create({\n    data: {\n      id: uuidv4(),\n      account: account,\n      key: key,\n      blk_number: BigInt(blkNumber),\n      status: STATUS_INIT,\n      create_time: new Date(),\n      update_time: new Date(),\n    },\n  });\n}\n\nasync function updateStorage(\n  id: string,\n  status: bigint,\n  value: string,\n  data: string,\n): Promise<any> {\n  return prisma.storage.update({\n    where: {\n      id: id,\n    },\n    data: {\n      status: status,\n      value: value,\n      update_time: new Date(),\n      data: data,\n    },\n  });\n}\n\nasync function getStorage(id: string): Promise<any> {\n  return prisma.storage.findUnique({\n    where: {\n      id: id,\n    },\n  });\n}\n\nasync function findNotReadyStorages(): Promise<any> {\n  var now = new Date();\n  now.setSeconds(now.getSeconds() - 10);\n  return prisma.receipt.findMany({\n    take: 10,\n    where: {\n      status: STATUS_INIT,\n      update_time: {\n        lte: now,\n      },\n    },\n  });\n}\n\nasync function insertUserTradeVolumeFee(\n  src_chain_id: bigint,\n  dst_chain_id: bigint,\n  account: string,\n  owner: string,\n  ymd: bigint,\n): Promise<any> {\n  console.log(\n    `Insert user trade volume fee: src_chain_id: ${src_chain_id}, dst_chain_id: ${dst_chain_id}, account: ${account}, owner: ${owner}, ymd: ${ymd}`\n  )\n  return prisma.user_trade_volume_fee.create({\n    data: {\n      id: uuidv4(),\n      src_chain_id: src_chain_id,\n      dst_chain_id: dst_chain_id,\n      account: account?.toLowerCase(),\n      owner_address: owner,\n      ymd: ymd,\n      status: PROOF_STATUS_INIT,\n      create_time: new Date(),\n      update_time: new Date(),\n      request_sent: false,\n    },\n  });\n}\n\nasync function updateUserTradeVolumeFeeWithCreateTime(utvf: any): Promise<any> {\n  return prisma.user_trade_volume_fee.update({\n    where: {\n      account_ymd: {\n        account: utvf.account?.toLowerCase(),\n        ymd: utvf.ymd,\n      }\n    },\n    data: {\n      volume: utvf.volume,\n      fee: utvf.fee,\n      trade_ids: utvf.trade_ids,\n      storage_ids: utvf.storage_ids,\n      brevis_query_hash: utvf.brevis_query_hash?.toLowerCase(),\n      brevis_query_fee: utvf.brevis_query_fee,\n      proof: utvf.proof,\n      status: utvf.status,\n      create_time: utvf.create_time,\n      update_time: new Date(),\n      prover_id: utvf.prover_id,\n      request_sent: utvf.request_sent,\n      start_blk_num: utvf.start_blk_num,\n      end_blk_num: utvf.end_blk_num,\n      fee_rebate: utvf.fee_rebate,\n    },\n  });\n}\n\n\nasync function updateUserTradeVolumeFee(utvf: any): Promise<any> {\n  return prisma.user_trade_volume_fee.update({\n    where: {\n      account_ymd: {\n        account: utvf.account?.toLowerCase(),\n        ymd: utvf.ymd,\n      }\n    },\n    data: {\n      volume: utvf.volume,\n      fee: utvf.fee,\n      trade_ids: utvf.trade_ids,\n      storage_ids: utvf.storage_ids,\n      brevis_query_hash: utvf.brevis_query_hash?.toLowerCase(),\n      brevis_query_fee: utvf.brevis_query_fee,\n      proof: utvf.proof,\n      status: utvf.status,\n      update_time: new Date(),\n      prover_id: utvf.prover_id,\n      request_sent: utvf.request_sent,\n      start_blk_num: utvf.start_blk_num,\n      end_blk_num: utvf.end_blk_num,\n      fee_rebate: utvf.fee_rebate,\n    },\n  });\n}\n\nasync function updateUserTradeVolumeFeeRequestSent(account: string, ymd: bigint, request_sent: any): Promise<any> {\n  return prisma.user_trade_volume_fee.update({\n    where: {\n      account_ymd: {\n        account: account?.toLowerCase(),\n        ymd: ymd,\n      },\n    },\n    data: {\n      request_sent: request_sent,\n    },\n  });\n}\n\nasync function getUserTradeVolumeFee(  \n  account: string,\n  ymd: bigint\n): Promise<any> {\n  return prisma.user_trade_volume_fee.findUnique({\n    where: {\n      account_ymd: {\n        account: account?.toLowerCase(),\n        ymd: ymd,\n      }\n    },\n  });\n}\n\nasync function findUserExistingUTVF(\n  account: string,\n  start_blk_num: bigint,\n  end_blk_num: bigint\n): Promise<any> {\n  return prisma.user_trade_volume_fee.findFirst({\n    where: {\n      account: account?.toLowerCase(),\n      start_blk_num: {\n        equals: start_blk_num,\n      },\n      end_blk_num: {\n        equals: end_blk_num,\n      }\n    },\n  });\n}\n\nasync function findUserExistingUTVFByDate(\n  account: string,\n  ymd: bigint,\n): Promise<any> {\n  return prisma.user_trade_volume_fee.findUnique({\n    where: {\n      account_ymd: {\n        account: account?.toLowerCase(),\n        ymd: ymd,\n      }\n    },\n  });\n}\n\nasync function findUserTradeVolumeFees(status: bigint): Promise<any> {\n  return prisma.user_trade_volume_fee.findMany({\n    take: 3,\n    where: {\n      status: {\n        equals: status,\n      },\n    },\n  });\n}\n\nasync function findBrevisRequestSentUTVFS(): Promise<any> {\n  return prisma.user_trade_volume_fee.findMany({\n    take: 1,\n    where: {\n      status: {\n        equals: PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED,\n      },\n    },\n    orderBy: [\n      {\n        update_time: 'asc',\n      }\n    ]\n  });\n}\n\nasync function findProofToUpload(): Promise<any> {\n  const a = new Date()\n  a.setMinutes(a.getMinutes() - 3)\n  return prisma.user_trade_volume_fee.findMany({\n    take: 5,\n    where: {\n      status: {\n        equals: PROOF_STATUS_PROOF_UPLOAD_SENT,\n      },\n      update_time: {\n        lte: a\n      }\n    },\n    orderBy: [\n      {\n        update_time: 'asc',\n      }\n    ]\n  });\n}\n\nasync function findTxToBeSent(): Promise<any> {\n  return prisma.user_trade_volume_fee.findMany({\n    take: 1,\n    where: {\n      status: {\n        gte: PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED,\n        lt: PROOF_STATUS_BREVIS_QUERY_ERROR,\n      },\n      request_sent: {\n        equals: false,\n      }\n    },\n  });\n}\n\nasync function findRequestSentsUTVF(ymd: bigint): Promise<any> {\n  return prisma.user_trade_volume_fee.findMany({\n    take: 1,\n    where: {\n      request_sent: {\n        equals: true,\n      },\n      ymd: {\n        equals: ymd,\n      },\n    },\n    orderBy: [\n      {\n        update_time: 'asc',\n      }\n    ]\n  });\n}\n\nasync function insertDailyTrack(\n  year_month_day: bigint,\n): Promise<any> {\n  return prisma.daily_track.create({\n    data: {\n      year_month_day: year_month_day,\n    },\n  });\n}\n\nasync function getDailyTrack(year_month_day: bigint): Promise<any> {\n  return prisma.daily_track.findUnique({\n    where: {\n      year_month_day: year_month_day,\n    },\n  });\n}\n\nasync function findUTVFToDownLoadProof():  Promise<any> {\n  return prisma.user_trade_volume_fee.findMany({\n    take: 1,\n    where: {\n      prover_id: {\n        not: null || '',\n      },\n      proof: {\n        equals: null || '',\n      },\n    },\n    orderBy: [\n      {\n        update_time: 'asc',\n      }\n    ]\n  });\n}\n\nasync function findUTVFToUploadProof():  Promise<any> {\n  return prisma.user_trade_volume_fee.findMany({\n    take: 5,\n    where: {\n      brevis_query_hash: {\n        not: null || '',\n      },\n      status: {\n        not: PROOF_STATUS_PROOF_UPLOADED,\n      },\n      proof: {\n        not: null || '',\n      },\n    },\n    orderBy: [\n      {\n        update_time: 'asc',\n      }\n    ]\n  });\n}\n\nasync function insertTrade(\n  trade: Trade,\n  order_fee_flow_tx_receipt_id: string,\n  execution_tx_receipt_id: string,\n): Promise<any> {\n  console.log(`Insert trade: execution_tx_receipt_id: ${execution_tx_receipt_id}, account: ${trade.abstractAccount}`)\n  return prisma.trade.create({\n    data: {\n      order_fee_flow_tx_receipt_id: order_fee_flow_tx_receipt_id,\n      execution_tx_receipt_id: execution_tx_receipt_id,\n      execution_tx_block_number: BigInt(trade.blockNumber),\n      account: trade.abstractAccount.toLowerCase(),\n      volume: trade.volume,\n      fee: trade.feesPaid,\n      status: STATUS_INIT,\n      create_time: new Date(),\n      update_time: new Date(), \n    }\n  }).catch((reason: any) => {\n    console.debug(`Failed to insert trade: execution_tx_receipt_id: ${execution_tx_receipt_id}, account: ${trade.abstractAccount}`)\n    // console.debug(`cannot insert trade ${reason}`)\n    return undefined;\n  })\n}\n\nasync function getTrade(\n  execution_tx_receipt_id: string,\n  account: string,\n): Promise<any> {\n  return prisma.trade.findUnique({\n    where: {\n      execution_tx_receipt_id_account: {\n        execution_tx_receipt_id: execution_tx_receipt_id,\n        account: account,\n      }\n    }\n  })\n}\n\nasync function updateTrade(\n  execution_tx_receipt_id: string,\n  account: string,\n  status: bigint\n): Promise<any> {\n  return prisma.trade.update({\n    where: {\n      execution_tx_receipt_id_account: {\n        execution_tx_receipt_id: execution_tx_receipt_id,\n        account: account.toLowerCase(),\n      }\n    },\n    data: {\n      status: status,\n      update_time: new Date(),\n    },\n  })\n}\n\nexport {\n  insertReceipt,\n  updateReceipt,\n  getReceipt,\n  getReceiptByHash,\n  findNotReadyReceipts,\n  insertUserTradeVolumeFee,\n  updateUserTradeVolumeFee,\n  getUserTradeVolumeFee,\n  findUserExistingUTVF,\n  findUserExistingUTVFByDate,\n  findUserTradeVolumeFees,\n  insertStorage,\n  updateStorage,\n  getStorage,\n  findNotReadyStorages,\n  insertDailyTrack,\n  getDailyTrack,\n  findTxToBeSent,\n  insertTrade,\n  getTrade,\n  updateTrade,\n  findNotReadyTrades,\n  findProofToUpload,\n  updateUserTradeVolumeFeeRequestSent,\n  findBrevisRequestSentUTVFS,\n  findUTVFToDownLoadProof,\n  findUTVFToUploadProof,\n  findRequestSentsUTVF,\n  updateUserTradeVolumeFeeWithCreateTime,\n};\n","const GraphRpc = \"https://subgraph.satsuma-prod.com/616cc2144c5c/kwenta/optimism-perps/version/0.0.22.1/api\";\n\ntype Trade = {\n  blockNumber: number,\n  account: string,    // Owner\n  abstractAccount: string, // Safe Margin Account: circuit output\n  timestamp: number,\n  orderFeeFlowTxhash: string,\n  executionTxhash: string,\n  volume: string,\n  feesPaid: string,\n}\n\nexport {\n  GraphRpc,\n  Trade\n};\n\n","import { error } from \"console\";\nimport { GraphRpc, Trade } from \"./common.ts\";\nimport { getReceiptByHash, getTrade, insertReceipt, insertTrade } from \"../db/index.ts\";\nimport { TX_TYPE_EXECUTION, TX_TYPE_ORDER_FEE_FLOW } from \"../constants/index.ts\";\n\ntype PostGraphQLRes = {\n  trades: Trade[],\n  error: Error | null\n}\n\ntype AccountTrades = {\n  trades: Trade[],\n  account: string,\n}\n\nexport const getAllTradesWithin30Day = async (\n  ts30Ago: number,\n  tsClaimDayEnd: number\n) => {\n  var first = 10000\n  var skip = 0\n  const finalResult: PostGraphQLRes = {\n    trades: [],\n    error: null\n  }\n  while(true) {\n    const result = await postGraphQL(ts30Ago, tsClaimDayEnd, skip, first)\n    if (result.error != null) {\n      finalResult.error = result.error\n      return finalResult\n    }\n\n    if (result.trades.length == 0) {\n      return finalResult\n    }\n\n    finalResult.trades = finalResult.trades.concat(result.trades)\n    skip += first\n  }\n};\n\nexport const getAccountTradesList = (\n  trades: Trade[]\n)  => {\n  let map = new Map<string, Trade[]>()\n  trades.forEach(trade => {\n    const userTrades = map.get(trade.abstractAccount)\n    if (userTrades === undefined) {\n      map.set(trade.abstractAccount, [trade])\n    } else {\n      userTrades.push(trade)\n    }\n  })\n\n  const accountTradesList: AccountTrades[] = []\n  for (let [account, trades] of map) { \n    accountTradesList.push({\n      account: account,\n      trades: trades,\n    })\n  }   \n\n  accountTradesList.sort((a,b) => {\n    if (a.trades.length < b.trades.length) {\n      return -1\n    } else {\n      return 1\n    }\n  })\n\n  return accountTradesList\n};\n\nexport const batchTradesWithSameTxAccount = (trades: Trade[]) => {\n  let map = new Map<string, Trade[]>()\n  trades.forEach(trade => {\n    const userTrades = map.get(trade.executionTxhash)\n    if (userTrades === undefined) {\n      map.set(trade.executionTxhash, [trade])\n    } else {\n      userTrades.push(trade)\n    }\n  })\n\n  const result :Trade[] = []\n  for (let [_, trades] of map) {\n    const trade = trades.reduce((t0, t1) => {\n      var orderFeeFlowTxhash = t0.orderFeeFlowTxhash\n      if (orderFeeFlowTxhash.length === 0) {\n        orderFeeFlowTxhash = t1.orderFeeFlowTxhash\n      }\n      return {\n        blockNumber: t0.blockNumber,\n        account: t0.account,\n        abstractAccount: t0.abstractAccount,\n        timestamp: t0.timestamp,\n        orderFeeFlowTxhash: orderFeeFlowTxhash,\n        executionTxhash: t0.executionTxhash,\n        volume: (BigInt(t0.volume) + BigInt(t1.volume)).toString(),\n        feesPaid: (BigInt(t0.feesPaid) + BigInt(t1.feesPaid)).toString()\n      }\n    })\n    \n    result.push(trade)\n  }\n\n  return result\n}\n\nexport const saveTrades = async (\n  trades: Trade[],\n  account: string,\n) => {\n  const promises = Array<Promise<string>>();\n \n  const batchedTrade = batchTradesWithSameTxAccount(trades)\n  for (let i =0; i < batchedTrade.length; i++) {\n    const trade = batchedTrade[i]\n    \n    var executionTxId = \"\"\n    var orderFlowTxId = \"\"\n\n    if (trade.executionTxhash.length > 0) {\n      executionTxId = await insertOrFindReceipt(trade.executionTxhash, account, TX_TYPE_EXECUTION)\n    } else {\n      console.log(`invalid trade with empty executionTxhash ${trade}`)\n      continue\n    }\n\n    if (trade.orderFeeFlowTxhash.length > 0) {\n      orderFlowTxId = await insertOrFindReceipt(trade.orderFeeFlowTxhash, account, TX_TYPE_ORDER_FEE_FLOW)\n    } else {\n      orderFlowTxId = ''\n    }\n\n    promises.push(insertOrFindTrade(\n      executionTxId,\n      orderFlowTxId,\n      trade,\n    ))\n  }\n\n  const results = await Promise.all(promises);\n  return results.reduce(\n    (accumulator, currentValue) => {\n      if (currentValue.length === 0) {\n        return accumulator\n      } \n      return accumulator + \",\" + currentValue\n    }\n  );\n}\n\nconst insertOrFindTrade = async(\n  execution_tx_receipt_id: string,\n  order_fee_flow_tx_receipt_id: string,\n  tradeInfo: Trade,\n) => {\n  var trade = await getTrade(execution_tx_receipt_id, tradeInfo.abstractAccount)\n\n  if (trade === undefined || trade === null) {\n    trade = await insertTrade(\n      tradeInfo,\n      order_fee_flow_tx_receipt_id, \n      execution_tx_receipt_id\n      )\n  }\n  if (trade === undefined || trade === null) {\n    return \"\"  \n  }\n\n  return trade.execution_tx_receipt_id\n}\n\nconst insertOrFindReceipt = async(\n  txHash: string,\n  account: string,\n  txType: number,\n) => {\n  let receipt = await getReceiptByHash(txHash, account, BigInt(txType))\n  if (receipt === undefined || receipt === null) {\n    receipt = await insertReceipt(txHash, account, BigInt(txType))\n  }\n  if (receipt === undefined || receipt === null) {\n    throw new Error(`failed to insert receipt for txHash: ${txHash}, account: ${account}, txType: ${txType}`)\n  }\n  return receipt.id\n}\n\nconst postGraphQL = async (\n  tsStart: number,\n  tsEnd: number,\n  skip: number,\n  first: number,\n) =>   {\n  try {\n    const response = await fetch(GraphRpc, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        query: `{\n          futuresTrades(orderBy: timestamp, orderDirection: asc, skip: ${skip}, first: ${first}, where: {timestamp_gte:\"${tsStart}\", timestamp_lte: \"${tsEnd}\", orderType_not: Liquidation, accountType: smart_margin, trackingCode: \"0x4b57454e54410000000000000000000000000000000000000000000000000000\"}) \n          {\n            blockNumber,\n            account,\n            abstractAccount,\n            timestamp,\n            orderFeeFlowTxhash,\n            executionTxhash,\n            size,\n            price,\n            feesPaid,\n          }\n        }`,\n      }),\n    });\n    // const swapList = res?.data?.swaps;\n    const result: PostGraphQLRes = {\n      trades: [],\n      error: null,\n    }\n    if (response.status === 200) {\n      const responseJson = await response.json();\n      if (responseJson.errors !== undefined && responseJson.errors !== null) {\n        result.error = new Error(`invalid gql response errors: ${responseJson.errors} `) \n        return result\n      }\n      const trades: Trade[] =[]\n      responseJson?.data?.futuresTrades?.forEach((element: any) => {\n        var size = BigInt(element.size)\n        if (size < 0) {\n          size = -size;\n        }\n        const volume = size * BigInt(element.price) / (BigInt('1000000000000000000'))\n        trades.push({\n          blockNumber: element.blockNumber,\n          account: element.account,\n          abstractAccount: element.abstractAccount,\n          timestamp: element.timestamp,\n          orderFeeFlowTxhash: element.orderFeeFlowTxhash ?? \"\",\n          executionTxhash: element.executionTxhash,\n          feesPaid: element.feesPaid,\n          volume: volume.toString(),\n        })\n      });\n      result.trades = trades\n      return result\n    } else {\n      console.error(\"failed to get graphql response: \", response)\n      result.error = new Error(`invalid graphql response skip: ${skip}, first: ${first}, where: {timestamp_gte:\"${tsStart}\", timestamp_lte: \"${tsEnd}\"`)\n      return result\n    }\n  } catch (error) {\n    console.error(\"faild to send graphql error:\", error);\n    const result: PostGraphQLRes = {\n      trades: [],\n      error: new Error(`faild to send graphql error: ${error}`),\n    }\n    return result\n  }\n}\n","import * as sdk from \"brevis-sdk-typescript\";\nimport { Receipt, Trade, UserTradeVolumeFee } from \"../server/type.ts\";\nimport {\n  getReceipt,\n  getTrade,\n  getUserTradeVolumeFee,\n  updateUserTradeVolumeFee,\n  updateUserTradeVolumeFeeWithCreateTime,\n} from \"../db/index.ts\";\nimport {\n  isValidPositionModifiedContract,\n  PositionModifiedContracts,\n  PositionModifiedEvent,\n  PROOF_STATUS_BREVIS_QUERY_ERROR,\n  PROOF_STATUS_INELIGIBLE_ACCOUNT_ID,\n  PROOF_STATUS_INPUT_READY,\n  PROOF_STATUS_PROOF_UPLOAD_SENT,\n  PROOF_STATUS_PROOF_UPLOADED,\n  PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED,\n  PROOF_STATUS_PROVING_SENT,\n  STATUS_READY,\n  TX_TYPE_EXECUTION,\n  TX_TYPE_ORDER_FEE_FLOW,\n} from \"../constants/index.ts\";\nimport { Contract, ethers } from \"ethers\";\nimport { ReceiptInfo } from \"../rpc/index.ts\";\nimport moment from \"moment\";\n\nconst {\n  Brevis,\n  ErrCode,\n  ProofRequest,\n  Prover,\n  ReceiptData,\n  StorageData,\n  asUint248,\n  asUint521,\n} = sdk;\n\nconst provers = [\n  new Prover(\"54.189.38.119:53248\"),\n  new Prover(\"54.189.38.119:53249\"),\n  new Prover(\"54.189.38.119:53423\"),\n  new Prover(\"54.189.38.119:53351\")\n]\n\ntype DebugReceipt = {\n  data: any;\n  tx_hash: string;\n  index: number;\n}\n\nconst brevis = new Brevis(\"appsdk.brevis.network:11080\");\n\nconst buildUserTradeVolumeFeeProofReq = async (utvf: UserTradeVolumeFee) => {\n  const proofReq = new ProofRequest();\n  const tradeIds = utvf.trade_ids.split(\",\");\n  const startBlkNum = Number(utvf.start_blk_num)\n  const endBlkNum = Number(utvf.end_blk_num)\n\n  let tradePromises = Array<Promise<Trade | undefined>>();\n  for (let i = 0; i < tradeIds.length; i++) {\n    tradePromises.push(\n      getTrade(tradeIds[i], utvf.account).then((value) => {\n        const t = value as Trade;\n        if (t === undefined || t === null) {\n          return undefined;\n        }\n        if (t.status !== STATUS_READY) {\n          throw new Error(`trade ${t.id} not ready`); \n        } else {\n          return t;\n        }\n      })\n    );\n  }\n\n  const trades = await Promise.all(tradePromises)\n  const validTrades: Trade[] = []\n  trades.forEach(trade => {\n    if (trade !== undefined) {\n      validTrades.push(trade)\n    }\n  })\n\n  validTrades.sort((a,b) => {\n    if (a.execution_tx_block_number < b.execution_tx_block_number) {\n      return -1\n    } else {\n      return 1\n    }\n  })\n\n  var tradeVolume = BigInt(0)\n  const receiptIds: string[] = []\n  validTrades.forEach(trade => {\n    if (trade.order_fee_flow_tx_receipt_id.length > 0) {\n      receiptIds.push(trade.order_fee_flow_tx_receipt_id)\n    }\n    if (trade.execution_tx_receipt_id.length > 0) {\n      receiptIds.push(trade.execution_tx_receipt_id)\n    }\n\n    if (trade.volume.length > 0) {\n      tradeVolume += BigInt(trade.volume)\n    }\n  })\n\n  // If 30 Day volume is not greater than $1,000,000, there will be no fee rebate\n  // if (tradeVolume <= BigInt(1000000) * BigInt('1000000000000000000')) {\n\n  // For testing: If 30 Day volume is not greater than $1, there will be no fee rebate\n  if (tradeVolume <= BigInt(1) * BigInt('1000000000000000000')) {\n    utvf.status = PROOF_STATUS_INELIGIBLE_ACCOUNT_ID\n    await updateUserTradeVolumeFee(utvf)\n    return {proverIndex: -1, proofReq: proofReq}\n  }\n\n  let receiptPromises = Array<Promise<Receipt | undefined>>();\n  for (let i = 0; i < receiptIds.length; i++) {\n    receiptPromises.push(\n      getReceipt(receiptIds[i]).then((value) => {\n        const r = value as Receipt;\n\n        if (r === undefined || r === null) {\n          return undefined;\n        } else {\n          if (r.should_be_filtered_out) {\n            return undefined;\n          } else {\n            return r;\n          }\n        }\n      })\n    );\n  }\n\n  console.debug(`Prover Get receipt promises.length: ${receiptPromises.length}`)\n\n  const receipts = await Promise.all(receiptPromises);\n\n  var validReceipts: Receipt[] = []\n  for (let i = 0; i < receipts.length; i++) {\n    const receipt = receipts[i];\n    if (receipt === undefined) {\n      continue;\n    }\n    if (receipt.status !== STATUS_READY) {\n      throw new Error(\"receipts not ready\"); \n    }\n\n    validReceipts = validReceipts.concat(devideReceiptIntoCircuitInputReceipts(receipt))\n  }\n\n  validReceipts.sort((a,b) => {\n    const dataA = JSON.parse(a.data);\n    const blkNumberA= Number(dataA.block_num)\n\n    const dataB = JSON.parse(b.data);\n    const blkNumberB= Number(dataB.block_num)\n    \n    if (blkNumberA < blkNumberB) {\n      return -1\n    } else if (blkNumberA == blkNumberB && Number(dataA.transaction_type) < Number(dataB.transaction_type)) {\n      return -1\n    } else {\n      return 1\n    }\n  })\n\n  var unclaimableTrades = validTrades.filter(trade => {\n    const bn = trade?.execution_tx_block_number ?? 0\n    return (Number(bn) >= startBlkNum -  43200 * 30) && (((Number(bn)) < startBlkNum))\n  })\n\n  if (unclaimableTrades.length > 4400) {\n    // Sort unclaimableTrades by volume desc\n    unclaimableTrades.sort((a, b) => {\n      if (BigInt(a.volume) > BigInt(b.volume)) {\n        return -1 \n      } else {\n        return 1\n      }\n    })\n\n    // Use the first 4400 trade to calculate the largest volume\n    unclaimableTrades = unclaimableTrades.slice(0,4400)\n\n    // Sort unclaimableTrades by block number asc to fit circuit input\n    unclaimableTrades.sort((a,b) => {\n      if (Number(a.execution_tx_block_number) < Number(b.execution_tx_block_number)) {\n        return -1\n      } else {\n        return 1\n      }\n    })\n  }\n\n  var unclaimableTradeReceipts: Receipt[] = []\n  unclaimableTrades.forEach(trade => {\n    unclaimableTradeReceipts = unclaimableTradeReceipts.concat(validReceipts.filter(receipt => {\n      return receipt.id === trade.execution_tx_receipt_id\n    }))\n  })\n\n  if (unclaimableTradeReceipts.length > 4400) {\n    unclaimableTradeReceipts = unclaimableTradeReceipts.slice(0,4400)\n  }\n\n  const claimableTrades = validTrades.filter(trade => {\n    const bn = trade?.execution_tx_block_number ?? 0\n    return (Number(bn) >= startBlkNum) && ((Number(bn) <= endBlkNum))\n  })\n\n  var claimableTradeOrderFeeFlowReceipts: Receipt[] = []\n  claimableTrades.forEach(trade => {\n    claimableTradeOrderFeeFlowReceipts = claimableTradeOrderFeeFlowReceipts.concat(validReceipts.filter(receipt => {\n      return receipt.id === trade.order_fee_flow_tx_receipt_id\n    }))\n  })\n  claimableTradeOrderFeeFlowReceipts.sort(sortByBlk)\n\n  var claimableTradeExecutionReceipts: Receipt[] = []\n  claimableTrades.forEach(trade => {\n    claimableTradeExecutionReceipts = claimableTradeExecutionReceipts.concat(validReceipts.filter(receipt => {\n      return receipt.id === trade.execution_tx_receipt_id\n    }))\n  })\n  claimableTradeExecutionReceipts.sort(sortByBlk)\n\n  if (claimableTradeOrderFeeFlowReceipts.length !== claimableTradeExecutionReceipts.length) {\n    claimableTrades.forEach(trade => {\n      const orderFeeFlowR = validReceipts.filter(receipt => {\n        return receipt.id === trade.order_fee_flow_tx_receipt_id\n      })\n\n      const exR = validReceipts.filter(receipt => {\n        return receipt.id === trade.execution_tx_receipt_id\n      })\n\n      if (orderFeeFlowR.length > exR.length) {\n        console.debug(`Claimable trade's execution receipts are less than order fee flow receipts: ${trade.account}-${trade.execution_tx_receipt_id}`)\n      }\n    })\n  }\n\n  var proverIndex = -1\n  var offRIndex = 0 // OrderFeeFlowReceipt index\n  var exeRIndex = 0 // ExecutionReceipt index\n  if (unclaimableTradeReceipts.length <= 216 \n      && claimableTradeOrderFeeFlowReceipts.length <= 20\n      && claimableTradeExecutionReceipts.length <= 20) {\n    proverIndex = 0\n    offRIndex = 216\n    exeRIndex = 236\n  } else if (unclaimableTradeReceipts.length <= 412 \n    && claimableTradeOrderFeeFlowReceipts.length <= 50\n    && claimableTradeExecutionReceipts.length <= 50) {\n    proverIndex = 1\n    offRIndex = 412\n    exeRIndex = 462\n  } else if (unclaimableTradeReceipts.length <= 1300 \n    && claimableTradeOrderFeeFlowReceipts.length <= 100\n    && claimableTradeExecutionReceipts.length <= 100) {\n    proverIndex = 2\n    offRIndex = 1300\n    exeRIndex = 1400\n  } else if (unclaimableTradeReceipts.length <= 4400 \n    && claimableTradeOrderFeeFlowReceipts.length <=300\n    && claimableTradeExecutionReceipts.length <= 300) {\n    proverIndex = 3\n    offRIndex = 4400\n    exeRIndex = 4700\n  } else {\n    console.error(`${utvf.id}: ${utvf.account}, ${utvf.ymd}, claimable trades out of range: unclaimableTradeReceipts.length  ${unclaimableTradeReceipts.length}; claimableTradeOrderFeeFlowReceipts.length ${claimableTradeOrderFeeFlowReceipts.length}; claimableTradeExecutionReceipts.length ${claimableTradeExecutionReceipts.length}`)\n  }\n\n  const debugReceipts: DebugReceipt[] = []\n  var unClaimableReceiptIndex = 0\n  unclaimableTradeReceipts.forEach(receipt => {\n    const data = JSON.parse(receipt.data);\n    const blkNumber= Number(data.block_num)\n    if (isNaN(blkNumber)) {\n      console.error(\"invalid receipt block number\", data)\n    }\n\n    proofReq.addReceipt(\n      new ReceiptData({\n        block_num: Number(data.block_num),\n        tx_hash: receipt.tx_hash,\n        fields: [\n          new sdk.Field(data.fields[0]),\n          new sdk.Field(data.fields[1]),\n          new sdk.Field(data.fields[2]),\n          new sdk.Field(data.fields[3]), \n        ],\n      }),\n      unClaimableReceiptIndex\n    );\n\n    debugReceipts.push({\n      data: data,\n      tx_hash: receipt.tx_hash,\n      index: unClaimableReceiptIndex \n    })\n\n    unClaimableReceiptIndex++\n  })\n\n  claimableTradeOrderFeeFlowReceipts.forEach(receipt => {\n    const orderFeeFlowData = JSON.parse(receipt.data);\n    const blkNumber= Number(orderFeeFlowData.block_num)\n    if (isNaN(blkNumber)) {\n      console.error(\"invalid receipt block number\", orderFeeFlowData)\n    }\n\n    proofReq.addReceipt(\n      new ReceiptData({\n        block_num: Number(orderFeeFlowData.block_num),\n        tx_hash: receipt.tx_hash,\n        fields: [\n          new sdk.Field(orderFeeFlowData.fields[0]),\n          new sdk.Field(orderFeeFlowData.fields[1]),\n          new sdk.Field(orderFeeFlowData.fields[2]),\n          new sdk.Field(orderFeeFlowData.fields[3]), \n        ],\n      }),\n      offRIndex\n    );\n    debugReceipts.push({\n      data: orderFeeFlowData,\n      tx_hash: receipt.tx_hash,\n      index: offRIndex\n    })\n    offRIndex++\n  })\n\n  claimableTradeExecutionReceipts.forEach(receipt => {\n    const data = JSON.parse(receipt.data);\n    const blkNumber= Number(data.block_num)\n    if (isNaN(blkNumber)) {\n      console.error(\"invalid receipt block number\", data)\n    }\n\n    proofReq.addReceipt(\n      new ReceiptData({\n        block_num: Number(data.block_num),\n        tx_hash: receipt.tx_hash,\n        fields: [\n          new sdk.Field(data.fields[0]),\n          new sdk.Field(data.fields[1]),\n          new sdk.Field(data.fields[2]),\n          new sdk.Field(data.fields[3]), \n        ],\n      }),\n      exeRIndex\n    );\n    debugReceipts.push({\n      data: data,\n      tx_hash: receipt.tx_hash,\n      index: exeRIndex\n    })\n    exeRIndex++\n  })\n  const account = \"0x\" + BigInt(utvf.account).toString(16)\n  \n  const contracts = PositionModifiedContracts.map(value => {\n    return asUint248(value)\n  })\n\n  const paddingIndex = 512 - contracts.length\n  for (let i = 0; i <paddingIndex; i++) {\n    contracts.push(asUint248(\"0x0\"))\n  }\n\n  proofReq.setCustomInput({\n    Account: asUint248(account),\n    StartBlkNum: asUint248(utvf.start_blk_num.toString()),\n    EndBlkNum: asUint248(utvf.end_blk_num.toString()),\n    Contracts: contracts,\n    ContractsHash: sdk.asBytes32(\"0x0f4609cd4bed42d65042468a77bd40822cec9a83414e4406c16135b9406ecc46\")\n  });\n\n  const debugRequest = JSON.stringify({\n    receipts: debugReceipts,\n    contracts: PositionModifiedContracts,\n    start: utvf.start_blk_num.toString(),\n    account: account,\n    end: utvf.end_blk_num.toString()\n  })\n\n  if (debugReceipts.length === 0) {\n    throw new Error(\"empty receipts\"); \n  }\n\n  // console.debug(`${debugRequest}`)\n  if (debugReceipts.length === 0) {\n    return {proofReq: proofReq, proverIndex: -1}\n  }\n  const lastReceiptIndex = debugReceipts[debugReceipts.length-1].index\n  if (\n    (lastReceiptIndex > 256 && proverIndex == 0) || (lastReceiptIndex > 512 && proverIndex == 1)\n  )  {\n    console.debug(`Invalid debug request ${utvf.id}, provdeIndex: ${proverIndex}, debugReceipts.length: ${debugReceipts.length}, ${debugRequest}`)\n    return {proofReq: proofReq, proverIndex: -1}\n  }\n\n  return {proofReq: proofReq, proverIndex: proverIndex};\n};\n\nasync function sendUserTradeVolumeFeeProvingRequest(utvfOld: UserTradeVolumeFee) {\n  const utvf = await getUserTradeVolumeFee(utvfOld.account, utvfOld.ymd)\n  if (utvf.status != PROOF_STATUS_INPUT_READY) {\n    return \n  }\n\n  utvf.status = PROOF_STATUS_PROVING_SENT\n  await updateUserTradeVolumeFee(utvf)\n  try {\n    const r = await buildUserTradeVolumeFeeProofReq(utvf);\n    console.log(\"User Circuit Proof Request Sent: \", r.proverIndex, utvf.id, (new Date()).toLocaleString())\n    if (r.proverIndex < 0) {\n      console.log(\"Cannot proceed cause prover index is invalid\", utvf.id, (new Date()).toLocaleString())\n      return \n    }\n    const proofRes = await provers[r.proverIndex].proveAsync(r.proofReq);\n    console.log(\"proofRes proof_id ready\",proofRes.proof_id, (new Date()).toLocaleString())\n    // error handling\n    if (proofRes.has_err) {\n      const err = proofRes.err;\n      switch (err.code) {\n        case ErrCode.ERROR_INVALID_INPUT:\n          console.error(\"invalid receipt/storage/transaction input:\", err.msg);\n          // handle invalid data input...\n          break;\n        case ErrCode.ERROR_INVALID_CUSTOM_INPUT:\n          console.error(\"invalid custom input:\", err.msg);\n          // handle invalid custom input assignment...\n          break;\n        case ErrCode.ERROR_FAILED_TO_PROVE:\n          console.error(\"failed to prove:\", err.msg);\n          // handle failed to prove case...\n          break;\n        default:\n          break;\n      }\n      return;\n    }\n\n    // Save prover id in case prepare query failed\n    utvf.prover_id = proofRes.proof_id\n    await updateUserTradeVolumeFee(utvf)\n\n    try {\n      console.log(\"send prepare query request\", (new Date()).toLocaleString())\n      console.log(\"proofRes.circuit_info\", r.proverIndex, utvf.id, proofRes.circuit_info.output, proofRes.circuit_info.output_commitment)\n\n      const prepareQueryResponse = await brevis.prepareQuery(\n        r.proofReq, \n        proofRes.circuit_info, \n        Number(utvf.src_chain_id),\n        Number(utvf.dst_chain_id)\n      )\n\n      if (prepareQueryResponse.has_err) {\n        const err = prepareQueryResponse.err;\n        console.error(\"Failed to prepare query\", err, utvf.id)\n        utvf.status = PROOF_STATUS_BREVIS_QUERY_ERROR\n        updateUserTradeVolumeFee(utvf)\n        return \n      }\n      console.log('Ready to submit brevis query hash', prepareQueryResponse.query_hash, (new Date()).toLocaleString());\n      utvf.status = PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED\n      utvf.brevis_query_fee = prepareQueryResponse.fee\n      utvf.brevis_query_hash = prepareQueryResponse.query_hash\n\n      updateUserTradeVolumeFee(utvf).then(value => {\n        uploadUserTradeVolumeFeeProof(value)\n      }).then();\n    } catch (error) {\n      console.error(\"Failed to prepare query\", error, utvf.id)\n      utvf.status = PROOF_STATUS_BREVIS_QUERY_ERROR\n      updateUserTradeVolumeFee(utvf)\n    }\n  } catch (error) {\n    console.log(\"error \", error)\n    utvf.status = PROOF_STATUS_INPUT_READY\n    await updateUserTradeVolumeFee(utvf)\n  }\n}\n\nasync function uploadUserTradeVolumeFeeProof(utvfOld: UserTradeVolumeFee) {\n  const utvf = await getUserTradeVolumeFee(utvfOld.account, utvfOld.ymd)\n  if (utvf.status != PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED\n    && moment.utc(utvf.update_time).unix() > moment.utc(new Date()).unix() - 1200\n  ) {\n    return \n  }\n\n  utvf.status = PROOF_STATUS_PROOF_UPLOAD_SENT\n  await updateUserTradeVolumeFee(utvf)\n\n  try {\n    console.log(\"Proof upload sent: \", utvf.id, utvf.prover_id, (new Date()).toLocaleString())  \n    const r = await buildUserTradeVolumeFeeProofReq(utvf);\n    if (r.proverIndex < 0) {\n      console.log(\"Cannot proceed upload proof cause prover index is invalid\", utvf.id, (new Date()).toLocaleString())\n      return \n    }\n    const getProofRes = await provers[r.proverIndex].getProof(utvf.prover_id)\n\n    if (getProofRes.has_err) {\n      console.error(getProofRes.err.msg);\n      utvf.status = PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED\n      await updateUserTradeVolumeFee(utvf)\n      return;\n    } else if (getProofRes.proof.length === 0) {\n      const utvfObject = utvf as UserTradeVolumeFee\n      if (utvfObject === undefined || utvfObject === null) {\n        utvf.status = PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED\n        await updateUserTradeVolumeFee(utvf)\n        return;\n      }\n\n      const now = new Date()\n      const timeDiff = now.getTime() - utvfObject.create_time.getTime()\n      // If there is no proof found in 2 hours. Retry proving \n      if (timeDiff >= 7200 * 1000) {\n        console.log(`Proof not found for long time from ${utvfObject.create_time} to ${now}: retry proving for  ${utvf.id}`)\n        utvf.status = PROOF_STATUS_INPUT_READY\n        utvf.create_time = now\n        await updateUserTradeVolumeFeeWithCreateTime(utvf)\n      } else {\n        utvf.status = PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED\n        await updateUserTradeVolumeFee(utvf)\n      }\n      return;\n    }\n\n    await brevis.submitProof(\n      utvf.brevis_query_hash,\n      Number(utvf.dst_chain_id),\n      getProofRes.proof\n    );\n\n    utvf.status = PROOF_STATUS_PROOF_UPLOADED;\n    utvf.proof = getProofRes.proof\n\n    console.log(\"Proof uploaded: \", utvf.id, (new Date()).toLocaleString())\n\n    updateUserTradeVolumeFee(utvf);\n  } catch (err) {\n    utvf.status = PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED;\n    updateUserTradeVolumeFee(utvf);\n    console.error(err);\n  }\n}\n\nasync function submitProofForBrevis(utvf: UserTradeVolumeFee) {\n  try {\n    console.log(\"Submit ProofForBrevis: \", utvf.id, utvf.prover_id, (new Date()).toLocaleString())  \n\n    await brevis.submitProof(\n      utvf.brevis_query_hash,\n      Number(utvf.dst_chain_id),\n      utvf.proof\n    );\n    utvf.status = PROOF_STATUS_PROOF_UPLOADED;\n    updateUserTradeVolumeFee(utvf);\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nfunction devideReceiptIntoCircuitInputReceipts(receipt: Receipt) {\n  const result: Receipt[] = []\n  const data = JSON.parse(receipt.data);\n  // JSON.stringify(original)\n  for (var i = 0; i < data.fields.length / 4; i++) {\n    let original: ReceiptInfo = {\n      block_num: data.block_num,\n      tx_hash: data.tx_hash,\n      fields: [],\n    };\n    original.fields.push(data.fields[i * 4])\n    original.fields.push(data.fields[i * 4 + 1])\n    original.fields.push(data.fields[i * 4 + 2])\n    original.fields.push(data.fields[i * 4 + 3])\n\n    result.push({\n      id: receipt.id,\n      tx_hash: receipt.tx_hash,\n      transaction_type: receipt.transaction_type,\n      status: receipt.status,\n      data: JSON.stringify(original),\n      create_time: receipt.create_time,\n      update_time: receipt.update_time,\n      should_be_filtered_out: receipt.should_be_filtered_out,\n      account: receipt.account,\n    })\n  }\n  return result\n}\n\nfunction sortByBlk(a: Receipt, b: Receipt) {\n    const dataA = JSON.parse(a.data);\n    const blkNumberA= Number(dataA.block_num)\n\n    const dataB = JSON.parse(b.data);\n    const blkNumberB= Number(dataB.block_num)\n    \n    if (blkNumberA < blkNumberB) {\n      return -1\n    } else if (blkNumberA == blkNumberB && Number(dataA.transaction_type) < Number(dataB.transaction_type)) {\n      return -1\n    } else {\n      return 1\n    } \n}\n\nexport {\n  sendUserTradeVolumeFeeProvingRequest,\n  uploadUserTradeVolumeFeeProof,\n  submitProofForBrevis,\n};\n","import { ethers } from \"ethers\";\nimport * as typeChain from \"../../../contract/typechain/index.ts\";\n\nimport { BrevisRequest__factory } from \"../brevis_request/BrevisRequest__factory.ts\";\nimport {\n  updateUserTradeVolumeFeeRequestSent,\n} from \"../db/index.ts\";\n\nimport * as dotenv from \"dotenv\";\nimport { UserTradeVolumeFee } from \"../server/type.ts\";\nimport { error } from \"console\";\ndotenv.config();\n\nconst { FeeReimbursementApp__factory } = typeChain;\n// DstChain Provider uses Arbitrum Sepolia RPC to submit transaction on AS\nconst dstChainProvider = new ethers.JsonRpcProvider(\n  process.env.DEST_RPC ?? \"\"\n);\n// Source Provider uses Arbirtrum RPC to retrieve Aribitrum data\nconst sourceChainProvider = new ethers.JsonRpcProvider(\n  process.env.SOURCE_RPC ?? \"\"\n);\nconst wallet = new ethers.Wallet(\n  process.env.PRIVATE_KEY ?? \"\",\n  dstChainProvider\n);\n\nconst brevisRequest = BrevisRequest__factory.connect(\n  process.env.BREVIS_REQUEST ?? \"\",\n  wallet\n);\nconst userSwapAmountApp = FeeReimbursementApp__factory.connect(\n  process.env.FEE_REIMBURSEMENT ?? \"\",\n  wallet\n);\n\nasync function monitorFeeAccumulated() { \n  // userSwapAmountApp.on(FeeRebateAccumulatedEvent.Event, (account, feeRebate, volume30D, feeRebateWithRate, startBlockNumber, endBlockNumber) => {\n  //   const feeRebateBN = feeRebate as BigInt;\n  //   const volume30DBN = volume30D as BigInt;\n  //   const feeRebateWithRateBN = feeRebateWithRate as BigInt;\n  //   const startBlockNumberBN = startBlockNumber as BigInt;\n  //   const endBlockNumberBN = endBlockNumber as BigInt;\n\n  //   console.log(\"Fee Accumulated Event\", account, feeRebate, volume30D, feeRebateWithRate, startBlockNumber, endBlockNumber)\n  //   if (\n  //     account === undefined || account === null ||\n  //     feeRebateBN === undefined || feeRebateBN === null ||\n  //     volume30DBN === undefined || volume30DBN === null ||\n  //     feeRebateWithRateBN === undefined || feeRebateWithRateBN === null ||\n  //     startBlockNumberBN === undefined || startBlockNumberBN === null ||\n  //     endBlockNumberBN === undefined || endBlockNumberBN === null\n  //   ) {\n  //     return;\n  //   }\n    \n  //   findUserExistingUTVF(account, BigInt(startBlockNumberBN.toString()), BigInt(endBlockNumberBN.toString()))\n  //     .then(utvf => {\n  //       if (utvf) {\n  //         utvf.status = PROOF_STATUS_ONCHAIN_VERIFIED\n  //         utvf.fee_rebate = feeRebateWithRateBN\n  //         return updateUserTradeVolumeFee(utvf)\n  //       }\n  //     }).catch(error => {\n  //       console.error(\n  //         \"failed to update user swap amount\",\n  //         account,\n  //         startBlockNumber,\n  //         endBlockNumber, \n  //         error\n  //       );\n  //     })\n  // });\n}\n\nasync function submitBrevisRequestTx(utvf: UserTradeVolumeFee) {\n  console.log(`submit tx for ${utvf.account}-${utvf.ymd}`)\n  updateUserTradeVolumeFeeRequestSent(utvf.account, utvf.ymd, true)\n  brevisRequest.sendRequest(\n      utvf.brevis_query_hash,\n      wallet.address ?? \"\",\n      process.env.FEE_REIMBURSEMENT ?? \"\",\n      {\n        value: 0,\n      }\n  ).then(tx => {\n     updateUserTradeVolumeFeeRequestSent(utvf.account, utvf.ymd, true)\n     console.log(`tx: ${tx.hash} sent for ${utvf.account}, ${utvf.ymd}`)\n  }).catch(error => {\n    const msg = `${error}`\n    if (msg.includes(\"execution reverted: request already in queue\")) {\n      updateUserTradeVolumeFeeRequestSent(utvf.account, utvf.ymd, true)\n      console.log(`tx has been sent for ${utvf.account}, ${utvf.ymd}`)\n    } else {\n      console.error(`failed to submit tx: ${msg}`);\n    }\n  })\n}\n\n\nexport {\n  dstChainProvider,\n  sourceChainProvider,\n  wallet,\n  brevisRequest,\n  userSwapAmountApp,\n  monitorFeeAccumulated,\n  submitBrevisRequestTx,\n};\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport type * as openzeppelin from \"./@openzeppelin\";\nexport type { openzeppelin };\nimport type * as brevisContracts from \"./brevis-contracts\";\nexport type { brevisContracts };\nimport type * as contracts from \"./contracts\";\nexport type { contracts };\nexport * as factories from \"./factories\";\nexport type { Ownable } from \"./@openzeppelin/contracts/access/Ownable\";\nexport { Ownable__factory } from \"./factories/@openzeppelin/contracts/access/Ownable__factory\";\nexport type { IERC20 } from \"./@openzeppelin/contracts/token/ERC20/IERC20\";\nexport { IERC20__factory } from \"./factories/@openzeppelin/contracts/token/ERC20/IERC20__factory\";\nexport type { BrevisApp } from \"./brevis-contracts/contracts/sdk/apps/framework/BrevisApp\";\nexport { BrevisApp__factory } from \"./factories/brevis-contracts/contracts/sdk/apps/framework/BrevisApp__factory\";\nexport type { IBrevisProof } from \"./brevis-contracts/contracts/sdk/interface/IBrevisProof\";\nexport { IBrevisProof__factory } from \"./factories/brevis-contracts/contracts/sdk/interface/IBrevisProof__factory\";\nexport type { Tx } from \"./brevis-contracts/contracts/sdk/lib/Lib.sol/Tx\";\nexport { Tx__factory } from \"./factories/brevis-contracts/contracts/sdk/lib/Lib.sol/Tx__factory\";\nexport type { FeeReimbursementApp } from \"./contracts/FeeReimbursementApp.sol/FeeReimbursementApp\";\nexport { FeeReimbursementApp__factory } from \"./factories/contracts/FeeReimbursementApp.sol/FeeReimbursementApp__factory\";\nexport type { IFeeRebateTierModule } from \"./contracts/FeeReimbursementApp.sol/IFeeRebateTierModule\";\nexport { IFeeRebateTierModule__factory } from \"./factories/contracts/FeeReimbursementApp.sol/IFeeRebateTierModule__factory\";\nexport type { IMigration } from \"./contracts/FeeReimbursementApp.sol/IMigration\";\nexport { IMigration__factory } from \"./factories/contracts/FeeReimbursementApp.sol/IMigration__factory\";\nexport type { MockFeeModule } from \"./contracts/MockFeeModule\";\nexport { MockFeeModule__factory } from \"./factories/contracts/MockFeeModule__factory\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexport * as openzeppelin from \"./@openzeppelin\";\nexport * as brevisContracts from \"./brevis-contracts\";\nexport * as contracts from \"./contracts\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexport * as contracts from \"./contracts\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexport * as access from \"./access\";\nexport * as token from \"./token\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexport { Ownable__factory } from \"./Ownable__factory\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Interface, type ContractRunner } from \"ethers\";\nimport type {\n  Ownable,\n  OwnableInterface,\n} from \"../../../../@openzeppelin/contracts/access/Ownable\";\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n] as const;\n\nexport class Ownable__factory {\n  static readonly abi = _abi;\n  static createInterface(): OwnableInterface {\n    return new Interface(_abi) as OwnableInterface;\n  }\n  static connect(address: string, runner?: ContractRunner | null): Ownable {\n    return new Contract(address, _abi, runner) as unknown as Ownable;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexport * as erc20 from \"./ERC20\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexport { IERC20__factory } from \"./IERC20__factory\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Interface, type ContractRunner } from \"ethers\";\nimport type {\n  IERC20,\n  IERC20Interface,\n} from \"../../../../../@openzeppelin/contracts/token/ERC20/IERC20\";\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n] as const;\n\nexport class IERC20__factory {\n  static readonly abi = _abi;\n  static createInterface(): IERC20Interface {\n    return new Interface(_abi) as IERC20Interface;\n  }\n  static connect(address: string, runner?: ContractRunner | null): IERC20 {\n    return new Contract(address, _abi, runner) as unknown as IERC20;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexport * as contracts from \"./contracts\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexport * as sdk from \"./sdk\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexport * as apps from \"./apps\";\nexport * as interface from \"./interface\";\nexport * as lib from \"./lib\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexport * as framework from \"./framework\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexport { BrevisApp__factory } from \"./BrevisApp__factory\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Interface, type ContractRunner } from \"ethers\";\nimport type {\n  BrevisApp,\n  BrevisAppInterface,\n} from \"../../../../../../brevis-contracts/contracts/sdk/apps/framework/BrevisApp\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"commitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"vkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appCommitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appVkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"smtRoot\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Brevis.ProofData[]\",\n        name: \"_proofDataArray\",\n        type: \"tuple[]\",\n      },\n      {\n        internalType: \"bytes[]\",\n        name: \"_appCircuitOutputs\",\n        type: \"bytes[]\",\n      },\n    ],\n    name: \"brevisBatchCallback\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_appCircuitOutput\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"brevisCallback\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"brevisProof\",\n    outputs: [\n      {\n        internalType: \"contract IBrevisProof\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"commitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"vkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appCommitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appVkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"smtRoot\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Brevis.ProofData\",\n        name: \"_proofData\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_merkleRoot\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32[]\",\n        name: \"_merkleProof\",\n        type: \"bytes32[]\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"_nodeIndex\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_appCircuitOutput\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"singleRun\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"smtRoot\",\n            type: \"bytes32\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint64\",\n                name: \"blkNum\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"receiptIndex\",\n                type: \"uint64\",\n              },\n              {\n                components: [\n                  {\n                    components: [\n                      {\n                        internalType: \"uint8\",\n                        name: \"valueFromTopic\",\n                        type: \"uint8\",\n                      },\n                      {\n                        internalType: \"uint64\",\n                        name: \"valueIndex\",\n                        type: \"uint64\",\n                      },\n                      {\n                        internalType: \"address\",\n                        name: \"contractAddress\",\n                        type: \"address\",\n                      },\n                      {\n                        internalType: \"bytes32\",\n                        name: \"logTopic0\",\n                        type: \"bytes32\",\n                      },\n                    ],\n                    internalType: \"struct Brevis.LogExtraInfo\",\n                    name: \"logExtraInfo\",\n                    type: \"tuple\",\n                  },\n                  {\n                    internalType: \"uint64\",\n                    name: \"logIndex\",\n                    type: \"uint64\",\n                  },\n                  {\n                    internalType: \"bytes32\",\n                    name: \"value\",\n                    type: \"bytes32\",\n                  },\n                ],\n                internalType: \"struct Brevis.LogInfo[5]\",\n                name: \"logs\",\n                type: \"tuple[5]\",\n              },\n            ],\n            internalType: \"struct Brevis.ReceiptInfo[]\",\n            name: \"receipts\",\n            type: \"tuple[]\",\n          },\n          {\n            components: [\n              {\n                internalType: \"bytes32\",\n                name: \"blockHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"slot\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"slotValue\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockNumber\",\n                type: \"uint64\",\n              },\n            ],\n            internalType: \"struct Brevis.StorageInfo[]\",\n            name: \"stores\",\n            type: \"tuple[]\",\n          },\n          {\n            components: [\n              {\n                internalType: \"bytes32\",\n                name: \"leafHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"blockHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockNumber\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockTime\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"bytes\",\n                name: \"leafRlpPrefix\",\n                type: \"bytes\",\n              },\n            ],\n            internalType: \"struct Brevis.TransactionInfo[]\",\n            name: \"txs\",\n            type: \"tuple[]\",\n          },\n        ],\n        internalType: \"struct Brevis.ExtractInfos\",\n        name: \"_extractInfos\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"validateRequest\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nexport class BrevisApp__factory {\n  static readonly abi = _abi;\n  static createInterface(): BrevisAppInterface {\n    return new Interface(_abi) as BrevisAppInterface;\n  }\n  static connect(address: string, runner?: ContractRunner | null): BrevisApp {\n    return new Contract(address, _abi, runner) as unknown as BrevisApp;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexport { IBrevisProof__factory } from \"./IBrevisProof__factory\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Interface, type ContractRunner } from \"ethers\";\nimport type {\n  IBrevisProof,\n  IBrevisProofInterface,\n} from \"../../../../../brevis-contracts/contracts/sdk/interface/IBrevisProof\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getProofAppData\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getProofData\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"commitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"vkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appCommitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appVkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"smtRoot\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Brevis.ProofData\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"hasProof\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        internalType: \"bytes32[]\",\n        name: \"_requestIds\",\n        type: \"bytes32[]\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_proofWithPubInputs\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"mustSubmitAggProof\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"commitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"vkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appCommitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appVkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"smtRoot\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Brevis.ProofData\",\n        name: \"_proofData\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_merkleRoot\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32[]\",\n        name: \"_merkleProof\",\n        type: \"bytes32[]\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"_nodeIndex\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"mustValidateRequest\",\n    outputs: [],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"commitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"vkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appCommitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appVkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"smtRoot\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Brevis.ProofData[]\",\n        name: \"_proofDataArray\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"mustValidateRequests\",\n    outputs: [],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_proofWithPubInputs\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"_withAppProof\",\n        type: \"bool\",\n      },\n    ],\n    name: \"submitProof\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"smtRoot\",\n            type: \"bytes32\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint64\",\n                name: \"blkNum\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"receiptIndex\",\n                type: \"uint64\",\n              },\n              {\n                components: [\n                  {\n                    components: [\n                      {\n                        internalType: \"uint8\",\n                        name: \"valueFromTopic\",\n                        type: \"uint8\",\n                      },\n                      {\n                        internalType: \"uint64\",\n                        name: \"valueIndex\",\n                        type: \"uint64\",\n                      },\n                      {\n                        internalType: \"address\",\n                        name: \"contractAddress\",\n                        type: \"address\",\n                      },\n                      {\n                        internalType: \"bytes32\",\n                        name: \"logTopic0\",\n                        type: \"bytes32\",\n                      },\n                    ],\n                    internalType: \"struct Brevis.LogExtraInfo\",\n                    name: \"logExtraInfo\",\n                    type: \"tuple\",\n                  },\n                  {\n                    internalType: \"uint64\",\n                    name: \"logIndex\",\n                    type: \"uint64\",\n                  },\n                  {\n                    internalType: \"bytes32\",\n                    name: \"value\",\n                    type: \"bytes32\",\n                  },\n                ],\n                internalType: \"struct Brevis.LogInfo[5]\",\n                name: \"logs\",\n                type: \"tuple[5]\",\n              },\n            ],\n            internalType: \"struct Brevis.ReceiptInfo[]\",\n            name: \"receipts\",\n            type: \"tuple[]\",\n          },\n          {\n            components: [\n              {\n                internalType: \"bytes32\",\n                name: \"blockHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"slot\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"slotValue\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockNumber\",\n                type: \"uint64\",\n              },\n            ],\n            internalType: \"struct Brevis.StorageInfo[]\",\n            name: \"stores\",\n            type: \"tuple[]\",\n          },\n          {\n            components: [\n              {\n                internalType: \"bytes32\",\n                name: \"leafHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"blockHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockNumber\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockTime\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"bytes\",\n                name: \"leafRlpPrefix\",\n                type: \"bytes\",\n              },\n            ],\n            internalType: \"struct Brevis.TransactionInfo[]\",\n            name: \"txs\",\n            type: \"tuple[]\",\n          },\n        ],\n        internalType: \"struct Brevis.ExtractInfos\",\n        name: \"_info\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"validateRequest\",\n    outputs: [],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nexport class IBrevisProof__factory {\n  static readonly abi = _abi;\n  static createInterface(): IBrevisProofInterface {\n    return new Interface(_abi) as IBrevisProofInterface;\n  }\n  static connect(\n    address: string,\n    runner?: ContractRunner | null\n  ): IBrevisProof {\n    return new Contract(address, _abi, runner) as unknown as IBrevisProof;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexport * as libSol from \"./Lib.sol\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexport { Tx__factory } from \"./Tx__factory\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport {\n  Contract,\n  ContractFactory,\n  ContractTransactionResponse,\n  Interface,\n} from \"ethers\";\nimport type { Signer, ContractDeployTransaction, ContractRunner } from \"ethers\";\nimport type { NonPayableOverrides } from \"../../../../../../common\";\nimport type {\n  Tx,\n  TxInterface,\n} from \"../../../../../../brevis-contracts/contracts/sdk/lib/Lib.sol/Tx\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"bytes\",\n        name: \"txRaw\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"decodeTx\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint64\",\n            name: \"chainId\",\n            type: \"uint64\",\n          },\n          {\n            internalType: \"uint64\",\n            name: \"nonce\",\n            type: \"uint64\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"gasTipCap\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"gasFeeCap\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"gas\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"value\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"data\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct Tx.TxInfo\",\n        name: \"info\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n] as const;\n\nconst _bytecode =\n  \"0x6080806040523461001a57610e5d9081610020823930815050f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c63dae029d31461002a57600080fd5b602090816003193601126103d95767ffffffffffffffff916004358381116103d557366023820112156103d55780600401359384116103d557602481019060248536920101116103d5576102e7946102dd926102cc9261008861052e565b9660ff926100bd6002856100b66100b06100a2878961059c565b356001600160f81b03191690565b60f81c90565b16146105b9565b6100e26100dd6100d86100d1858088610605565b36916106b4565b610a18565b610a80565b926101166101086100fb6100f5876106eb565b51610b98565b67ffffffffffffffff1690565b67ffffffffffffffff168b52565b6101386101286100fb6100f5876106f8565b67ffffffffffffffff168b840152565b6101446100f585610708565b898b01526101546100f585610718565b60608b01526101656100f585610728565b60808b015261018f61017f61017986610738565b51610b7a565b6001600160a01b031660a08c0152565b61019b6100f585610748565b60c08b01526101b26101ac85610758565b51610c06565b60e08b01526101cc6101c66100f586610769565b60ff1690565b956101f06101e56101ac6101ea6101e56101ac8a61077a565b6107b0565b9761078b565b958a61020a6102056100b06100a289886105aa565b6107e9565b9582871660010361039f576102366101c66102316100b061022b858a610644565b90610876565b610801565b965b61ffff8816603781116102eb5750506102c093926102a0876102926102b8958561028c61027d61026b6102a8998e610655565b9d9093610277816108a2565b91610663565b929093519c8d9687019161090a565b9161090a565b03601f1981018852876104fd565b859716610825565b60f81b6001600160f81b03191690565b901a91610986565b535b8151910120610996565b6001600160a01b0316610100840152565b519182918261041d565b0390f35b909697945083959391925011156000146103655761035f93828261032161031b6100a2610333966103519861059c565b98610814565b9261032b826108a2565b931691610680565b8c5195869491929160f81b6001600160f81b03191690888601610954565b03601f1981018352826104fd565b906102c2565b61035f93828261032161031b6100a2610381966103519861059c565b8c5195869491929160f01b6001600160f01b03191690888601610918565b6103cf6103ca6103c46103be6103b76101c68c610814565b858a610627565b90610836565b60f01c90565b610862565b96610238565b8480fd5b8280fd5b919082519283825260005b848110610409575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016103e8565b6104c3906020815261043c60208201845167ffffffffffffffff169052565b602083015167ffffffffffffffff1660408201526040830151606082015260608301516080820152608083015160a082015261048860a084015160c08301906001600160a01b03169052565b60c083015160e082015260e0830151610120906104b26101009183838601526101408501906103dd565b9401516001600160a01b0316910152565b90565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176104f857604052565b6104c6565b90601f8019910116810190811067ffffffffffffffff8211176104f857604052565b6040519061052c826104dc565b565b60405190610120820182811067ffffffffffffffff8211176104f857604052816101006000918281528260208201528260408201528260608201528260808201528260a08201528260c0820152606060e08201520152565b634e487b7160e01b600052603260045260246000fd5b90156105a55790565b610586565b90600110156105a55760010190565b156105c057565b60405162461bcd60e51b815260206004820152601660248201527f6e6f7420612044796e616d6963466565547854797065000000000000000000006044820152606490fd5b909291928360011161062257831161062257600101916000190190565b600080fd5b909291928360021161062257831161062257600201916001190190565b906003116106225760020190600190565b906002116106225790600290565b909291928360031161062257831161062257600301916002190190565b90939293848311610622578411610622578101920390565b67ffffffffffffffff81116104f857601f01601f191660200190565b9291926106c082610698565b916106ce60405193846104fd565b829481845281830111610622578281602093846000960137010152565b8051156105a55760200190565b8051600110156105a55760400190565b8051600210156105a55760600190565b8051600310156105a55760800190565b8051600410156105a55760a00190565b8051600510156105a55760c00190565b8051600610156105a55760e00190565b8051600710156105a5576101000190565b8051600910156105a5576101400190565b8051600a10156105a5576101600190565b8051600b10156105a5576101800190565b80518210156105a55760209160051b010190565b6020815191015190602081106107c4575090565b6000199060200360031b1b1690565b634e487b7160e01b600052601160045260246000fd5b60ff60f6199116019060ff82116107fc57565b6107d3565b60ff6042199116019060ff82116107fc57565b60ff166002019060ff82116107fc57565b60ff1660c0019060ff82116107fc57565b6001600160f01b0319903581811693926002811061085357505050565b60020360031b82901b16169150565b61ffff90811660421901919082116107fc57565b6001600160f81b0319903581811693926001811061089357505050565b60010360031b82901b16169150565b6042198101919082116107fc57565b60bf198101919082116107fc57565b607f198101919082116107fc57565b60200390602082116107fc57565b6000198101919082116107fc57565b60f6198101919082116107fc57565b60b6198101919082116107fc57565b908092918237016000815290565b6001600160f81b0319909116815260f960f81b60018201526001600160f01b031990911660028201526004929182908483013701016000815290565b6001600160f81b03199182168152601f60fb1b6001820152911660028201526003929182908483013701016000815290565b8051600110156105a55760210190565b919260ff8116601b81106109e5575b509160209360809260ff60009560405194855216868401526040830152606082015282805260015afa156109d95760005190565b6040513d6000823e3d90fd5b601b9150929192019060ff82116107fc57919060206109a5565b60405190610a0c826104dc565b60006020838281520152565b610a206109ff565b50602081519160405192610a33846104dc565b835201602082015290565b67ffffffffffffffff81116104f85760051b60200190565b90600182018092116107fc57565b919082018092116107fc57565b60001981146107fc5760010190565b610a8981610b53565b1561062257610a9781610c53565b610aa081610a3e565b91610aae60405193846104fd565b818352601f19610abd83610a3e565b0160005b818110610b3c575050610ae2602080920151610adc81610d3b565b90610a64565b6000905b838210610af4575050505090565b610b3081610b04610b3693610cb5565b90610b0d61051f565b8281528187820152610b1f868a61079c565b52610b2a858961079c565b50610a64565b91610a71565b90610ae6565b602090610b476109ff565b82828801015201610ac1565b805115610b7457602060c09101515160001a10610b6f57600190565b600090565b50600090565b601581510361062257610b946001600160a01b0391610b98565b1690565b80518015159081610bce575b501561062257610bb390610bda565b90519060208110610bc2575090565b6020036101000a900490565b60219150111538610ba4565b906020820191610bea8351610d3b565b9251908382018092116107fc57519283039283116107fc579190565b80511561062257610c196104c391610bda565b610c2581939293610698565b92610c3360405194856104fd565b818452601f19610c4283610698565b013660208601378360200190610daa565b805115610b745760009060208101908151610c6d81610d3b565b81018091116107fc579151905181018091116107fc5791905b828110610c935750905090565b610c9c81610cb5565b81018091116107fc57610caf9091610a71565b90610c86565b805160001a906080821015610ccb575050600190565b60b8821015610ce65750610ce16104c3916108c0565b610a56565b9060c0811015610d0a5760b51991600160b783602003016101000a91015104010190565b9060f8821015610d215750610ce16104c3916108b1565b60010151602082900360f7016101000a90040160f5190190565b5160001a6080811015610d4e5750600090565b60b881108015610d85575b15610d645750600190565b60c0811015610d7957610ce16104c3916108fb565b610ce16104c3916108ec565b5060c08110158015610d59575060f88110610d59565b601f81116107fc576101000a90565b929091928315610e215792915b602093848410610dec57805182528481018091116107fc579381018091116107fc5791601f1981019081116107fc5791610db7565b9193509180610dfa57505050565b610e0e610e09610e13926108cf565b610d9b565b6108dd565b905182518216911916179052565b5091505056fea26469706673582212209f248e3623c0552a588c9ed1a405b35a0ff8efaec2e217249cf2a7102e52077164736f6c63430008140033\";\n\ntype TxConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: TxConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class Tx__factory extends ContractFactory {\n  constructor(...args: TxConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override getDeployTransaction(\n    overrides?: NonPayableOverrides & { from?: string }\n  ): Promise<ContractDeployTransaction> {\n    return super.getDeployTransaction(overrides || {});\n  }\n  override deploy(overrides?: NonPayableOverrides & { from?: string }) {\n    return super.deploy(overrides || {}) as Promise<\n      Tx & {\n        deploymentTransaction(): ContractTransactionResponse;\n      }\n    >;\n  }\n  override connect(runner: ContractRunner | null): Tx__factory {\n    return super.connect(runner) as Tx__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): TxInterface {\n    return new Interface(_abi) as TxInterface;\n  }\n  static connect(address: string, runner?: ContractRunner | null): Tx {\n    return new Contract(address, _abi, runner) as unknown as Tx;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexport * as feeReimbursementAppSol from \"./FeeReimbursementApp.sol\";\nexport { MockFeeModule__factory } from \"./MockFeeModule__factory\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexport { FeeReimbursementApp__factory } from \"./FeeReimbursementApp__factory\";\nexport { IFeeRebateTierModule__factory } from \"./IFeeRebateTierModule__factory\";\nexport { IMigration__factory } from \"./IMigration__factory\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport {\n  Contract,\n  ContractFactory,\n  ContractTransactionResponse,\n  Interface,\n} from \"ethers\";\nimport type {\n  Signer,\n  AddressLike,\n  ContractDeployTransaction,\n  ContractRunner,\n} from \"ethers\";\nimport type { NonPayableOverrides } from \"../../../common\";\nimport type {\n  FeeReimbursementApp,\n  FeeReimbursementAppInterface,\n} from \"../../../contracts/FeeReimbursementApp.sol/FeeReimbursementApp\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_brevisProof\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"InvalidNewClaimPeriod\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"ZeroAddress\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"onlyClaimContractCanAccess\",\n    type: \"error\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"BrevisProofUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"ClaimerUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ContractsHashUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint248\",\n        name: \"feeRebate\",\n        type: \"uint248\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint248\",\n        name: \"volume30D\",\n        type: \"uint248\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint248\",\n        name: \"feeRebateWithRate\",\n        type: \"uint248\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint64\",\n        name: \"startBlockNumber\",\n        type: \"uint64\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint64\",\n        name: \"endBlockNumber\",\n        type: \"uint64\",\n      },\n    ],\n    name: \"FeeRebateAccumulated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"FeeRebateTireModuleUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint248\",\n        name: \"feeRebate\",\n        type: \"uint248\",\n      },\n    ],\n    name: \"FeeReimbursed\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [],\n    name: \"MigrationDone\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint248\",\n        name: \"feeAccumulated\",\n        type: \"uint248\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint64\",\n        name: \"startBlockNumber\",\n        type: \"uint64\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint64\",\n        name: \"endBlockNumber\",\n        type: \"uint64\",\n      },\n    ],\n    name: \"MigrationFinishedForAccount\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32[]\",\n        name: \"vkHashes\",\n        type: \"bytes32[]\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint16[]\",\n        name: \"sizes\",\n        type: \"uint16[]\",\n      },\n    ],\n    name: \"VkHashesUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"accountAccumulatedFee\",\n    outputs: [\n      {\n        internalType: \"uint248\",\n        name: \"\",\n        type: \"uint248\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"accountClaimPeriod\",\n    outputs: [\n      {\n        internalType: \"uint64\",\n        name: \"startBlockNumber\",\n        type: \"uint64\",\n      },\n      {\n        internalType: \"uint64\",\n        name: \"endBlockNumber\",\n        type: \"uint64\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"commitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"vkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appCommitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appVkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"smtRoot\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Brevis.ProofData[]\",\n        name: \"_proofDataArray\",\n        type: \"tuple[]\",\n      },\n      {\n        internalType: \"bytes[]\",\n        name: \"_appCircuitOutputs\",\n        type: \"bytes[]\",\n      },\n    ],\n    name: \"brevisBatchCallback\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_appCircuitOutput\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"brevisCallback\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"brevisProof\",\n    outputs: [\n      {\n        internalType: \"contract IBrevisProof\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"claim\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"claimContract\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"claimer\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"contractsHash\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"feeRebateTierModule\",\n    outputs: [\n      {\n        internalType: \"contract IFeeRebateTierModule\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rewardToken\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rewardTokenDecimals\",\n    outputs: [\n      {\n        internalType: \"uint24\",\n        name: \"\",\n        type: \"uint24\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_brevisProof\",\n        type: \"address\",\n      },\n    ],\n    name: \"setBrevisProof\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_claimContract\",\n        type: \"address\",\n      },\n    ],\n    name: \"setClaimContract\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_claimer\",\n        type: \"address\",\n      },\n    ],\n    name: \"setClaimer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_contractsHash\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setContractsHash\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IFeeRebateTierModule\",\n        name: \"_feeRebateTierModule\",\n        type: \"address\",\n      },\n    ],\n    name: \"setFeeRebateTierModule\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_rewardToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint24\",\n        name: \"_decimals\",\n        type: \"uint24\",\n      },\n    ],\n    name: \"setRewardToken\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32[]\",\n        name: \"_vkHashes\",\n        type: \"bytes32[]\",\n      },\n      {\n        internalType: \"uint16[]\",\n        name: \"_sizes\",\n        type: \"uint16[]\",\n      },\n    ],\n    name: \"setVkHashes\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"commitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"vkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appCommitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appVkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"smtRoot\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Brevis.ProofData\",\n        name: \"_proofData\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_merkleRoot\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32[]\",\n        name: \"_merkleProof\",\n        type: \"bytes32[]\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"_nodeIndex\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_appCircuitOutput\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"singleRun\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"smtRoot\",\n            type: \"bytes32\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint64\",\n                name: \"blkNum\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"receiptIndex\",\n                type: \"uint64\",\n              },\n              {\n                components: [\n                  {\n                    components: [\n                      {\n                        internalType: \"uint8\",\n                        name: \"valueFromTopic\",\n                        type: \"uint8\",\n                      },\n                      {\n                        internalType: \"uint64\",\n                        name: \"valueIndex\",\n                        type: \"uint64\",\n                      },\n                      {\n                        internalType: \"address\",\n                        name: \"contractAddress\",\n                        type: \"address\",\n                      },\n                      {\n                        internalType: \"bytes32\",\n                        name: \"logTopic0\",\n                        type: \"bytes32\",\n                      },\n                    ],\n                    internalType: \"struct Brevis.LogExtraInfo\",\n                    name: \"logExtraInfo\",\n                    type: \"tuple\",\n                  },\n                  {\n                    internalType: \"uint64\",\n                    name: \"logIndex\",\n                    type: \"uint64\",\n                  },\n                  {\n                    internalType: \"bytes32\",\n                    name: \"value\",\n                    type: \"bytes32\",\n                  },\n                ],\n                internalType: \"struct Brevis.LogInfo[5]\",\n                name: \"logs\",\n                type: \"tuple[5]\",\n              },\n            ],\n            internalType: \"struct Brevis.ReceiptInfo[]\",\n            name: \"receipts\",\n            type: \"tuple[]\",\n          },\n          {\n            components: [\n              {\n                internalType: \"bytes32\",\n                name: \"blockHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"slot\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"slotValue\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockNumber\",\n                type: \"uint64\",\n              },\n            ],\n            internalType: \"struct Brevis.StorageInfo[]\",\n            name: \"stores\",\n            type: \"tuple[]\",\n          },\n          {\n            components: [\n              {\n                internalType: \"bytes32\",\n                name: \"leafHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"blockHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockNumber\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockTime\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"bytes\",\n                name: \"leafRlpPrefix\",\n                type: \"bytes\",\n              },\n            ],\n            internalType: \"struct Brevis.TransactionInfo[]\",\n            name: \"txs\",\n            type: \"tuple[]\",\n          },\n        ],\n        internalType: \"struct Brevis.ExtractInfos\",\n        name: \"_extractInfos\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"validateRequest\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"vkHashesToCircuitSize\",\n    outputs: [\n      {\n        internalType: \"uint16\",\n        name: \"\",\n        type: \"uint16\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nconst _bytecode =\n  \"0x6080346100a957601f611f3438819003918201601f19168301916001600160401b038311848410176100ae578084926020946040528339810103126100a957516001600160a01b0390818116908190036100a95760018060a01b031990816000541617600055600154903390821617600155604051913391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3611e6f90816100c58239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60c0604052600436101561001257600080fd5b6000803560e01c80631dd3f354146118ab5780631e83409a14611817578063360fde49146117bb57806343c927a91461179d5780634a30d3eb1461173e5780635419f27c146116f25780635d1c29eb1461151b57806366345da4146114f4578063715018a61461149457806379d6b6a2146111285780637c08aa7414610a315780637f239c4d14610a0a5780638da5cb5b146109e35780639bdcecd1146109bd578063a184a0c71461098f578063ada323ff14610902578063b18c0868146108c1578063b90c209a1461084b578063c772c87f146107db578063c7f5aaa0146107b5578063cdfb583214610743578063d379be231461071c578063ed1fe83b14610238578063f2fde38b146101595763f7c618c11461013057600080fd5b3461015657806003193601126101565760206001600160a01b0360025416604051908152f35b80fd5b503461015657602036600319011261015657610173611a28565b600154906001600160a01b038083169161018e338414611bc7565b169182156101cd576001600160a01b03191682176001557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b503461015657606036600319011261015657610252611a52565b6024359067ffffffffffffffff821161071857366023830112156107185767ffffffffffffffff8260040135116107185736602460a0846004013502840101116107185760443567ffffffffffffffff8111610714576102b69036906004016119f7565b9290916102c884836004013514611c5d565b6001600160a01b0385541690813b156107105785906040519063cf7ac5a960e01b825267ffffffffffffffff604483019116600483015260406024830152846004013590526064810192602485019384845b876004013581106106cf57505083918380809303915afa80156106c4576106ac575b505b8260040135811061034d578580f35b610385604061036183866004013586611cce565b0135610378610371848989611cf4565b3691611b80565b6020815191012014611c12565b61039481846004013584611cce565b5060606103a682856004013585611cce565b01356103b3828787611cf4565b90918852600660205261ffff60408920541615610674578060141161066c578060331161066c578060521161066c5780605a1161066c576062908082116106705760821161066c578101356005540361062757601481013560081c908180610558575b610433823560601c605a84013560c01c605285013560c01c611d73565b823560601c8a52600760205260408a209067ffffffffffffffff8151166fffffffffffffffff00000000000000006020845493015160401b16916fffffffffffffffffffffffffffffffff19161717905560086020526001600160f81b0360408a2054166001600160f81b038083168201116105445792605a836001600160f81b0360c09461053f9897828f6040907f865837efc36f96ff0de4b15e50b0ead4bf18a6928f7045e7e39161eebf7c5dc79a3560601c815260086020522091818416011660ff60f81b82541617905560405194833560601c86526020860152603383013560081c60408601521660608401526052810135841c60808401520135821c60a0820152a1611ca9565b61033e565b634e487b7160e01b8a52601160045260248afd5b602460206001600160a01b03600354166040519283809263b72bf50960e01b8252603388013560081c60048301525afa801561061c578a906105cd575b67ffffffffffffffff91501690806001600160f81b03838202160482148115171561054457606491026001600160f81b031604610416565b506020813d602011610614575b816105e760209383611b46565b81010312610610575167ffffffffffffffff811681036106105767ffffffffffffffff90610595565b8980fd5b3d91506105da565b6040513d8c823e3d90fd5b60405162461bcd60e51b815260206004820152601660248201527f696e76616c696420636f6e7472616374732068617368000000000000000000006044820152606490fd5b8780fd5b8880fd5b60405162461bcd60e51b815260206004820152601060248201526f1d9ad2185cda081b9bdd081d985b1a5960821b6044820152606490fd5b6106b590611aac565b6106c057843861033c565b8480fd5b6040513d84823e3d90fd5b81358352602080830135908401526040808301359084015260608083013590840152608080830135908401528a955060a0928301929091019060010161031a565b8580fd5b8380fd5b8280fd5b503461015657806003193601126101565760206001600160a01b0360045416604051908152f35b5034610156576020366003190112610156577fad74290dd7363323a597a949fa2f97ae088f486218d8190369bb417a41a075e36020610780611a28565b6001600160a01b039061079882600154163314611bc7565b16806001600160a01b03196004541617600455604051908152a180f35b50346101565780600319360112610156576001600160a01b036020915416604051908152f35b5034610156576020366003190112610156577f1bf3143ab1544528303e489724067fb6c3ff3f7e3b0a6df041cae24242e447736020610818611a28565b6001600160a01b039061083082600154163314611bc7565b16806001600160a01b0319855416178455604051908152a180f35b5034610156576020366003190112610156576004356001600160a01b03808216809203610718577fae4a28486e59e557cbe94f201dc6e5c485bd89a590bc78f414add8c2f6b4bd8d916108a5602092600154163314611bc7565b806001600160a01b03196003541617600355604051908152a180f35b5034610156576020366003190112610156576001600160f81b0360406020926001600160a01b036108f0611a28565b16815260088452205416604051908152f35b50346101565760403660031901126101565761091c611a28565b60243562ffffff81168103610718577fffffffffffffffffff00000000000000000000000000000000000000000000006001600160a01b0361096381600154163314611bc7565b76ffffff00000000000000000000000000000000000000006002549360a01b1693169116171760025580f35b50346101565760203660031901126101565761ffff6040602092600435815260068452205416604051908152f35b5034610156578060031936011261015657602062ffffff60025460a01c16604051908152f35b503461015657806003193601126101565760206001600160a01b0360015416604051908152f35b503461015657806003193601126101565760206001600160a01b0360035416604051908152f35b503461015657600319606036820112611124576024359067ffffffffffffffff8216820361110f576044359067ffffffffffffffff82116107145760809082360301126107185760405190610a8582611ad6565b80600401358252602481013567ffffffffffffffff81116106c0578101366023820112156106c057600481013590610abc82611b68565b91610aca6040519384611b46565b808352602083019136602483600a1b8301011161066c5760248101925b602483600a1b8301018410610ffb57505050506020830152604481013567ffffffffffffffff81116106c0578101366023820112156106c057600481013590610b2f82611b68565b91610b3d6040519384611b46565b808352602083019136602460a084028301011161066c579160248301925b602460a084028201018410610f975750505050604083015260648101359067ffffffffffffffff82116106c0573660238383010112156106c0576004828201013590610ba682611b68565b92610bb46040519485611b46565b82845260208401913660248560051b84840101011161066c57602482820101925b60248560051b84840101018410610ec957505050505060608201526001600160a01b0383541690813b156107145791839167ffffffffffffffff93604051948593631f022a9d60e21b855260043560048601521660248401526060604484015260e48301908051606485015260208101519160806084860152825180915260206101048601930190865b818110610e06575050506040810151916063198582030160a486015260208084519283815201930190865b818110610da75750505060600151906063198482030160c4850152815180825260208201916020808360051b83010194019287915b838310610cfc57505050505082809103915afa80156106c457610ce8575b602060405160018152f35b610cf28291611aac565b6101565780610cdd565b9295975092955092601f1982820301835260808651805183526020810151602084015267ffffffffffffffff604082015116604084015267ffffffffffffffff606082015116606084015201519060a060808201528151918260a08301528a5b838110610d915750506020600192819260c0918d838284010152601f8019910116010197019301930187959389979592610cbf565b80602080928401015160c0828601015201610d5c565b929496509281955060a060209167ffffffffffffffff608060019551805184526001600160a01b038682015116868501526040810151604085015260608101516060850152015116608082015201950191019086949288969492610c8a565b92949650929094506040855167ffffffffffffffff815116835267ffffffffffffffff60208201511660208401520151604082019089915b60058310610e6357505050602061040060019201950191019086949288969492610c5f565b602060c0600192604085516060815160ff815116855267ffffffffffffffff8782015116878601526001600160a01b038482015116848601520151606084015267ffffffffffffffff85820151166080840152015160a082015201920192019190610e3e565b833567ffffffffffffffff81116106105760a08385018201360360231901126106105760405191610ef983611b0e565b83850182016024810135845260448101356020850152610f1b90606401611a69565b6040840152610f306084838787010101611a69565b606084015260a4828686010101359067ffffffffffffffff8211610f935736604383858989010101011215610f93576024936020938493610f819136918a8a01909101018088013590604401611b80565b60808201528152019401939050610bd5565b8b80fd5b60a0843603126106705760a0806020602494604051610fb581611b0e565b88358152610fc4838a01611a3e565b838201526040890135604082015260608901356060820152610fe860808a01611a69565b6080820152815201950194925050610b5b565b6104008085360312610610576040519061101482611af2565b61101d86611a69565b825261102b60208701611a69565b602083015236605f87011215611120576040519061104882611b0e565b8190368189011161111c5760408801915b818901831061107c57505050604082015281526104009390930192602001610ae7565b60c0833603126111185760405161109281611af2565b60808436031261111457604051916110a983611ad6565b84359160ff8316830361110f578360209360c095526110c9848801611a69565b848201526110d960408801611a3e565b60408201526060870135606082015281526110f660808701611a69565b8382015260a08601356040820152815201920191611059565b600080fd5b8e80fd5b8d80fd5b8c80fd5b8a80fd5b5080fd5b503461015657604036600319011261015657602467ffffffffffffffff81358181116107145761115c903690600401611a7e565b916001600160a01b039084604083885416815197888092632cc27dc960e11b825260043560048301525afa80156114895787968891611450575b506111b46111a5368888611b80565b9788516020809a012014611c12565b87526006865261ffff6040882054161561141a578460141161141657833560601c958560331161066c57601485013560081c918660521161067057603386013560081c9387605a1161061057605287013560c01c968860621161112057605a81013560c01c986082116111205760620135600554036113d25783958415908115611321575b5050611246898989611d73565b898b526007845260408b20918151166fffffffffffffffff000000000000000085845493015160401b16916fffffffffffffffffffffffffffffffff191617179055600882526001600160f81b03808060408c20541696168096019181831161130f57509160c097959391899795937f865837efc36f96ff0de4b15e50b0ead4bf18a6928f7045e7e39161eebf7c5dc79a8c526008835260408c20911660ff60f81b82541617905560405196875286015260408501526060840152608083015260a0820152a180f35b634e487b7160e01b8b5260116004528afd5b83919297508490600354166040519283809263b72bf50960e01b82528a60048301525afa80156113c75787918c9161138d575b5016906001600160f81b03828602169185830414171561137a5760649004943880611239565b50634e487b7160e01b8952601160045288fd5b809250858092503d83116113c0575b6113a68183611b46565b810103126111205751868116810361112057869038611354565b503d61139c565b6040513d8d823e3d90fd5b60405162461bcd60e51b8152600481018490526016818401527f696e76616c696420636f6e7472616374732068617368000000000000000000006044820152606490fd5b8680fd5b8560106064926040519262461bcd60e51b845260048401528201526f1d9ad2185cda081b9bdd081d985b1a5960821b6044820152fd5b9650506040863d604011611481575b8161146c60409383611b46565b81010312611416576020865196015138611196565b3d915061145f565b6040513d89823e3d90fd5b503461015657806003193601126101565760006001546001600160a01b03196001600160a01b038216916114c9338414611bc7565b166001557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461015657806003193601126101565760206001600160a01b0360095416604051908152f35b50346101565761014036600319011261015657611536611a52565b60a03660231901126111245767ffffffffffffffff60e435818111610714576115639036906004016119f7565b926101049283359260ff8416809403611416578661012496873584811161071857611592903690600401611a7e565b9790966001600160a01b03968785541692833b1561071057879260405197889687958695632247cd8f60e01b875216600486015260249e8f803590870152604435604487015260643580608052606487015260843560a05260a051608487015260a43560a487015260c43560c487015260e48601610120905285019061161792611d36565b9183015203915afa8015611489576116df575b50611636368585611b80565b9461164b865160208098012060805114611c12565b60a05187526006865261ffff6040882054161561141a578460141161141657833560601c958560331161066c57601485013560081c918660521161067057603386013560081c9387605a1161061057605287013560c01c968860621161112057605a81013560c01c986082116111205760620135600554036113d25783958415908115611321575050611246898989611d73565b6116eb90969196611aac565b943861162a565b503461015657602036600319011261015657604080916001600160a01b03611718611a28565b1681526007602052205481519067ffffffffffffffff908181168352831c166020820152f35b503461015657602036600319011261015657611758611a28565b6001600160a01b039061177082600154163314611bc7565b16801561178b576001600160a01b0319600954161760095580f35b60405163d92e233d60e01b8152600490fd5b50346101565780600319360112610156576020600554604051908152f35b5034610156576020366003190112610156577f7bfc81ef745ea2254ff60bbb4fb7e8855f897b7aa3907ea8eebc957c362d8f5e60206004356118096001600160a01b03600154163314611bc7565b80600555604051908152a180f35b503461015657602036600319011261015657611831611a28565b6001600160a01b039081600954163303611899577f17525e7c25776b686f3c5fb5714aac26a41bdccd536c711002922e7e5ffb4c2c916040911680845260086020526001600160f81b0382852080549060ff60f81b821690558351928352166020820152a180f35b6040516332bc53e960e21b8152600490fd5b50346101565760403660031901126101565767ffffffffffffffff600435818111610718576118de9036906004016119f7565b91602435908111610714576118f79036906004016119f7565b90916001906119116001600160a01b038354163314611bc7565b61191c838614611c5d565b855b8581106119a8575061193c9060405195604087526040870191611d36565b916020838682950382880152828152019392865b82811061198157877fb3f7d79a2f90dac793ddd7d86f2d7d5d073e107289c685083e9d4329f1640f5c88880389a180f35b909192939485359061ffff8216809203610670579081528201948201939291908301611950565b6119b6818587969596611e29565b359061ffff821680920361066c576119ef916119d3828986611e29565b3589526006602052604089209061ffff19825416179055611ca9565b92919261191e565b9181601f8401121561110f5782359167ffffffffffffffff831161110f576020808501948460051b01011161110f57565b600435906001600160a01b038216820361110f57565b35906001600160a01b038216820361110f57565b6004359067ffffffffffffffff8216820361110f57565b359067ffffffffffffffff8216820361110f57565b9181601f8401121561110f5782359167ffffffffffffffff831161110f576020838186019501011161110f57565b67ffffffffffffffff8111611ac057604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff821117611ac057604052565b6060810190811067ffffffffffffffff821117611ac057604052565b60a0810190811067ffffffffffffffff821117611ac057604052565b6040810190811067ffffffffffffffff821117611ac057604052565b90601f8019910116810190811067ffffffffffffffff821117611ac057604052565b67ffffffffffffffff8111611ac05760051b60200190565b92919267ffffffffffffffff8211611ac05760405191611baa601f8201601f191660200184611b46565b82948184528183011161110f578281602093846000960137010152565b15611bce57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b15611c1957565b606460405162461bcd60e51b815260206004820152602060248201527f6661696c656420746f206f70656e206f757470757420636f6d6d69746d656e746044820152fd5b15611c6457565b60405162461bcd60e51b815260206004820152601060248201527f6c656e677468206e6f74206d61746368000000000000000000000000000000006044820152606490fd5b6000198114611cb85760010190565b634e487b7160e01b600052601160045260246000fd5b9190811015611cde5760a0020190565b634e487b7160e01b600052603260045260246000fd5b9190811015611cde5760051b81013590601e198136030182121561110f57019081359167ffffffffffffffff831161110f57602001823603811361110f579190565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831161110f5760209260051b809284830137010190565b916001600160a01b039060006020604051611d8d81611b2a565b828152015216600052600760205260406000209160405192611dae84611b2a565b549067ffffffffffffffff808084169384875260401c166020860193818552159081611e20575b50611e135780808651169416938410611e095780835116911611611e0557604051632d75bc4f60e01b8152600490fd5b5290565b9250905016815290565b8092939116845216905290565b90501538611dd5565b9190811015611cde5760051b019056fea264697066735822122076bd0911176946bf7cd2384de518f89aa3ab27930e50b08389c8338398dbb57564736f6c63430008140033\";\n\ntype FeeReimbursementAppConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: FeeReimbursementAppConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class FeeReimbursementApp__factory extends ContractFactory {\n  constructor(...args: FeeReimbursementAppConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override getDeployTransaction(\n    _brevisProof: AddressLike,\n    overrides?: NonPayableOverrides & { from?: string }\n  ): Promise<ContractDeployTransaction> {\n    return super.getDeployTransaction(_brevisProof, overrides || {});\n  }\n  override deploy(\n    _brevisProof: AddressLike,\n    overrides?: NonPayableOverrides & { from?: string }\n  ) {\n    return super.deploy(_brevisProof, overrides || {}) as Promise<\n      FeeReimbursementApp & {\n        deploymentTransaction(): ContractTransactionResponse;\n      }\n    >;\n  }\n  override connect(\n    runner: ContractRunner | null\n  ): FeeReimbursementApp__factory {\n    return super.connect(runner) as FeeReimbursementApp__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): FeeReimbursementAppInterface {\n    return new Interface(_abi) as FeeReimbursementAppInterface;\n  }\n  static connect(\n    address: string,\n    runner?: ContractRunner | null\n  ): FeeReimbursementApp {\n    return new Contract(\n      address,\n      _abi,\n      runner\n    ) as unknown as FeeReimbursementApp;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Interface, type ContractRunner } from \"ethers\";\nimport type {\n  IFeeRebateTierModule,\n  IFeeRebateTierModuleInterface,\n} from \"../../../contracts/FeeReimbursementApp.sol/IFeeRebateTierModule\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"uint248\",\n        name: \"volume30D\",\n        type: \"uint248\",\n      },\n    ],\n    name: \"getFeeRebatePercentage\",\n    outputs: [\n      {\n        internalType: \"uint64\",\n        name: \"\",\n        type: \"uint64\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nexport class IFeeRebateTierModule__factory {\n  static readonly abi = _abi;\n  static createInterface(): IFeeRebateTierModuleInterface {\n    return new Interface(_abi) as IFeeRebateTierModuleInterface;\n  }\n  static connect(\n    address: string,\n    runner?: ContractRunner | null\n  ): IFeeRebateTierModule {\n    return new Contract(\n      address,\n      _abi,\n      runner\n    ) as unknown as IFeeRebateTierModule;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Interface, type ContractRunner } from \"ethers\";\nimport type {\n  IMigration,\n  IMigrationInterface,\n} from \"../../../contracts/FeeReimbursementApp.sol/IMigration\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_account\",\n        type: \"address\",\n      },\n    ],\n    name: \"accountAccumulatedFee\",\n    outputs: [\n      {\n        internalType: \"uint248\",\n        name: \"\",\n        type: \"uint248\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_account\",\n        type: \"address\",\n      },\n    ],\n    name: \"accountClaimPeriod\",\n    outputs: [\n      {\n        internalType: \"uint64\",\n        name: \"\",\n        type: \"uint64\",\n      },\n      {\n        internalType: \"uint64\",\n        name: \"\",\n        type: \"uint64\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nexport class IMigration__factory {\n  static readonly abi = _abi;\n  static createInterface(): IMigrationInterface {\n    return new Interface(_abi) as IMigrationInterface;\n  }\n  static connect(address: string, runner?: ContractRunner | null): IMigration {\n    return new Contract(address, _abi, runner) as unknown as IMigration;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport {\n  Contract,\n  ContractFactory,\n  ContractTransactionResponse,\n  Interface,\n} from \"ethers\";\nimport type { Signer, ContractDeployTransaction, ContractRunner } from \"ethers\";\nimport type { NonPayableOverrides } from \"../../common\";\nimport type {\n  MockFeeModule,\n  MockFeeModuleInterface,\n} from \"../../contracts/MockFeeModule\";\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint248\",\n        name: \"volume30D\",\n        type: \"uint248\",\n      },\n    ],\n    name: \"getFeeRebatePercentage\",\n    outputs: [\n      {\n        internalType: \"uint64\",\n        name: \"\",\n        type: \"uint64\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n] as const;\n\nconst _bytecode =\n  \"0x6080806040523461005b5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a361034390816100618239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c8063715018a6146101d55780638da5cb5b146101a2578063b72bf509146101475763f2fde38b1461004957600080fd5b346101445760203660031901126101445760043573ffffffffffffffffffffffffffffffffffffffff8082168092036101405782549081169061008d33831461024c565b82156100d55773ffffffffffffffffffffffffffffffffffffffff1916821783557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b8280fd5b80fd5b503461014457602036600319011261014457600435907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8216820361014457602061019083610297565b67ffffffffffffffff60405191168152f35b503461014457806003193601126101445773ffffffffffffffffffffffffffffffffffffffff6020915416604051908152f35b503461014457806003193601126101445780805473ffffffffffffffffffffffffffffffffffffffff1973ffffffffffffffffffffffffffffffffffffffff82169161022233841461024c565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b1561025357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b670de0b6b3a76400007effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9182160416633b9aca008111156102d75750601e90565b6305f5e1008111156102e95750601490565b629896808111156102fa5750600a90565b620f42401061030857600090565b60059056fea2646970667358221220790bfcf40637c588b54bd9bdbf9a6fb911b9b7a3a9b7a0fe9349e7ab82a60bb064736f6c63430008140033\";\n\ntype MockFeeModuleConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: MockFeeModuleConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class MockFeeModule__factory extends ContractFactory {\n  constructor(...args: MockFeeModuleConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override getDeployTransaction(\n    overrides?: NonPayableOverrides & { from?: string }\n  ): Promise<ContractDeployTransaction> {\n    return super.getDeployTransaction(overrides || {});\n  }\n  override deploy(overrides?: NonPayableOverrides & { from?: string }) {\n    return super.deploy(overrides || {}) as Promise<\n      MockFeeModule & {\n        deploymentTransaction(): ContractTransactionResponse;\n      }\n    >;\n  }\n  override connect(runner: ContractRunner | null): MockFeeModule__factory {\n    return super.connect(runner) as MockFeeModule__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): MockFeeModuleInterface {\n    return new Interface(_abi) as MockFeeModuleInterface;\n  }\n  static connect(\n    address: string,\n    runner?: ContractRunner | null\n  ): MockFeeModule {\n    return new Contract(address, _abi, runner) as unknown as MockFeeModule;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport {\n  Contract,\n  ContractFactory,\n  ContractTransactionResponse,\n  Interface,\n} from \"ethers\";\nimport type {\n  Signer,\n  AddressLike,\n  ContractDeployTransaction,\n  ContractRunner,\n} from \"ethers\";\nimport type { NonPayableOverrides } from \"../../../contract/typechain/common\";\nimport type {\n  BrevisRequest,\n  BrevisRequestInterface,\n} from \"./BrevisRequest\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_feeCollector\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IBrevisProof\",\n        name: \"_brevisProof\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n    ],\n    name: \"FeeCollectorUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"RequestCallbackFailed\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"RequestFulfilled\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"RequestRefunded\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"requestId\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"fee\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"callback\",\n        type: \"address\",\n      },\n    ],\n    name: \"RequestSent\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"from\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"to\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"RequestTimeoutUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32[]\",\n        name: \"requestIds\",\n        type: \"bytes32[]\",\n      },\n    ],\n    name: \"RequestsCallbackFailed\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32[]\",\n        name: \"requestId\",\n        type: \"bytes32[]\",\n      },\n    ],\n    name: \"RequestsFulfilled\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"brevisProof\",\n    outputs: [\n      {\n        internalType: \"contract IBrevisProof\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_to\",\n        type: \"address\",\n      },\n    ],\n    name: \"collectFee\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"feeCollector\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        internalType: \"bytes32[]\",\n        name: \"_requestIds\",\n        type: \"bytes32[]\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_proof\",\n        type: \"bytes\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"commitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"vkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appCommitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appVkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"smtRoot\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Brevis.ProofData[]\",\n        name: \"_proofDataArray\",\n        type: \"tuple[]\",\n      },\n      {\n        internalType: \"bytes[]\",\n        name: \"_appCircuitOutputs\",\n        type: \"bytes[]\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_callback\",\n        type: \"address\",\n      },\n    ],\n    name: \"fulfillAggRequests\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_proof\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"_withAppProof\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_appCircuitOutput\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"fulfillRequest\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"queryRequestStatus\",\n    outputs: [\n      {\n        internalType: \"enum IBrevisRequest.RequestStatus\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"refund\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"requestTimeout\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"requests\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"fee\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"refundee\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"callback\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum IBrevisRequest.RequestStatus\",\n        name: \"status\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_refundee\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_callback\",\n        type: \"address\",\n      },\n    ],\n    name: \"sendRequest\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_feeCollector\",\n        type: \"address\",\n      },\n    ],\n    name: \"setFeeCollector\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_timeout\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setRequestTimeout\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    stateMutability: \"payable\",\n    type: \"receive\",\n  },\n] as const;\n\nconst _bytecode =\n  \"0x6080346100c057601f61127538819003918201601f19168301916001600160401b038311848410176100c55780849260409485528339810103126100c05780516001600160a01b0391828216918290036100c05760200151908282168092036100c0576000549060018060a01b0319913383821617600055604051943391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3816001541617600155600354161760035561119990816100dc8239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001d575b50361561001b57600080fd5b005b600090813560e01c9081633f20b4c914610ec357508063622b6af414610e605780636a96173514610bc9578063715018a614610b6c5780637249fbb6146109e85780637ff7b0d2146109565780638da5cb5b146109305780639d866985146108c6578063a42dce801461084d578063b6979c3e14610813578063c415b95c146107ec578063c7f5aaa0146107c5578063da47dc32146105a6578063ecdafd46146101ae5763f2fde38b0361000f57346101ab5760203660031901126101ab576100e4610f28565b6001600160a01b0380916100fc828554163314610f92565b1690811561014057600054826001600160a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b80fd5b50346101ab5760c03660031901126101ab5760043567ffffffffffffffff811681036105965760243567ffffffffffffffff8111610592576101f4903690600401610f61565b9160443567ffffffffffffffff81116105a257610215903690600401610edf565b67ffffffffffffffff6064351161059e5736602360643501121561059e5767ffffffffffffffff606435600401351161059e5736602460a0606435600401350260643501011161059e5760843567ffffffffffffffff811161059a5761027f903690600401610f61565b919092876001600160a01b03928360a4351660a43503610596578360035416803b156105925767ffffffffffffffff83896102f78c978e966102e56040519a8b998a988997633ab58d6f60e21b89521660048801526060602488015260648701916110da565b84810360031901604486015291611079565b03925af1801561058757610557575b5060015b8660ff82161061050557507fc9f9dbb4a40f26672580c28841452a59f824f5c0053e412183cfec77e76570ef604051602081528061034c602082018a8a6110da565b0390a160a4351661035b578580f35b85916040519363ed1fe83b60e01b602086015267ffffffffffffffff60848601911660248601526060604486015260643560040135905260a4840191602460643501845b6064356004013581106104c4575050602319858403016064860152808352602083019060208160051b850101938386915b83831061045757505050505050916103f281839403601f198101835282610fdd565b6020815191018260a4355af161040661109a565b5015610414575b8080808580f35b7fa27ac73d985dc053bec967c59a530feb90be0582343095d7b85ec7e7c3fef2089161044d6040519283926020845260208401916110da565b0390a1388061040d565b9193959092949650601f198282030186528635601e19843603018112156104c0578301906020823592019167ffffffffffffffff81116104bc5780360383136104bc576104aa6020928392600195611079565b98019601930190918a969594926103d0565b8c80fd5b8b80fd5b813585526020808301359086015260408083013590860152606080830135908601526080808301359086015289955060a0948501949091019060010161039f565b611fe08160051b168601358852600460205260036040892001600160a01b60ff60a01b1982541617905560ff8091169081146105435760010161030a565b634e487b7160e01b88526011600452602488fd5b67ffffffffffffffff8198929811610573576040529538610306565b634e487b7160e01b82526041600452602482fd5b6040513d8a823e3d90fd5b8280fd5b5080fd5b8680fd5b8580fd5b8480fd5b5060603660031901126101ab576004356105be610f12565b604435906001600160a01b038083168093036105a25783855260209160048352604086205461078057811690811561073b57600254420190814211610727576040519160a0830183811067ffffffffffffffff82111761071357604052825260038483019234845260408101948552606081019487865260808201948a8652898b526004885260408b209251835551600183015583600283019151166001600160a01b0319825416179055019251168254915160038110156106ff579160809593917fffffffffffffffffffffff00000000000000000000000000000000000000000074ff00000000000000000000000000000000000000007f4eede03ca33645529b4d82428b024149165298c901cf7453f68eb43bd3d3b65899979560a01b1692161717905560405192835233908301523460408301526060820152a180f35b634e487b7160e01b88526021600452602488fd5b634e487b7160e01b89526041600452602489fd5b634e487b7160e01b87526011600452602487fd5b60405162461bcd60e51b815260048101849052601560248201527f726566756e646565206e6f742070726f766964656400000000000000000000006044820152606490fd5b60405162461bcd60e51b815260048101849052601860248201527f7265717565737420616c726561647920696e20717565756500000000000000006044820152606490fd5b50346101ab57806003193601126101ab5760206001600160a01b0360035416604051908152f35b50346101ab57806003193601126101ab5760206001600160a01b0360015416604051908152f35b50346101ab5760203660031901126101ab5760ff6003604060209360043581526004855220015460a01c1661084b6040518092610f3e565bf35b50346101ab5760203660031901126101ab577f5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f38604061088a610f28565b6001600160a01b036108a0818654163314610f92565b80600154921690816001600160a01b03198416176001558351921682526020820152a180f35b50346101ab5760203660031901126101ab57604060a091600435815260046020522061084b8154916001810154906001600160a01b039060038260028301541691015492604051958652602086015260408501528116606084015260ff6080840191851c16610f3e565b50346101ab57806003193601126101ab576001600160a01b036020915416604051908152f35b50346101ab5760403660031901126101ab57610970610f12565b6001600160a01b036001541633036109a357818080806109a0946004359061c350f161099a61109a565b50611117565b80f35b60405162461bcd60e51b815260206004820152601160248201527f6e6f742066656520636f6c6c6563746f720000000000000000000000000000006044820152606490fd5b50346101ab5760208060031936011261059657600435808352600482526040832054421115610592576001600160a01b036024838260035416604051928380926371e8f36b60e11b82528760048301525afa8015610b6157610a52918691610b34575b501561102d565b81845260048352604084205415610aef5790610ab5848080807ffea410cb461deba9fe807dde02d6641d82e1bf09ecc88ecfa0f2ffadf2a1fdfe979686825260048852600160408320918383556002830154169101549061c350f161099a61109a565b80845260048252600360408520017402000000000000000000000000000000000000000060ff60a01b19825416179055604051908152a180f35b60405162461bcd60e51b815260048101849052601460248201527f72657175657374206e6f7420696e2071756575650000000000000000000000006044820152606490fd5b610b549150853d8711610b5a575b610b4c8183610fdd565b810190611015565b38610a4b565b503d610b42565b6040513d87823e3d90fd5b50346101ab57806003193601126101ab578080546001600160a01b03196001600160a01b03821691610b9f338414610f92565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101ab5760a03660031901126101ab5760043560243567ffffffffffffffff808216809203610e5c576044358181116105a257610c0c903690600401610edf565b906064359283151580940361059a5760843590811161059a57610c33903690600401610edf565b9290936001600160a01b03928360035416604051936371e8f36b60e11b85528960048601528a6020998a87602481875afa958615610e5157610c818c97610cab998591610e3a57501561102d565b60405197889687958694630979240d60e21b86526004860152606060248601526064850191611079565b90604483015203925af1908115610e2f578791610e02575b508503610dbd57908592918584526004855260036040852001600160a01b60ff60a01b198254161790557f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e685604051888152a1858452600485526003604085200154169081610d30578380f35b83610d64610d7282956040519283918a830196633ceb5b5160e11b88528c6024850152604060448501526064840191611079565b03601f198101835282610fdd565b51925af1610d7e61109a565b5015610d8d575b828180808380f35b7ff9e9ac125efc63eaa0638c58fd8a1ab11673bae30202f01909611e4ebdbe9b4e91604051908152a13880610d85565b60405162461bcd60e51b815260048101859052601d60248201527f72657175657374496420616e642070726f6f66206e6f74206d617463680000006044820152606490fd5b90508481813d8311610e28575b610e198183610fdd565b8101031261059a575138610cc3565b503d610e0f565b6040513d89823e3d90fd5b610b549150893d8b11610b5a57610b4c8183610fdd565b6040513d84823e3d90fd5b8380fd5b50346101ab5760203660031901126101ab577f87a73c061f18ffd513249d1d727921e40e348948b01e2979efb36ef4f5204a636040600435610ead6001600160a01b038554163314610f92565b600254908060025582519182526020820152a180f35b9050346105965781600319360112610596576020906002548152f35b9181601f84011215610f0d5782359167ffffffffffffffff8311610f0d5760208381860195010111610f0d57565b600080fd5b602435906001600160a01b0382168203610f0d57565b600435906001600160a01b0382168203610f0d57565b906003821015610f4b5752565b634e487b7160e01b600052602160045260246000fd5b9181601f84011215610f0d5782359167ffffffffffffffff8311610f0d576020808501948460051b010111610f0d57565b15610f9957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90601f8019910116810190811067ffffffffffffffff821117610fff57604052565b634e487b7160e01b600052604160045260246000fd5b90816020910312610f0d57518015158103610f0d5790565b1561103457565b60405162461bcd60e51b815260206004820152601760248201527f70726f6f6620616c72656164792067656e6572617465640000000000000000006044820152606490fd5b908060209392818452848401376000828201840152601f01601f1916010190565b3d156110d5573d9067ffffffffffffffff8211610fff57604051916110c9601f8201601f191660200184610fdd565b82523d6000602084013e565b606090565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311610f0d5760209260051b809284830137010190565b1561111e57565b60405162461bcd60e51b815260206004820152601260248201527f73656e64206e6174697665206661696c656400000000000000000000000000006044820152606490fdfea2646970667358221220c2624f28ab83f528b4b0611ce6018b867ef7227e773a85684493580622d4936464736f6c63430008140033\";\n\ntype BrevisRequestConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: BrevisRequestConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class BrevisRequest__factory extends ContractFactory {\n  constructor(...args: BrevisRequestConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override getDeployTransaction(\n    _feeCollector: AddressLike,\n    _brevisProof: AddressLike,\n    overrides?: NonPayableOverrides & { from?: string }\n  ): Promise<ContractDeployTransaction> {\n    return super.getDeployTransaction(\n      _feeCollector,\n      _brevisProof,\n      overrides || {}\n    );\n  }\n  override deploy(\n    _feeCollector: AddressLike,\n    _brevisProof: AddressLike,\n    overrides?: NonPayableOverrides & { from?: string }\n  ) {\n    return super.deploy(\n      _feeCollector,\n      _brevisProof,\n      overrides || {}\n    ) as Promise<\n      BrevisRequest & {\n        deploymentTransaction(): ContractTransactionResponse;\n      }\n    >;\n  }\n  override connect(runner: ContractRunner | null): BrevisRequest__factory {\n    return super.connect(runner) as BrevisRequest__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): BrevisRequestInterface {\n    return new Interface(_abi) as BrevisRequestInterface;\n  }\n  static connect(\n    address: string,\n    runner?: ContractRunner | null\n  ): BrevisRequest {\n    return new Contract(address, _abi, runner) as unknown as BrevisRequest;\n  }\n}\n","import { ethers } from \"ethers\";\nimport { DelayedOrderSubmittedEvent, isValidPositionModifiedContract, OrderFlowFeeImposedEvent, OrderFlowFeeImposedEventContractAddress, PositionModifiedEvent, STATUS_READY, TX_TYPE_EXECUTION, TX_TYPE_ORDER_FEE_FLOW } from \"../constants/index.ts\";\nimport { getReceipt, updateReceipt, updateStorage, updateTrade } from \"../db/index.ts\";\nimport { sourceChainProvider } from \"../ether_interactions/index.ts\";\nimport { Receipt } from \"../server/type.ts\";\n\nexport type Log = {\n  contract: string,\n  log_index: number,\n  event_id: string,\n  is_topic: boolean,\n  field_index: number,\n  value: string,\n} \nexport type ReceiptInfo = {\n  block_num: number,\n  tx_hash: string,\n  fields: Log[],\n}\n\nasync function querySingleReceipt(receipt: any) {\n    return sourceChainProvider\n      .getTransactionReceipt(receipt.tx_hash)\n      .catch((error) => {\n        console.log(error, error);\n      })\n      .then((transactionReceipt) => {\n        if (transactionReceipt == null || transactionReceipt == undefined) {\n          console.debug(\"tx receipt not found\", receipt.id, receipt.tx_hash);\n          return;\n        }\n\n        var shouldBeFilteredOut = transactionReceipt.logs.length > 128\n\n        transactionReceipt.logs.forEach(log => {\n          if (log.data.length >= 1000) {\n            shouldBeFilteredOut = true\n          }\n        })\n\n        if (Number(receipt.transaction_type) === TX_TYPE_ORDER_FEE_FLOW) {\n          const result = getJSONForOrderFeeFlowTx(receipt.account, transactionReceipt)\n          if (result.logsFound) {\n            updateReceipt(\n              receipt.tx_hash,\n              receipt.account,\n              receipt.transaction_type,\n              STATUS_READY,\n              result.data,\n              shouldBeFilteredOut\n            );\n          } else {\n            console.debug(`${receipt.tx_hash} is not a order fee flow tx: ${result.data}`)\n          }\n        } else if (Number(receipt.transaction_type) === TX_TYPE_EXECUTION) {\n          const result = getJSONForExecutionTx(receipt.account, transactionReceipt)\n          if (result.logsFound) {\n            updateReceipt(\n              receipt.tx_hash,\n              receipt.account,\n              receipt.transaction_type,\n              STATUS_READY,\n              result.data,\n              shouldBeFilteredOut\n            );\n          } else {\n            console.debug(`${receipt.tx_hash} is not a execution tx: ${result.data}`)\n          }\n        } else {\n          console.error(\"unexpected transaction type\")\n        }\n      }, null);\n}\n\nasync function querySingleStorage(storage: any) {\n  return sourceChainProvider.getStorage(storage.account, storage.key, Number(storage.blk_number)).then((value) => {\n    if (value == null || value == void 0) {\n      console.debug(\"storage not found\", storage.id, storage.tx_hash);\n      return;\n    }\n    updateStorage(\n      storage.id,\n      STATUS_READY,\n      value,\n      JSON.stringify({\n        account: storage.account,\n        key: storage.key,\n        value,\n        blk_number: storage.blk_number\n      })\n    );\n  }, null);\n}\n\nfunction getJSONForOrderFeeFlowTx(\n  account: string,\n  transactionReceipt: ethers.TransactionReceipt\n) {\n  let original: ReceiptInfo = {\n    block_num: transactionReceipt.blockNumber,\n    tx_hash: transactionReceipt.hash,\n    fields: [],\n  };\n\n  transactionReceipt.logs.forEach((log, i) => {\n    if (log.topics.length < 2) {\n      return \n    }\n\n    let logAddress = log.address.toLowerCase()\n    let topic0 = log.topics[0].toLowerCase();\n    \n    if (topic0.toLowerCase() === DelayedOrderSubmittedEvent && !isValidPositionModifiedContract(logAddress)) {\n      console.log(`${logAddress}`)\n    }\n\n    // OrderFlowFee Events\n    if (\n      logAddress === OrderFlowFeeImposedEventContractAddress &&\n      topic0.toLowerCase() === OrderFlowFeeImposedEvent &&\n      BigInt(log.topics[1].toLowerCase()) === BigInt(account.toLowerCase())\n    ) {\n      // OrderFlowFeeImposed account\n      original.fields.push({\n        contract: OrderFlowFeeImposedEventContractAddress,\n        log_index: i,\n        event_id: OrderFlowFeeImposedEvent,\n        is_topic: true,\n        field_index: 1,\n        value: account,\n      })\n      // OrderFlowFeeImposed amount\n      original.fields.push({\n        contract: OrderFlowFeeImposedEventContractAddress,\n        log_index: i,\n        event_id: OrderFlowFeeImposedEvent,\n        is_topic: false,\n        field_index: 0,\n        value: \"0x\" + log.data.replace(\"0x\", \"\").slice(0, 64),\n      })\n    } else  if (\n      isValidPositionModifiedContract(logAddress) &&\n      topic0.toLowerCase() === DelayedOrderSubmittedEvent &&\n      BigInt(log.topics[1].toLowerCase()) === BigInt(account.toLowerCase())\n    ) {\n      // DelayedOrderSubmittedEvent account\n      original.fields.push({\n        contract: logAddress,\n        log_index: i,\n        event_id: DelayedOrderSubmittedEvent,\n        is_topic: true,\n        field_index: 1,\n        value: account,\n      })\n      // DelayedOrderSubmittedEvent keeperDeposit\n      original.fields.push({\n        contract: logAddress,\n        log_index: i,\n        event_id: DelayedOrderSubmittedEvent,\n        is_topic: false,\n        field_index: 6,\n        value: \"0x\" + log.data.replace(\"0x\", \"\").slice(6 * 64, 7 * 64),\n      })\n    }\n  });\n  const data = JSON.stringify(original)\n\n  return {data: data, logsFound: original.fields.length >= 4 && original.fields.length % 4 == 0 }\n}\n\nfunction getJSONForExecutionTx(  \n  account: string,\n  transactionReceipt: ethers.TransactionReceipt\n) {\n  let original: ReceiptInfo = {\n    block_num: transactionReceipt.blockNumber,\n    tx_hash: transactionReceipt.hash,\n    fields: [],\n  };\n\n  transactionReceipt.logs.forEach((log, i) => {\n    if (log.topics.length < 3) {\n      return \n    }\n    let logAddress = log.address.toLowerCase()\n    let topic0 = log.topics[0].toLowerCase();\n    \n    if (topic0.toLowerCase() === PositionModifiedEvent && !isValidPositionModifiedContract(logAddress)) {\n      console.log(`${logAddress}`)\n    }\n\n    // PositionModified Event \n    if (\n      isValidPositionModifiedContract(logAddress)\n      && topic0.toLowerCase() === PositionModifiedEvent && \n      BigInt(log.topics[2].toLowerCase()) === BigInt(account.toLowerCase())\n    ) {\n      // account\n      original.fields.push({\n        contract: logAddress,\n        log_index: i,\n        event_id: topic0,\n        is_topic: true,\n        field_index: 2,\n        value: log.topics[2].toLowerCase(),\n      })\n\n      // tradeSize\n      original.fields.push({\n        contract: logAddress,\n        log_index: i,\n        event_id: topic0,\n        is_topic: false,\n        field_index: 2,\n        value: \"0x\" + log.data.replace(\"0x\", \"\").slice(2 * 64, 3 * 64),\n      })\n\n      // lastPrice\n      original.fields.push({\n        contract: logAddress,\n        log_index: i,\n        event_id: topic0,\n        is_topic: false,\n        field_index: 3,\n        value: \"0x\" + log.data.replace(\"0x\", \"\").slice(3 * 64, 4 * 64),\n      })\n\n      // fee\n      original.fields.push({\n        contract: logAddress,\n        log_index: i,\n        event_id: topic0,\n        is_topic: false,\n        field_index: 5,\n        value: \"0x\" + log.data.replace(\"0x\", \"\").slice(5 * 64, 6 * 64),\n      })\n    }\n  });\n\n  const data = JSON.stringify(original)\n\n  return {data: data, logsFound: original.fields.length >= 4 && original.fields.length % 4 == 0}\n}\n\nasync function queryTrade(trade: any) {\n  const order_fee_flow_tx_receipt_id = trade.order_fee_flow_tx_receipt_id\n  const receiptPromises = Array<Promise<any>>();\n  if (order_fee_flow_tx_receipt_id.length > 0) {\n    receiptPromises.push(getReceipt(order_fee_flow_tx_receipt_id))\n  }\n\n  const execution_tx_receipt_id = trade.execution_tx_receipt_id\n  \n  if (execution_tx_receipt_id.length === 0) {\n    console.error(`empty execution_tx_receipt_id for trade ${trade.account}-${trade.execution_tx_receipt_id}`)\n    return \n  }\n\n  receiptPromises.push(getReceipt(execution_tx_receipt_id))\n\n  console.debug(`Get receipt promises.length: ${receiptPromises.length}`)\n\n  const receipts = await Promise.all(receiptPromises);\n\n  var volume = BigInt(0)\n  var fee  = BigInt(0)\n\n  var debugFee = \"\"\n  var debugVolume = \"\"\n\n  for (var receiptIndex = 0; receiptIndex < receipts.length; receiptIndex++) {\n    const receipt = receipts[receiptIndex] as Receipt\n    if (receipt === undefined || receipt === null) {\n      return \n    }\n\n    if (Number(receipt.status) !== Number(STATUS_READY)) {\n      return \n    }\n    const data = JSON.parse(receipt.data);\n\n    if (Number(receipt.transaction_type) === TX_TYPE_ORDER_FEE_FLOW) {\n      debugFee += ` order fee flow tx ${receipt.tx_hash} `\n      for (var i = 1; i < data.fields.length; i+=2) {\n        fee = fee + BigInt(data.fields[i].value)\n\n        debugFee += ` fee: ${data.fields[i].value} `\n      }\n    } else {\n      debugFee += ` execution tx ${receipt.tx_hash} `\n      debugVolume += ` execution tx ${receipt.tx_hash} `\n      for (let i = 0; i < data.fields.length / 4; i++) {\n        var size = BigInt.asIntN(256, BigInt(data.fields[i*4 + 1].value));\n        if (size < 0) {\n          size = -size;\n        }\n        volume = volume + size * BigInt(data.fields[i*4 + 2].value) / BigInt(\"1000000000000000000\")\n        fee = fee + BigInt(data.fields[i*4+3].value)\n\n        debugFee += ` fee: ${data.fields[i*4+3].value} `\n      }\n    }\n  }\n\n  if (volume !== BigInt(trade.volume)) {\n    console.debug(`trade volume-not-match: account ${trade.account}. expected: ${trade.volume}. Debug-info: ${debugVolume}`)\n  } else if (fee !== BigInt(trade.fee)) {\n    console.debug(`trade fee-not-match: account ${trade.account}. Debug info: ${debugFee}`)\n  }\n  await updateTrade(trade.execution_tx_receipt_id, trade.account, STATUS_READY)\n}\n\nexport {\n    querySingleReceipt,\n    querySingleStorage,\n    queryTrade\n}","import {\n  PROOF_STATUS_INELIGIBLE_ACCOUNT_ID,\n  PROOF_STATUS_INIT,\n  PROOF_STATUS_INPUT_READY,\n  PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED,\n} from \"../constants/index.ts\";\nimport {\n  findBrevisRequestSentUTVFS,\n  findNotReadyReceipts, \n  findNotReadyStorages, \n  findNotReadyTrades, \n  findProofToUpload, \n  findRequestSentsUTVF, \n  findTxToBeSent, \n  findUserExistingUTVF, \n  findUserExistingUTVFByDate, \n  findUserTradeVolumeFees,\n  findUTVFToDownLoadProof,\n  findUTVFToUploadProof,\n  getDailyTrack,\n  insertDailyTrack,\n  insertUserTradeVolumeFee,\n  updateUserTradeVolumeFee,\n} from \"../db/index.ts\";\nimport { getAllTradesWithin30Day, getAccountTradesList, saveTrades } from \"../graphql/index.ts\";\nimport { sendUserTradeVolumeFeeProvingRequest, submitProofForBrevis, uploadUserTradeVolumeFeeProof } from \"../prover/index.ts\";\nimport { querySingleReceipt, querySingleStorage, queryTrade } from \"../rpc/index.ts\";\nimport { findDayStartTimestamp, findNextDay, getCurrentDay, UserTradeVolumeFee } from \"../server/type.ts\";\nimport moment from \"moment\";\nimport { brevisRequest, submitBrevisRequestTx, userSwapAmountApp } from \"../ether_interactions/index.ts\";\n\nexport async function prepareNewDayTradeClaims() {\n  try {\n    // Give 10 minutes buffer to avoid brevis gateway failure\n    const yesterday = Number((moment.utc(new Date()).subtract(10, \"m\").subtract(1, \"d\")).format('YYYYMMDD'))\n    var track = await getDailyTrack(BigInt(yesterday));\n    if (track != undefined && track != null && track) {\n      return;\n    }\n\n    const yesterdayStart = moment.utc(yesterday.toString(), \"YYYYMMDD\", true)\n    var tsStart = yesterdayStart.utc().unix()\n    var tsEnd = yesterdayStart.utc().add(1, \"d\").unix() - 1\n    var ts30DAgo = yesterdayStart.utc().subtract(29, \"d\").unix()\n\n    const eventStartDay = moment.utc(\"20240724\", \"YYYYMMDD\", true).utc().unix()\n\n    if (ts30DAgo < eventStartDay) {\n      ts30DAgo = eventStartDay\n    }\n    \n    const result = await getAllTradesWithin30Day(ts30DAgo, tsEnd)\n    if (result.error !== null) {\n      throw result.error\n    }\n\n    console.log(`${yesterday}, trades count: ${result.trades.length}`)\n\n    const accountTradesList = getAccountTradesList(result.trades)\n    for (var i = 0; i < accountTradesList.length; i++) {\n      const trades = accountTradesList[i].trades\n      const account = accountTradesList[i].account\n      if (trades.length === 0) {\n        continue\n      }\n\n      const claimableTrades = trades.filter(trade => {\n        return trade.timestamp >= tsStart && trade.timestamp <= tsEnd\n      })\n\n       // No available fee rebate trade\n      if (claimableTrades.length === 0) {\n        continue\n      }\n      \n      var utvf = await findUserExistingUTVFByDate(account, BigInt(yesterday));\n      if (utvf != undefined && utvf != null && utvf && Number(utvf.status) > 1)  {\n        // no need to update trade infos\n        continue;\n      } else if (utvf != undefined && utvf != null && utvf && Number(utvf.status) == 1) {\n        // no need to insert account trade infos\n      } else {\n        const src_chain_id = BigInt(process.env.SRC_CHAIN_ID ?? 10);\n        const dst_chain_id = BigInt(process.env.DST_CHAIN_ID ?? 10);\n  \n        utvf = await insertUserTradeVolumeFee(\n          src_chain_id,\n          dst_chain_id,\n          account,\n          trades[0].account,\n          BigInt(yesterday),\n        );\n      }\n     \n      const trade_ids = await saveTrades(trades, account)\n      const claimPeriod = await userSwapAmountApp.accountClaimPeriod(account)\n    \n      // Make sure start block number is bigger than claim period in contract\n      var startBlockNumber = claimableTrades[0].blockNumber\n\n      if (claimPeriod[1] > BigInt(startBlockNumber)) {\n        startBlockNumber = Number(claimPeriod[1]) + 1\n      }\n\n      utvf.start_blk_num = BigInt(startBlockNumber)\n      utvf.end_blk_num = BigInt(claimableTrades[claimableTrades.length - 1].blockNumber)\n      utvf.status = PROOF_STATUS_INPUT_READY\n      utvf.trade_ids = trade_ids\n\n      await updateUserTradeVolumeFee(utvf)\n    }\n\n    await insertDailyTrack(BigInt(yesterday))\n  } catch (error) {\n    console.error(\"failed to prepare new day trade claims\", error)\n  }\n}\n\nexport async function getReceiptInfos() {\n  try {\n    const receipts = await findNotReadyReceipts();\n    let promises = Array<Promise<void>>();\n    for (let i = 0; i < receipts.length; i++) {\n      promises.push(querySingleReceipt(receipts[i]));\n    }\n\n    await Promise.all(promises);\n  } catch (error) {\n    console.error(\"failed to get receipt infos\", error);\n  }\n}\n\nexport async function prepareTrades() {\n  try {\n    const trades = await findNotReadyTrades();\n    let promises = Array<Promise<void>>();\n    for (let i = 0; i < trades.length; i++) {\n      promises.push(queryTrade(trades[i]));\n    }\n\n    await Promise.all(promises);\n  } catch (error) {\n    console.error(\"failed to prepare trade\");\n  }\n}\n\nexport async function getStorageInfos() {\n  try {\n    const storages = await findNotReadyStorages();\n    let promises = Array<Promise<void>>();\n    for (let i = 0; i < storages.length; i++) {\n      promises.push(querySingleStorage(storages[i]));\n    }\n\n    await Promise.all(promises);\n  } catch (error) {\n    console.error(\"failed to get storage infos\");\n  }\n}\n\nexport async function prepareUserSwapAmountProof() {\n  try {\n    const utvfs = await findUserTradeVolumeFees(PROOF_STATUS_INPUT_READY);\n    let promises = Array<Promise<void>>();\n    for (let i = 0; i < utvfs.length; i++) {\n      promises.push(sendUserTradeVolumeFeeProvingRequest(utvfs[i]));\n    }\n    await Promise.all(promises);\n  } catch (error) {\n    console.error(\"failed to send user swap amount prove\", error);\n  }\n}\n\nexport async function uploadUserSwapAmountProof() {\n  try {\n    const utvfs = await findBrevisRequestSentUTVFS();\n    const pendingProofUploads = await findProofToUpload()\n    let promises = Array<Promise<void>>();\n    for (let i = 0; i < utvfs.length; i++) {\n      promises.push(uploadUserTradeVolumeFeeProof(utvfs[i]));\n    }\n    for (let i = 0; i < pendingProofUploads.length; i++) {\n      promises.push(uploadUserTradeVolumeFeeProof(pendingProofUploads[i]));\n    }\n    await Promise.all(promises);\n  } catch (error) {\n    console.error(\"failed to upload user swap amount proof\");\n  }\n}\n\nexport async function submitUserSwapAmountTx() {\n  try {\n    const utvfs = await findTxToBeSent();\n    let promises = Array<Promise<void>>();\n    for (let i = 0; i < utvfs.length; i++) {\n      promises.push(submitBrevisRequestTx(utvfs[i]));\n    }\n    await Promise.all(promises);\n  } catch (error) {\n\n  }\n}\n\nexport async function checkRequestStatusOnchain() {\n  try {\n    const yesterday = Number((moment.utc(new Date()).subtract(10, \"m\").subtract(1, \"d\")).format('YYYYMMDD'))\n    const utvfs = await findRequestSentsUTVF(BigInt(yesterday));\n    if (utvfs.length < 1) {\n      return \n    }\n    const utvf = utvfs[0]\n    const request = await brevisRequest.requests(utvf.brevis_query_hash)\n    if (request[0] === BigInt(0)) {\n      console.log(`request info not found for ${utvf.account}-${utvf.ymd}`)\n      utvf.request_sent = false\n    }\n    await updateUserTradeVolumeFee(utvf)\n  } catch (error) {\n    console.log(`${error}`)\n  }\n}\n\nexport async function uploadProofs() {\n  try {\n    const utvfs = await findUTVFToUploadProof();\n    let promises = Array<Promise<void>>();\n    for (let i = 0; i < utvfs.length; i++) {\n      promises.push(submitProofForBrevis(utvfs[i]));\n    }\n    await Promise.all(promises);\n  } catch (error) {\n\n  }\n}\n\n","// @ts-nocheck\nimport { server } from \"./server/index\";\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\nBigInt.prototype.toJSON = function () {\n  return this.toString();\n};\n\nserver;\n"],"mappings":"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","names":["uuidv4","uuidv4","trades","contracts","moment","import_ethers","contracts_exports","import_ethers","_abi","contracts_exports","contracts_exports","import_ethers","_abi","import_ethers","_abi","import_ethers","_abi","contracts_exports","import_ethers","_abi","_bytecode","isSuperArgs","import_ethers","_abi","import_ethers","_abi","import_ethers","_abi","_bytecode","isSuperArgs","import_ethers","_abi","_bytecode","isSuperArgs","FeeReimbursementApp__factory","i","import_moment","moment","moment","import_moment","express","dotenv"]}