{"version":3,"sources":["../src/server/index.ts","../src/db/index.ts","../src/constants/index.ts","../src/prover/index.ts","../src/query/index.ts","../src/ether_interactions/index.ts","../../contract/typechain/index.ts","../../contract/typechain/factories/Ownable__factory.ts","../../contract/typechain/factories/IERC20__factory.ts","../../contract/typechain/factories/BrevisApp__factory.ts","../../contract/typechain/factories/IBrevisProof__factory.ts","../../contract/typechain/factories/Tx__factory.ts","../../contract/typechain/factories/FeeReimbursementApp__factory.ts","../../contract/typechain/factories/IAccountModule__factory.ts","../src/brevis_request/BrevisRequest__factory.ts","../src/rpc/index.ts","../src/interval_jobs/index.ts","../src/index.ts"],"sourcesContent":["import express from \"express\";\nimport { findUserExistingUTVF, getUserTradeVolumeFee, insertUserTradeVolumeFee } from \"../db/index.ts\";\nimport {\n  PROOF_STATUS_ONCHAIN_VERIFIED,\n  PROOF_STATUS_PROOF_UPLOADED,\n  \n  FEE_REIMBURSEMENT_INFO_STATUS_INIT,\n  FEE_REIMBURSEMENT_INFO_STATUS_NEED_TO_SUBMIT_REQUEST,\n  FEE_REIMBURSEMENT_INFO_STATUS_UNDEFINED,\n  FEE_REIMBURSEMENT_INFO_STATUS_WAITING_FOR_RESULT,\n  FEE_REIMBURSEMENT_INFO_STATUS_FEE_REIMBURSED,\n  PROOF_STATUS_BREVIS_REQUEST_SUBMITTED,\n  FEE_REIMBURSEMENT_INFO_STATUS_INELIGIBLE_ACCOUNT_ID,\n  PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED,\n} from \"../constants/index.ts\";\nimport {\n  getReceiptInfos,\n  getStorageInfos,\n  prepareUserTradeVolumeFees,\n  queryUserSwapAmountInput,\n} from \"../interval_jobs/index.ts\";\nimport {\n  monitorFeeReimbursed,\n  monitorBrevisRequest,\n} from \"../ether_interactions/index.ts\";\nimport { UserTradeVolumeFee } from \"./type.ts\";\nimport { BigNumber } from \"ethers\";\n\nconst app = express();\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\napp.use((req, res, next) => {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Headers\", \"Content-Type\");\n  next();\n});\ngetReceiptInfos().then();\nsetInterval(getReceiptInfos, 1000);\ngetStorageInfos().then();\nsetInterval(getStorageInfos, 10000);\nprepareUserTradeVolumeFees().then();\nsetInterval(prepareUserTradeVolumeFees, 2000);\n\nmonitorFeeReimbursed();\nmonitorBrevisRequest();\n\napp.post(\"/kwenta/newTradeFeeReimbursement\", async (req, res) => {\n  try {\n    const { account, trade_year_month } = req.body;\n\n    const tym = Number(trade_year_month)\n\n    const month = tym % 100\n\n    const now = new Date();\n    const utcMonth = now.getUTCMonth() + 1 // 1--->12\n    const fullYear = now.getUTCFullYear()\n  \n    if (isNaN(tym) || tym < 202402 || (tym >= utcMonth + fullYear * 100) || month > 13) {\n      res.status(500);\n      res.send({ error: true, message: \"invalid claim trade time period\" });\n      return\n    }\n    \n    var utvf = await findUserExistingUTVF(account, BigInt(tym));\n    if (utvf != undefined && utvf != null && utvf) {\n      res.json({ query_id: utvf.id });\n      return;\n    }\n\n    const src_chain_id = BigInt(process.env.SRC_CHAIN_ID ?? 8453);\n    const dst_chain_id = BigInt(process.env.DST_CHAIN_ID ?? 8453);\n\n    var utvf = await insertUserTradeVolumeFee(\n      src_chain_id,\n      dst_chain_id,\n      account,\n      BigInt(tym),\n    );\n\n    console.log(\"New User Comes In: \", utvf.id, (new Date()).toLocaleString())\n\n    queryUserSwapAmountInput(utvf).then()\n    res.json({ query_id: utvf.id });\n  } catch (error) {\n    res.status(500);\n    res.send({ error: true, message: error });\n  }\n});\n\napp.get(\"/kwenta/getTradeFeeReimbursementInfo\", async (req, res) => {\n  try {\n    const { query_id } = req.query;\n    if (query_id?.toString() == null || query_id?.toString() == undefined) {\n      res.status(500);\n      res.send({ error: true, message: \"query id not found\" });\n      return;\n    }\n    const utvf = await getUserTradeVolumeFee(query_id?.toString()) as UserTradeVolumeFee\n\n    if (utvf == null || utvf == undefined) {\n      res.status(500);\n      res.send({ error: true, message: \"info not found\" });\n      return;\n    }\n\n    let message = \"\";\n    let status = FEE_REIMBURSEMENT_INFO_STATUS_UNDEFINED;\n    let brevisRequest =\n      \"\" + process.env.BREVIS_REQUEST;\n    if (Number(utvf.status) == Number(PROOF_STATUS_ONCHAIN_VERIFIED)) {\n      status = FEE_REIMBURSEMENT_INFO_STATUS_FEE_REIMBURSED;\n      message = \"Fee reimbursed\";\n    } else if ( Number(utvf.status) == Number(PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED)) {\n      status = FEE_REIMBURSEMENT_INFO_STATUS_NEED_TO_SUBMIT_REQUEST;\n      message =\n        \"You need to submit SendRequest transaction with query_hash and query_fee on brevis request contract.\" +\n        \"And use address(\" +\n        process.env.FEE_REIMBURSEMENT +\n        \") as _callback\";\n    } else if ( Number(utvf.status) == Number(PROOF_STATUS_BREVIS_REQUEST_SUBMITTED)) {\n      status = FEE_REIMBURSEMENT_INFO_STATUS_WAITING_FOR_RESULT;\n      message = \"Brevis is preparing swap amount proof\";\n    } else if ( Number(utvf.status) == Number(PROOF_STATUS_PROOF_UPLOADED)) {\n      status = FEE_REIMBURSEMENT_INFO_STATUS_INELIGIBLE_ACCOUNT_ID\n      message = \"No order settled info found for this account id\";\n    } else {\n      status = FEE_REIMBURSEMENT_INFO_STATUS_INIT;\n      message = \"Wait until query_hash and query_fee is ready\";\n    }\n\n    var volume = utvf.volume\n    if (volume === \"\") {\n      volume = \"0\"\n    }\n    const volumeBN = BigNumber.from(volume).div(BigNumber.from(\"1000000000000000000\"))\n\n    var fee = utvf.fee\n    if (fee === \"\") {\n      fee = \"0\"\n    }\n    var feeBN = BigNumber.from(fee).div(BigNumber.from(\"1000000000000000000\"))\n\n    var tier = -1\n\n    if (volumeBN.toNumber() > 100000000) {\n      tier = 3\n      feeBN = feeBN.mul(BigNumber.from(9)).div(BigNumber.from(10))\n    } else if (volumeBN.toNumber() > 10000000) {\n      tier = 2    \n      feeBN = feeBN.mul(BigNumber.from(75)).div(BigNumber.from(100))\n    } else if (volumeBN.toNumber() > 1000000) {\n      tier = 1\n      feeBN = feeBN.mul(BigNumber.from(5)).div(BigNumber.from(10))\n    } else if (volumeBN.toNumber() > 100000) {\n      tier = 0\n      feeBN = feeBN.mul(BigNumber.from(2)).div(BigNumber.from(10))\n    }\n\n    res.json({\n      status: status,\n      query_hash: utvf.brevis_query_hash,\n      query_fee: utvf.brevis_query_fee,\n      brevis_request_contract_address: brevisRequest,\n      message: message,\n      tier: tier,\n      fee_to_reimbursed: feeBN.toString(),\n    });\n  } catch (error) {\n    res.status(500);\n    res.send({ error: true, message: error });\n  }\n});\n\nconst port = 11084;\nexport const server = app.listen(port, () =>\n  console.log(`\nðŸš€ Server ready at: http://localhost:${port}!`)\n);\n","import { PrismaClient } from \"@prisma/client\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  PROOF_STATUS_BREVIS_REQUEST_SUBMITTED,\n  PROOF_STATUS_INIT,\n  PROOF_STATUS_INPUT_READY,\n  STATUS_INIT,\n  STATUS_READY,\n} from \"../constants/index.ts\";\nimport { equal } from \"assert\";\n\nconst prisma = new PrismaClient();\n\nasync function insertReceipt(tx_hash: string): Promise<any> {\n  return prisma.receipt.create({\n    data: {\n      id: uuidv4(),\n      tx_hash: tx_hash?.toLocaleLowerCase(),\n      status: STATUS_INIT,\n      create_time: new Date(),\n      update_time: new Date(),\n    },\n  });\n}\n\nasync function updateReceipt(\n  id: string,\n  status: bigint,\n  data: string,\n): Promise<any> {\n  return prisma.receipt.update({\n    where: {\n      id: id,\n    },\n    data: {\n      status: status,\n      update_time: new Date(),\n      data: data,\n    },\n  });\n}\n\nasync function getReceipt(id: string): Promise<any> {\n  return prisma.receipt.findUnique({\n    where: {\n      id: id,\n    },\n  });\n}\n\nasync function findNotReadyReceipts(): Promise<any> {\n  var now = new Date();\n  return prisma.receipt.findMany({\n    take: 10,\n    where: {\n      status: STATUS_INIT,\n      update_time: {\n        lte: now,\n      },\n    },\n  });\n}\n\nasync function insertStorage(account: string, key: string, blkNumber: bigint): Promise<any> {\n  return prisma.storage.create({\n    data: {\n      id: uuidv4(),\n      account: account,\n      key: key,\n      blk_number: BigInt(blkNumber),\n      status: STATUS_INIT,\n      create_time: new Date(),\n      update_time: new Date(),\n    },\n  });\n}\n\nasync function updateStorage(\n  id: string,\n  status: bigint,\n  value: string,\n  data: string,\n): Promise<any> {\n  return prisma.storage.update({\n    where: {\n      id: id,\n    },\n    data: {\n      status: status,\n      value: value,\n      update_time: new Date(),\n      data: data,\n    },\n  });\n}\n\nasync function getStorage(id: string): Promise<any> {\n  return prisma.storage.findUnique({\n    where: {\n      id: id,\n    },\n  });\n}\n\nasync function findNotReadyStorages(): Promise<any> {\n  var now = new Date();\n  now.setSeconds(now.getSeconds() - 10);\n  return prisma.receipt.findMany({\n    take: 10,\n    where: {\n      status: STATUS_INIT,\n      update_time: {\n        lte: now,\n      },\n    },\n  });\n}\n\nasync function insertUserTradeVolumeFee(\n  src_chain_id: bigint,\n  dst_chain_id: bigint,\n  account: string,\n  trade_year_month: bigint,\n): Promise<any> {\n  return prisma.user_trade_volume_fee.create({\n    data: {\n      id: uuidv4(),\n      src_chain_id: src_chain_id,\n      dst_chain_id: dst_chain_id,\n      account: account?.toLocaleLowerCase(),\n      trade_year_month: trade_year_month,\n      status: PROOF_STATUS_INIT,\n      create_time: new Date(),\n      update_time: new Date(),\n    },\n  });\n}\n\nasync function updateUserTradeVolumeFee(utvf: any): Promise<any> {\n  return prisma.user_trade_volume_fee.update({\n    where: {\n      id: utvf.id,\n    },\n    data: {\n      volume: utvf.volume,\n      fee: utvf.fee,\n      receipt_ids: utvf.receipt_ids,\n      storage_ids: utvf.storage_ids,\n      brevis_query_hash: utvf.brevis_query_hash?.toLocaleLowerCase(),\n      brevis_query_fee: utvf.brevis_query_fee,\n      proof: utvf.proof,\n      status: utvf.status,\n      update_time: new Date(),\n      prover_id: utvf.prover_id,\n    },\n  });\n}\n\nasync function getUserTradeVolumeFee(id: string): Promise<any> {\n  return prisma.user_trade_volume_fee.findUnique({\n    where: {\n      id: id,\n    },\n  });\n}\n\nasync function findUserExistingUTVF(\n  account: string,\n  trade_year_month: bigint\n): Promise<any> {\n  return prisma.user_trade_volume_fee.findFirst({\n    where: {\n      account: account?.toLocaleLowerCase(),\n      trade_year_month: {\n        equals: trade_year_month,\n      }\n    },\n  });\n}\n\nasync function findUserTradeVolumeFees(status: bigint): Promise<any> {\n  return prisma.user_trade_volume_fee.findMany({\n    take: 10,\n    where: {\n      status: {\n        equals: status,\n      },\n    },\n  });\n}\n\nasync function updateBrevisRequestStatus(\n  brevis_query_hash: string\n): Promise<any> {\n  return prisma.user_trade_volume_fee.updateMany({\n    where: {\n      brevis_query_hash: brevis_query_hash?.toLocaleLowerCase(),\n      status: {\n        lt: PROOF_STATUS_BREVIS_REQUEST_SUBMITTED,\n      }\n    },\n    data: {\n      status: PROOF_STATUS_BREVIS_REQUEST_SUBMITTED,\n    },\n  });\n}\n\n\nexport {\n  insertReceipt,\n  updateReceipt,\n  getReceipt,\n  findNotReadyReceipts,\n  insertUserTradeVolumeFee,\n  updateUserTradeVolumeFee,\n  getUserTradeVolumeFee,\n  findUserExistingUTVF,\n  findUserTradeVolumeFees,\n  updateBrevisRequestStatus,\n  insertStorage,\n  updateStorage,\n  getStorage,\n  findNotReadyStorages,\n};\n","const STATUS_UNKNOWN = BigInt(0)\nconst STATUS_INIT = BigInt(1)\nconst STATUS_READY = BigInt(2)\n\nconst PROOF_STATUS_UNKNOWN = BigInt(0)\nconst PROOF_STATUS_INIT = BigInt(1)\nconst PROOF_STATUS_INPUT_REQUEST_SENT = BigInt(2)\nconst PROOF_STATUS_INPUT_READY = BigInt(3)\nconst PROOF_STATUS_PROVING_SENT = BigInt(4)\nconst PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED = BigInt(5)\nconst PROOF_STATUS_PROOF_UPLOAD_SENT = BigInt(7)\nconst PROOF_STATUS_PROOF_UPLOADED = BigInt(8)\nconst PROOF_STATUS_BREVIS_QUERY_ERROR = BigInt(9)\nconst PROOF_STATUS_BREVIS_REQUEST_SUBMITTED = BigInt(10)\nconst PROOF_STATUS_ONCHAIN_VERIFIED = BigInt(11)\nconst PROOF_STATUS_INELIGIBLE_ACCOUNT_ID = BigInt(99)\n\nconst FEE_REIMBURSEMENT_INFO_STATUS_UNDEFINED = 0\nconst FEE_REIMBURSEMENT_INFO_STATUS_INIT = 1\nconst FEE_REIMBURSEMENT_INFO_STATUS_INELIGIBLE_ACCOUNT_ID = 2\nconst FEE_REIMBURSEMENT_INFO_STATUS_NEED_TO_SUBMIT_REQUEST = 3\nconst FEE_REIMBURSEMENT_INFO_STATUS_WAITING_FOR_RESULT = 4\nconst FEE_REIMBURSEMENT_INFO_STATUS_FEE_REIMBURSED = 5\n\nconst PoolAddr = \"0x9616bdc926880053545675561afba23ad0455e47\" // \n\nfunction hexStringToUint8Array(hexString: string){\n    if (hexString.length % 2 !== 0){\n      throw \"Invalid hexString\";\n    }/*from  w w w.  j  av a 2s  . c  o  m*/\n    var arrayBuffer = new Uint8Array(hexString.length / 2);\n  \n    for (var i = 0; i < hexString.length; i += 2) {\n      var byteValue = parseInt(hexString.substr(i, 2), 16);\n      if (isNaN(byteValue)){\n        throw \"Invalid hexString\";\n      }\n      arrayBuffer[i/2] = byteValue;\n    }\n  \n    return arrayBuffer;\n}\n\nexport {\n    STATUS_UNKNOWN,\n    STATUS_INIT,\n    STATUS_READY,\n    PROOF_STATUS_UNKNOWN,\n    PROOF_STATUS_INIT,\n    PROOF_STATUS_INPUT_REQUEST_SENT,\n    PROOF_STATUS_INPUT_READY,\n    PROOF_STATUS_PROVING_SENT,\n    PROOF_STATUS_PROOF_UPLOAD_SENT,\n    PROOF_STATUS_PROOF_UPLOADED,\n    PROOF_STATUS_BREVIS_QUERY_ERROR,\n    PROOF_STATUS_BREVIS_REQUEST_SUBMITTED,\n    PROOF_STATUS_ONCHAIN_VERIFIED,\n    PROOF_STATUS_INELIGIBLE_ACCOUNT_ID,\n    PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED,\n    \n    FEE_REIMBURSEMENT_INFO_STATUS_UNDEFINED,\n    FEE_REIMBURSEMENT_INFO_STATUS_INIT,\n    FEE_REIMBURSEMENT_INFO_STATUS_INELIGIBLE_ACCOUNT_ID,\n    FEE_REIMBURSEMENT_INFO_STATUS_NEED_TO_SUBMIT_REQUEST,\n    FEE_REIMBURSEMENT_INFO_STATUS_WAITING_FOR_RESULT,\n    FEE_REIMBURSEMENT_INFO_STATUS_FEE_REIMBURSED,\n    PoolAddr,\n    hexStringToUint8Array\n}\n","import * as sdk from \"brevis-sdk-typescript\";\nimport { Receipt, UserTradeVolumeFee } from \"../server/type.ts\";\nimport {\n  getReceipt,\n  getUserTradeVolumeFee,\n  updateUserTradeVolumeFee,\n} from \"../db/index.ts\";\nimport {\n  PROOF_STATUS_BREVIS_QUERY_ERROR,\n  PROOF_STATUS_BREVIS_REQUEST_SUBMITTED,\n  PROOF_STATUS_INPUT_READY,\n  PROOF_STATUS_PROOF_UPLOAD_SENT,\n  PROOF_STATUS_PROOF_UPLOADED,\n  PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED,\n  PROOF_STATUS_PROVING_SENT,\n  STATUS_READY,\n} from \"../constants/index.ts\";\nimport { BigNumber, ethers } from \"ethers\";\n\nconst {\n  Brevis,\n  ErrCode,\n  ProofRequest,\n  Prover,\n  ReceiptData,\n  StorageData,\n  asUint248,\n  asUint521,\n} = sdk;\n\nconst prover = new Prover(\"localhost:33248\");\nconst brevis = new Brevis(\"appsdk.brevis.network:11080\");\n\nconst buildUserTradeVolumeFeeProofReq = async (utvf: UserTradeVolumeFee) => {\n  const proofReq = new ProofRequest();\n  const ids = utvf.receipt_ids.split(\",\");\n  let promises = Array<Promise<Receipt | undefined>>();\n\n  for (let i = 0; i < ids.length; i++) {\n    promises.push(\n      getReceipt(ids[i]).then((value) => {\n        const r = value as Receipt;\n        if (r === undefined || r === null) {\n          return undefined;\n        } else {\n          if (r.should_be_filtered_out) {\n            return undefined;\n          } else {\n            return r;\n          }\n        }\n      })\n    );\n  }\n\n  const results = await Promise.all(promises);\n\n  let index = 0;\n  var earlistBlk = 0\n  var latestBlk = 1\n\n  for (let i = 0; i < results.length; i++) {\n    const receipt = results[i];\n    if (receipt === undefined) {\n      continue;\n    }\n    if (receipt.status !== STATUS_READY) {\n      throw new Error(\"receipts not ready\"); \n    }\n    const data = JSON.parse(receipt.data);\n    const blkNumber= Number(data.block_num)\n    if (isNaN(blkNumber)) {\n      console.error(\"invalid receipt block number\", data)\n    }\n\n    if (earlistBlk > blkNumber) {\n      earlistBlk = blkNumber\n    } \n    if (latestBlk < blkNumber) {\n      latestBlk = blkNumber\n    }\n    proofReq.addReceipt(\n      new ReceiptData({\n        block_num: Number(data.block_num),\n        tx_hash: receipt.tx_hash,\n        fields: [\n          new sdk.Field(data.fields[0]),\n          new sdk.Field(data.fields[1]),\n          new sdk.Field(data.fields[2]),\n          new sdk.Field(data.fields[3]), \n        ],\n      }),\n      index++\n    );\n  }\n\n  const accountIdHex = BigNumber.from(utvf.account).toHexString()\n  \n  proofReq.setCustomInput({\n    AccountId: asUint248(accountIdHex),\n    StartBlkNum: asUint248(earlistBlk.toString()),\n    EndBlkNum: asUint248(latestBlk.toString()),\n\t\tYearMonth:   asUint248(utvf.trade_year_month.toString()),\n  });\n\n  return proofReq;\n};\n\nasync function sendUserTradeVolumeFeeProvingRequest(utvfOld: UserTradeVolumeFee) {\n  const utvf = await getUserTradeVolumeFee(utvfOld.id)\n  if (utvf.status != PROOF_STATUS_INPUT_READY) {\n    return \n  }\n\n  utvf.status = PROOF_STATUS_PROVING_SENT\n  await updateUserTradeVolumeFee(utvf)\n  try {\n    console.log(\"Start to Build Proof Request: \", utvf.id, (new Date()).toLocaleString())\n    const proofReq = await buildUserTradeVolumeFeeProofReq(utvf);\n    console.log(\"User Circuit Proof Request Sent: \", utvf.id, (new Date()).toLocaleString())\n\n    const proofRes = await prover.proveAsync(proofReq);\n    console.log(\"proofRes proof_id\",proofRes.proof_id, (new Date()).toLocaleString())\n    // error handling\n    if (proofRes.has_err) {\n      const err = proofRes.err;\n      switch (err.code) {\n        case ErrCode.ERROR_INVALID_INPUT:\n          console.error(\"invalid receipt/storage/transaction input:\", err.msg);\n          // handle invalid data input...\n          break;\n        case ErrCode.ERROR_INVALID_CUSTOM_INPUT:\n          console.error(\"invalid custom input:\", err.msg);\n          // handle invalid custom input assignment...\n          break;\n        case ErrCode.ERROR_FAILED_TO_PROVE:\n          console.error(\"failed to prove:\", err.msg);\n          // handle failed to prove case...\n          break;\n        default:\n          break;\n      }\n      return;\n    }\n\n    try {\n      const prepareQueryResponse = await brevis.prepareQuery(\n        proofReq, \n        proofRes.circuit_info, \n        Number(utvf.src_chain_id),\n        Number(utvf.dst_chain_id)\n      )\n      console.log('Ready to submit brevis query hash', prepareQueryResponse.query_hash, (new Date()).toLocaleString());\n      utvf.status = PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED\n      utvf.brevis_query_fee = prepareQueryResponse.fee\n      utvf.brevis_query_hash = prepareQueryResponse.query_hash\n      utvf.prover_id = proofRes.proof_id\n\n      updateUserTradeVolumeFee(utvf).then(value => {\n        uploadUserTradeVolumeFeeProof(value)\n      }).then();\n    } catch (error) {\n      console.error(\"Failed to prepare query\", error, utvf.id)\n      utvf.status = PROOF_STATUS_BREVIS_QUERY_ERROR\n      updateUserTradeVolumeFee(utvf)\n    }\n  } catch (error) {\n    console.log(\"Prove failed back to PROOF_STATUS_INPUT_READY: \", utvf.id, (new Date()).toLocaleString())\n    utvf.status = PROOF_STATUS_INPUT_READY\n    await updateUserTradeVolumeFee(utvf)\n  }\n}\n\nasync function uploadUserTradeVolumeFeeProof(utvfOld: UserTradeVolumeFee) {\n  const utvf = await getUserTradeVolumeFee(utvfOld.id)\n  if (utvf.status != PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED) {\n    return \n  }\n\n  utvf.status = PROOF_STATUS_PROOF_UPLOAD_SENT\n  await updateUserTradeVolumeFee(utvf)\n\n  try {\n    console.log(\"Proof upload sent: \", utvf.id, utvf.prover_id, (new Date()).toLocaleString())\n    const getProofRes = await prover.getProof(utvf.prover_id)\n    if (getProofRes.has_err) {\n      console.error(getProofRes.err.msg);\n      utvf.status = PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED\n      await updateUserTradeVolumeFee(utvf)\n      return;\n    } else if (getProofRes.proof.length === 0) {\n      utvf.status = PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED\n      await updateUserTradeVolumeFee(utvf)\n      return;\n    }\n\n    await brevis.submitProof(\n      utvf.brevis_query_hash,\n      Number(utvf.dst_chain_id),\n      getProofRes.proof\n    );\n   \n    utvf.status = PROOF_STATUS_PROOF_UPLOADED;\n\n    console.log(\"Proof uploaded: \", utvf.id, (new Date()).toLocaleString())\n\n    updateUserTradeVolumeFee(utvf);\n  } catch (err) {\n    utvf.status = PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED;\n    updateUserTradeVolumeFee(utvf);\n    console.error(err);\n  }\n}\n\nexport {\n  sendUserTradeVolumeFeeProvingRequest,\n  uploadUserTradeVolumeFeeProof,\n};\n","import { QueryParameter, DuneClient } from \"@duneanalytics/client-sdk\";\nimport * as dotenv from \"dotenv\";\nimport { BigNumber } from \"ethers\";\n\ndotenv.config();\nconst client = new DuneClient(process.env.DUNE_API_KEY ?? \"\");\nconst queryId = 3677895;\n\ntype DuneResult = {\n  txs: Array<string>,\n  fee: string,\n  volume: string,\n}\nexport async function QueryOrderTxsByAccount(\n  from: string,\n  end: string,\n  accountId: string\n): Promise<DuneResult> {\n  try {\n    console.log(\"Client send dune query: \", (new Date()).toLocaleString())\n    const results = await client.runQuery({\n      queryId: queryId,\n      query_parameters: [\n        QueryParameter.text(\"from\", from),\n        QueryParameter.text(\"to\", end),\n        QueryParameter.text(\"account_id\", accountId),\n      ],\n    });\n    const txs = Array<string>();\n    var fee = BigNumber.from(0)\n    var volume = BigNumber.from(0)\n\n    results.result?.rows.map((record) => {\n      const tx_hash = record[\"evt_tx_hash\"];\n      const totalFees = record[\"totalFees\"]\n      const sizeDelta = record[\"sizeDelta\"]\n      const fillPrice = record[\"fillPrice\"]\n\n      fee = fee.add(BigNumber.from(totalFees))\n      volume = volume.add(\n        BigNumber.from(sizeDelta).abs().mul(BigNumber.from(fillPrice)).div(BigNumber.from(\"1000000000000000000\"))\n      )\n\n      if (typeof tx_hash === \"string\" || tx_hash instanceof String) {\n        txs.push(tx_hash.toString());\n      } else {\n        console.error(\"unknown type of dune result: \", tx_hash);\n      }\n    });\n    return {txs: txs, fee: fee.toString(), volume: volume.toString()};\n  } catch (error) {\n    console.log(\"dune error\", error);\n    return {txs: [], fee: \"0\", volume: \"0\"};\n  }\n}","import { BigNumber, ethers } from \"ethers\";\nimport * as typeChain from \"../../../contract/typechain/index.ts\";\n\nimport { BrevisRequest__factory } from \"../brevis_request/BrevisRequest__factory.ts\";\nimport {\n  findUserExistingUTVF,\n  updateBrevisRequestStatus,\n  updateUserTradeVolumeFee,\n} from \"../db/index.ts\";\nimport {\n  PROOF_STATUS_ONCHAIN_VERIFIED,\n  PROOF_STATUS_PROOF_UPLOADED,\n  STATUS_READY,\n} from \"../constants/index.ts\";\n\nimport * as dotenv from \"dotenv\";\nimport { UserTradeVolumeFee } from \"../server/type.ts\";\ndotenv.config();\n\nconst { FeeReimbursementApp__factory } = typeChain;\n// DstChain Provider uses Arbitrum Sepolia RPC to submit transaction on AS\nconst dstChainProvider = new ethers.providers.JsonRpcProvider(\n  process.env.DEST_RPC ?? \"\"\n);\n// Source Provider uses Arbirtrum RPC to retrieve Aribitrum data\nconst sourceChainProvider = new ethers.providers.JsonRpcProvider(\n  process.env.SOURCE_RPC ?? \"\"\n);\nconst wallet = new ethers.Wallet(\n  process.env.PRIVATE_KEY ?? \"\",\n  dstChainProvider\n);\n\nconst brevisRequest = BrevisRequest__factory.connect(\n  process.env.BREVIS_REQUEST ?? \"\",\n  wallet\n);\nconst userSwapAmountApp = FeeReimbursementApp__factory.connect(\n  process.env.FEE_REIMBURSEMENT ?? \"\",\n  wallet\n);\n\nasync function monitorFeeReimbursed() {\n  // event FeeReimbursed(address indexed user, uint128 accountId, uint24 tradeYearMonth, uint248 feeRebate)\n  userSwapAmountApp.on(\"FeeReimbursed\", (user, accountId, tradeYearMonth, fee) => {\n    const userAddress = user as string;\n    const accountIdBN = accountId as BigNumber;\n    const tradeYearMonthBN = tradeYearMonth as BigNumber;\n\n    if (\n      userAddress === undefined ||\n      userAddress === null ||\n      tradeYearMonthBN === undefined ||\n      tradeYearMonthBN === null ||\n      accountIdBN === undefined ||\n      accountIdBN === null\n    ) {\n      console.log(\n        \"reimbursement triggered with unexpected value:: \",\n        user,\n        accountId,\n        tradeYearMonth,\n        fee\n      );\n      return;\n    }\n\n    findUserExistingUTVF(accountIdBN.toString(), BigInt(tradeYearMonthBN.toNumber()))\n      .then(utvf => {\n        if (utvf) {\n          utvf.status = PROOF_STATUS_ONCHAIN_VERIFIED\n          return updateUserTradeVolumeFee(utvf)\n        }\n      }).catch(error => {\n        console.error(\n          \"failed to update user swap amount\",\n          user,\n          accountId,\n          tradeYearMonth,\n          error\n        );\n      })\n  });\n}\n\nasync function monitorBrevisRequest() {\n  brevisRequest.on(\"RequestSent\", (requestId: string) => {\n    updateBrevisRequestStatus(requestId)\n      .then()\n      .catch((error) => {\n        console.error(\n          \"failed to update brevis request on-chain status\",\n          requestId,\n          error\n        );\n      });\n  });\n}\n\nexport {\n  dstChainProvider,\n  sourceChainProvider,\n  wallet,\n  brevisRequest,\n  userSwapAmountApp,\n  monitorFeeReimbursed,\n  monitorBrevisRequest,\n};\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexport type { Ownable } from \"./Ownable\";\nexport type { IERC20 } from \"./IERC20\";\nexport type { BrevisApp } from \"./BrevisApp\";\nexport type { IBrevisProof } from \"./IBrevisProof\";\nexport type { Tx } from \"./Tx\";\nexport type { FeeReimbursementApp } from \"./FeeReimbursementApp\";\nexport type { IAccountModule } from \"./IAccountModule\";\n\nexport { Ownable__factory } from \"./factories/Ownable__factory\";\nexport { IERC20__factory } from \"./factories/IERC20__factory\";\nexport { BrevisApp__factory } from \"./factories/BrevisApp__factory\";\nexport { IBrevisProof__factory } from \"./factories/IBrevisProof__factory\";\nexport { Tx__factory } from \"./factories/Tx__factory\";\nexport { FeeReimbursementApp__factory } from \"./factories/FeeReimbursementApp__factory\";\nexport { IAccountModule__factory } from \"./factories/IAccountModule__factory\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\nimport type { Ownable, OwnableInterface } from \"../Ownable\";\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nexport class Ownable__factory {\n  static readonly abi = _abi;\n  static createInterface(): OwnableInterface {\n    return new utils.Interface(_abi) as OwnableInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): Ownable {\n    return new Contract(address, _abi, signerOrProvider) as Ownable;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\nimport type { IERC20, IERC20Interface } from \"../IERC20\";\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nexport class IERC20__factory {\n  static readonly abi = _abi;\n  static createInterface(): IERC20Interface {\n    return new utils.Interface(_abi) as IERC20Interface;\n  }\n  static connect(address: string, signerOrProvider: Signer | Provider): IERC20 {\n    return new Contract(address, _abi, signerOrProvider) as IERC20;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\nimport type { BrevisApp, BrevisAppInterface } from \"../BrevisApp\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_appCircuitOutput\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"brevisCallback\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"brevisProof\",\n    outputs: [\n      {\n        internalType: \"contract IBrevisProof\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"smtRoot\",\n            type: \"bytes32\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint64\",\n                name: \"blkNum\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"receiptIndex\",\n                type: \"uint64\",\n              },\n              {\n                components: [\n                  {\n                    components: [\n                      {\n                        internalType: \"uint8\",\n                        name: \"valueFromTopic\",\n                        type: \"uint8\",\n                      },\n                      {\n                        internalType: \"uint64\",\n                        name: \"valueIndex\",\n                        type: \"uint64\",\n                      },\n                      {\n                        internalType: \"address\",\n                        name: \"contractAddress\",\n                        type: \"address\",\n                      },\n                      {\n                        internalType: \"bytes32\",\n                        name: \"logTopic0\",\n                        type: \"bytes32\",\n                      },\n                    ],\n                    internalType: \"struct Brevis.LogExtraInfo\",\n                    name: \"logExtraInfo\",\n                    type: \"tuple\",\n                  },\n                  {\n                    internalType: \"uint64\",\n                    name: \"logIndex\",\n                    type: \"uint64\",\n                  },\n                  {\n                    internalType: \"bytes32\",\n                    name: \"value\",\n                    type: \"bytes32\",\n                  },\n                ],\n                internalType: \"struct Brevis.LogInfo[5]\",\n                name: \"logs\",\n                type: \"tuple[5]\",\n              },\n            ],\n            internalType: \"struct Brevis.ReceiptInfo[]\",\n            name: \"receipts\",\n            type: \"tuple[]\",\n          },\n          {\n            components: [\n              {\n                internalType: \"bytes32\",\n                name: \"blockHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"slot\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"slotValue\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockNumber\",\n                type: \"uint64\",\n              },\n            ],\n            internalType: \"struct Brevis.StorageInfo[]\",\n            name: \"stores\",\n            type: \"tuple[]\",\n          },\n          {\n            components: [\n              {\n                internalType: \"bytes32\",\n                name: \"leafHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"blockHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockNumber\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockTime\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"bytes\",\n                name: \"leafRlpPrefix\",\n                type: \"bytes\",\n              },\n            ],\n            internalType: \"struct Brevis.TransactionInfo[]\",\n            name: \"txs\",\n            type: \"tuple[]\",\n          },\n        ],\n        internalType: \"struct Brevis.ExtractInfos\",\n        name: \"_extractInfos\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"validateRequest\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nexport class BrevisApp__factory {\n  static readonly abi = _abi;\n  static createInterface(): BrevisAppInterface {\n    return new utils.Interface(_abi) as BrevisAppInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): BrevisApp {\n    return new Contract(address, _abi, signerOrProvider) as BrevisApp;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\nimport type { IBrevisProof, IBrevisProofInterface } from \"../IBrevisProof\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getProofAppData\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getProofData\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"commitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"length\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"vkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appCommitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appVkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"smtRoot\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Brevis.ProofData\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"hasProof\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_proofWithPubInputs\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"_withAppProof\",\n        type: \"bool\",\n      },\n    ],\n    name: \"submitProof\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"smtRoot\",\n            type: \"bytes32\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint64\",\n                name: \"blkNum\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"receiptIndex\",\n                type: \"uint64\",\n              },\n              {\n                components: [\n                  {\n                    components: [\n                      {\n                        internalType: \"uint8\",\n                        name: \"valueFromTopic\",\n                        type: \"uint8\",\n                      },\n                      {\n                        internalType: \"uint64\",\n                        name: \"valueIndex\",\n                        type: \"uint64\",\n                      },\n                      {\n                        internalType: \"address\",\n                        name: \"contractAddress\",\n                        type: \"address\",\n                      },\n                      {\n                        internalType: \"bytes32\",\n                        name: \"logTopic0\",\n                        type: \"bytes32\",\n                      },\n                    ],\n                    internalType: \"struct Brevis.LogExtraInfo\",\n                    name: \"logExtraInfo\",\n                    type: \"tuple\",\n                  },\n                  {\n                    internalType: \"uint64\",\n                    name: \"logIndex\",\n                    type: \"uint64\",\n                  },\n                  {\n                    internalType: \"bytes32\",\n                    name: \"value\",\n                    type: \"bytes32\",\n                  },\n                ],\n                internalType: \"struct Brevis.LogInfo[5]\",\n                name: \"logs\",\n                type: \"tuple[5]\",\n              },\n            ],\n            internalType: \"struct Brevis.ReceiptInfo[]\",\n            name: \"receipts\",\n            type: \"tuple[]\",\n          },\n          {\n            components: [\n              {\n                internalType: \"bytes32\",\n                name: \"blockHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"slot\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"slotValue\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockNumber\",\n                type: \"uint64\",\n              },\n            ],\n            internalType: \"struct Brevis.StorageInfo[]\",\n            name: \"stores\",\n            type: \"tuple[]\",\n          },\n          {\n            components: [\n              {\n                internalType: \"bytes32\",\n                name: \"leafHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"blockHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockNumber\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockTime\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"bytes\",\n                name: \"leafRlpPrefix\",\n                type: \"bytes\",\n              },\n            ],\n            internalType: \"struct Brevis.TransactionInfo[]\",\n            name: \"txs\",\n            type: \"tuple[]\",\n          },\n        ],\n        internalType: \"struct Brevis.ExtractInfos\",\n        name: \"_info\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"validateRequest\",\n    outputs: [],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nexport class IBrevisProof__factory {\n  static readonly abi = _abi;\n  static createInterface(): IBrevisProofInterface {\n    return new utils.Interface(_abi) as IBrevisProofInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IBrevisProof {\n    return new Contract(address, _abi, signerOrProvider) as IBrevisProof;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { Tx, TxInterface } from \"../Tx\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"bytes\",\n        name: \"txRaw\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"decodeTx\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint64\",\n            name: \"chainId\",\n            type: \"uint64\",\n          },\n          {\n            internalType: \"uint64\",\n            name: \"nonce\",\n            type: \"uint64\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"gasTipCap\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"gasFeeCap\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"gas\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"value\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"data\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct Tx.TxInfo\",\n        name: \"info\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x6080806040523461001a57610e5d9081610020823930815050f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c63dae029d31461002a57600080fd5b602090816003193601126103d95767ffffffffffffffff916004358381116103d557366023820112156103d55780600401359384116103d557602481019060248536920101116103d5576102e7946102dd926102cc9261008861052e565b9660ff926100bd6002856100b66100b06100a2878961059c565b356001600160f81b03191690565b60f81c90565b16146105b9565b6100e26100dd6100d86100d1858088610605565b36916106b4565b610a18565b610a80565b926101166101086100fb6100f5876106eb565b51610b98565b67ffffffffffffffff1690565b67ffffffffffffffff168b52565b6101386101286100fb6100f5876106f8565b67ffffffffffffffff168b840152565b6101446100f585610708565b898b01526101546100f585610718565b60608b01526101656100f585610728565b60808b015261018f61017f61017986610738565b51610b7a565b6001600160a01b031660a08c0152565b61019b6100f585610748565b60c08b01526101b26101ac85610758565b51610c06565b60e08b01526101cc6101c66100f586610769565b60ff1690565b956101f06101e56101ac6101ea6101e56101ac8a61077a565b6107b0565b9761078b565b958a61020a6102056100b06100a289886105aa565b6107e9565b9582871660010361039f576102366101c66102316100b061022b858a610644565b90610876565b610801565b965b61ffff8816603781116102eb5750506102c093926102a0876102926102b8958561028c61027d61026b6102a8998e610655565b9d9093610277816108a2565b91610663565b929093519c8d9687019161090a565b9161090a565b03601f1981018852876104fd565b859716610825565b60f81b6001600160f81b03191690565b901a91610986565b535b8151910120610996565b6001600160a01b0316610100840152565b519182918261041d565b0390f35b909697945083959391925011156000146103655761035f93828261032161031b6100a2610333966103519861059c565b98610814565b9261032b826108a2565b931691610680565b8c5195869491929160f81b6001600160f81b03191690888601610954565b03601f1981018352826104fd565b906102c2565b61035f93828261032161031b6100a2610381966103519861059c565b8c5195869491929160f01b6001600160f01b03191690888601610918565b6103cf6103ca6103c46103be6103b76101c68c610814565b858a610627565b90610836565b60f01c90565b610862565b96610238565b8480fd5b8280fd5b919082519283825260005b848110610409575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016103e8565b6104c3906020815261043c60208201845167ffffffffffffffff169052565b602083015167ffffffffffffffff1660408201526040830151606082015260608301516080820152608083015160a082015261048860a084015160c08301906001600160a01b03169052565b60c083015160e082015260e0830151610120906104b26101009183838601526101408501906103dd565b9401516001600160a01b0316910152565b90565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176104f857604052565b6104c6565b90601f8019910116810190811067ffffffffffffffff8211176104f857604052565b6040519061052c826104dc565b565b60405190610120820182811067ffffffffffffffff8211176104f857604052816101006000918281528260208201528260408201528260608201528260808201528260a08201528260c0820152606060e08201520152565b634e487b7160e01b600052603260045260246000fd5b90156105a55790565b610586565b90600110156105a55760010190565b156105c057565b60405162461bcd60e51b815260206004820152601660248201527f6e6f7420612044796e616d6963466565547854797065000000000000000000006044820152606490fd5b909291928360011161062257831161062257600101916000190190565b600080fd5b909291928360021161062257831161062257600201916001190190565b906003116106225760020190600190565b906002116106225790600290565b909291928360031161062257831161062257600301916002190190565b90939293848311610622578411610622578101920390565b67ffffffffffffffff81116104f857601f01601f191660200190565b9291926106c082610698565b916106ce60405193846104fd565b829481845281830111610622578281602093846000960137010152565b8051156105a55760200190565b8051600110156105a55760400190565b8051600210156105a55760600190565b8051600310156105a55760800190565b8051600410156105a55760a00190565b8051600510156105a55760c00190565b8051600610156105a55760e00190565b8051600710156105a5576101000190565b8051600910156105a5576101400190565b8051600a10156105a5576101600190565b8051600b10156105a5576101800190565b80518210156105a55760209160051b010190565b6020815191015190602081106107c4575090565b6000199060200360031b1b1690565b634e487b7160e01b600052601160045260246000fd5b60ff60f6199116019060ff82116107fc57565b6107d3565b60ff6042199116019060ff82116107fc57565b60ff166002019060ff82116107fc57565b60ff1660c0019060ff82116107fc57565b6001600160f01b0319903581811693926002811061085357505050565b60020360031b82901b16169150565b61ffff90811660421901919082116107fc57565b6001600160f81b0319903581811693926001811061089357505050565b60010360031b82901b16169150565b6042198101919082116107fc57565b60bf198101919082116107fc57565b607f198101919082116107fc57565b60200390602082116107fc57565b6000198101919082116107fc57565b60f6198101919082116107fc57565b60b6198101919082116107fc57565b908092918237016000815290565b6001600160f81b0319909116815260f960f81b60018201526001600160f01b031990911660028201526004929182908483013701016000815290565b6001600160f81b03199182168152601f60fb1b6001820152911660028201526003929182908483013701016000815290565b8051600110156105a55760210190565b919260ff8116601b81106109e5575b509160209360809260ff60009560405194855216868401526040830152606082015282805260015afa156109d95760005190565b6040513d6000823e3d90fd5b601b9150929192019060ff82116107fc57919060206109a5565b60405190610a0c826104dc565b60006020838281520152565b610a206109ff565b50602081519160405192610a33846104dc565b835201602082015290565b67ffffffffffffffff81116104f85760051b60200190565b90600182018092116107fc57565b919082018092116107fc57565b60001981146107fc5760010190565b610a8981610b53565b1561062257610a9781610c53565b610aa081610a3e565b91610aae60405193846104fd565b818352601f19610abd83610a3e565b0160005b818110610b3c575050610ae2602080920151610adc81610d3b565b90610a64565b6000905b838210610af4575050505090565b610b3081610b04610b3693610cb5565b90610b0d61051f565b8281528187820152610b1f868a61079c565b52610b2a858961079c565b50610a64565b91610a71565b90610ae6565b602090610b476109ff565b82828801015201610ac1565b805115610b7457602060c09101515160001a10610b6f57600190565b600090565b50600090565b601581510361062257610b946001600160a01b0391610b98565b1690565b80518015159081610bce575b501561062257610bb390610bda565b90519060208110610bc2575090565b6020036101000a900490565b60219150111538610ba4565b906020820191610bea8351610d3b565b9251908382018092116107fc57519283039283116107fc579190565b80511561062257610c196104c391610bda565b610c2581939293610698565b92610c3360405194856104fd565b818452601f19610c4283610698565b013660208601378360200190610daa565b805115610b745760009060208101908151610c6d81610d3b565b81018091116107fc579151905181018091116107fc5791905b828110610c935750905090565b610c9c81610cb5565b81018091116107fc57610caf9091610a71565b90610c86565b805160001a906080821015610ccb575050600190565b60b8821015610ce65750610ce16104c3916108c0565b610a56565b9060c0811015610d0a5760b51991600160b783602003016101000a91015104010190565b9060f8821015610d215750610ce16104c3916108b1565b60010151602082900360f7016101000a90040160f5190190565b5160001a6080811015610d4e5750600090565b60b881108015610d85575b15610d645750600190565b60c0811015610d7957610ce16104c3916108fb565b610ce16104c3916108ec565b5060c08110158015610d59575060f88110610d59565b601f81116107fc576101000a90565b929091928315610e215792915b602093848410610dec57805182528481018091116107fc579381018091116107fc5791601f1981019081116107fc5791610db7565b9193509180610dfa57505050565b610e0e610e09610e13926108cf565b610d9b565b6108dd565b905182518216911916179052565b5091505056fea2646970667358221220ba3a7502e3392bb3a68d4f7c6365ab0ae0054a0db643438919a1cfa0dc1a851a64736f6c63430008140033\";\n\ntype TxConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: TxConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class Tx__factory extends ContractFactory {\n  constructor(...args: TxConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n    this.contractName = \"Tx\";\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<Tx> {\n    return super.deploy(overrides || {}) as Promise<Tx>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): Tx {\n    return super.attach(address) as Tx;\n  }\n  connect(signer: Signer): Tx__factory {\n    return super.connect(signer) as Tx__factory;\n  }\n  static readonly contractName: \"Tx\";\n  public readonly contractName: \"Tx\";\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): TxInterface {\n    return new utils.Interface(_abi) as TxInterface;\n  }\n  static connect(address: string, signerOrProvider: Signer | Provider): Tx {\n    return new Contract(address, _abi, signerOrProvider) as Tx;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type {\n  FeeReimbursementApp,\n  FeeReimbursementAppInterface,\n} from \"../FeeReimbursementApp\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_brevisProof\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint128\",\n        name: \"accountId\",\n        type: \"uint128\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint24\",\n        name: \"tradeYearMonth\",\n        type: \"uint24\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint248\",\n        name: \"feeRebate\",\n        type: \"uint248\",\n      },\n    ],\n    name: \"FeeReimbursed\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"accountModule\",\n    outputs: [\n      {\n        internalType: \"contract IAccountModule\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_appCircuitOutput\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"brevisCallback\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"brevisProof\",\n    outputs: [\n      {\n        internalType: \"contract IBrevisProof\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rewardToken\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rewardTokenDecimals\",\n    outputs: [\n      {\n        internalType: \"uint24\",\n        name: \"\",\n        type: \"uint24\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IAccountModule\",\n        name: \"_accountModule\",\n        type: \"address\",\n      },\n    ],\n    name: \"setAccountModule\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_rewardToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint24\",\n        name: \"_decimals\",\n        type: \"uint24\",\n      },\n    ],\n    name: \"setRewardToken\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_vkHash\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"setVkHash\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"smtRoot\",\n            type: \"bytes32\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint64\",\n                name: \"blkNum\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"receiptIndex\",\n                type: \"uint64\",\n              },\n              {\n                components: [\n                  {\n                    components: [\n                      {\n                        internalType: \"uint8\",\n                        name: \"valueFromTopic\",\n                        type: \"uint8\",\n                      },\n                      {\n                        internalType: \"uint64\",\n                        name: \"valueIndex\",\n                        type: \"uint64\",\n                      },\n                      {\n                        internalType: \"address\",\n                        name: \"contractAddress\",\n                        type: \"address\",\n                      },\n                      {\n                        internalType: \"bytes32\",\n                        name: \"logTopic0\",\n                        type: \"bytes32\",\n                      },\n                    ],\n                    internalType: \"struct Brevis.LogExtraInfo\",\n                    name: \"logExtraInfo\",\n                    type: \"tuple\",\n                  },\n                  {\n                    internalType: \"uint64\",\n                    name: \"logIndex\",\n                    type: \"uint64\",\n                  },\n                  {\n                    internalType: \"bytes32\",\n                    name: \"value\",\n                    type: \"bytes32\",\n                  },\n                ],\n                internalType: \"struct Brevis.LogInfo[5]\",\n                name: \"logs\",\n                type: \"tuple[5]\",\n              },\n            ],\n            internalType: \"struct Brevis.ReceiptInfo[]\",\n            name: \"receipts\",\n            type: \"tuple[]\",\n          },\n          {\n            components: [\n              {\n                internalType: \"bytes32\",\n                name: \"blockHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"slot\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"slotValue\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockNumber\",\n                type: \"uint64\",\n              },\n            ],\n            internalType: \"struct Brevis.StorageInfo[]\",\n            name: \"stores\",\n            type: \"tuple[]\",\n          },\n          {\n            components: [\n              {\n                internalType: \"bytes32\",\n                name: \"leafHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"blockHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockNumber\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockTime\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"bytes\",\n                name: \"leafRlpPrefix\",\n                type: \"bytes\",\n              },\n            ],\n            internalType: \"struct Brevis.TransactionInfo[]\",\n            name: \"txs\",\n            type: \"tuple[]\",\n          },\n        ],\n        internalType: \"struct Brevis.ExtractInfos\",\n        name: \"_extractInfos\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"validateRequest\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"vkHash\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x60a0346100b757601f6114c038819003918201601f19168301916001600160401b038311848410176100bc578084926020946040528339810103126100b757516001600160a01b0390818116908190036100b7576080526000543360018060a01b0319821617600055604051913391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36113ed90816100d382396080518181816102b0015281816109c10152610cb70152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001257600080fd5b60003560e01c80630258daac146100e757806319d20391146100e25780634fe840f5146100dd578063715018a6146100d85780637859f6d9146100d357806379d6b6a2146100ce5780637c08aa74146100c95780638da5cb5b146100c45780639bdcecd1146100bf578063ada323ff146100ba578063c7f5aaa0146100b5578063f2fde38b146100b05763f7c618c1146100ab57600080fd5b610a94565b6109e5565b6109a1565b61090f565b6108e9565b6108c2565b6107ec565b610248565b610219565b6101ab565b61018d565b610166565b610102565b6001600160a01b038116036100fd57565b600080fd5b346100fd5760203660031901126100fd5760043561011f816100ec565b6001600160a01b039061013782600054163314610abb565b1673ffffffffffffffffffffffffffffffffffffffff196002541617600255600080f35b60009103126100fd57565b346100fd5760003660031901126100fd5760206001600160a01b0360025416604051908152f35b346100fd5760003660031901126100fd576020600354604051908152f35b346100fd576000806003193601126102165780805473ffffffffffffffffffffffffffffffffffffffff196001600160a01b038216916101ec338414610abb565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b346100fd5760203660031901126100fd576102406001600160a01b03600054163314610abb565b600435600355005b346100fd576040806003193601126100fd5767ffffffffffffffff6024358181116100fd57366023820112156100fd5780600401359182116100fd57602481019060248336920101116100fd578251632cc27dc960e11b8152600480359082015283816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561037d57600091610350575b506102f53684846106c1565b602081519101200361030d5761030b9250610f2c565b005b6064835162461bcd60e51b815260206004820152602060248201527f6661696c656420746f206f70656e206f757470757420636f6d6d69746d656e746044820152fd5b908482813d8311610376575b610366818361044d565b81010312610216575051386102e9565b503d61035c565b610c9e565b6024359067ffffffffffffffff821682036100fd57565b359067ffffffffffffffff821682036100fd57565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff8211176103e057604052565b6103ae565b60a0810190811067ffffffffffffffff8211176103e057604052565b6080810190811067ffffffffffffffff8211176103e057604052565b67ffffffffffffffff81116103e057604052565b6040810190811067ffffffffffffffff8211176103e057604052565b90601f8019910116810190811067ffffffffffffffff8211176103e057604052565b67ffffffffffffffff81116103e05760051b60200190565b81601f820112156100fd5780359061049e8261046f565b926040926104ae8451958661044d565b8085526020918280870192600a1b850101938185116100fd578301915b8483106104db5750505050505090565b61040080848403126100fd578651906104f3826103c4565b6104fc85610399565b8252610509868601610399565b8683015283605f860112156100fd57875190610524826103e5565b8501818582116100fd579187939194928a8801905b8682106105565750506104009450898201528152019201916104cb565b908092949693955087039060c082126100fd578b5190610575826103c4565b60808093126100fd578c519161058a83610401565b843560ff811681036100fd5760c0948f948e956105d69382526105ae878a01610399565b8783015280890135906105c0826100ec565b8201526060808901359082015283528601610399565b838201528d60a0860135908201528152019101889492959391610539565b81601f820112156100fd5780359061060b8261046f565b9260409061061b8251958661044d565b838552602091828601918360a0809702860101948186116100fd578401925b85841061064b575050505050505090565b86848303126100fd578487918451610662816103e5565b8635815282870135610673816100ec565b838201528587013586820152606080880135908201526080610696818901610399565b9082015281520193019261063a565b67ffffffffffffffff81116103e057601f01601f191660200190565b9291926106cd826106a5565b916106db604051938461044d565b8294818452818301116100fd578281602093846000960137010152565b81601f820112156100fd5780359061070f8261046f565b9260409261071f8451958661044d565b808552602093848087019260051b850101938385116100fd57858101925b85841061074e575050505050505090565b67ffffffffffffffff9084358281116100fd5783019060a09283601f19848a0301126100fd57855192610780846103e5565b8a8101358452868101358b85015260609461079c868301610399565b888601526080956107ae878401610399565b908601528101359182116100fd57019187603f840112156100fd5789936107dd898589888098013591016106c1565b9082015281520193019261073d565b346100fd576003196060368201126100fd57610806610382565b6044359067ffffffffffffffff928383116100fd5760809083360301126100fd576040519061083482610401565b8260040135825260248301358481116100fd576108579060043691860101610487565b602083015260448301358481116100fd5761087890600436918601016105f4565b604083015260648301359384116100fd5761089f6108ac9360046108be96369201016106f8565b6060830152600435610caa565b60405190151581529081906020820190565b0390f35b346100fd5760003660031901126100fd5760206001600160a01b0360005416604051908152f35b346100fd5760003660031901126100fd57602062ffffff60015460a01c16604051908152f35b346100fd5760403660031901126100fd5760043561092c816100ec565b60243562ffffff811681036100fd577fffffffffffffffffff00000000000000000000000000000000000000000000006001600160a01b0361097381600054163314610abb565b76ffffff00000000000000000000000000000000000000006001549360a01b16931691161717600155600080f35b346100fd5760003660031901126100fd5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b346100fd5760203660031901126100fd57600435610a02816100ec565b6001600160a01b03610a1981600054163314610abb565b811615610a295761030b90610b06565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b346100fd5760003660031901126100fd5760206001600160a01b0360015416604051908152f35b15610ac257565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600054906001600160a01b03809116918273ffffffffffffffffffffffffffffffffffffffff19821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b90815180825260208080930193019160005b828110610b7b575050505090565b835180518652808301516001600160a01b031686840152604080820151908701526060808201519087015260809081015167ffffffffffffffff169086015260a09094019392810192600101610b6d565b919082519283825260005b848110610bf8575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610bd7565b90815180825260208092019182818360051b85019501936000915b848310610c375750505050505090565b9091929394958480610c8e83856001950387528a5180518252838101518483015267ffffffffffffffff6040818184015116908401526060908183015116908301526080809101519160a080928201520190610bcc565b9801930193019194939290610c27565b6040513d6000823e3d90fd5b916001600160a01b0390817f00000000000000000000000000000000000000000000000000000000000000001691823b156100fd57929391906040948551958694631f022a9d60e21b8652600486015267ffffffffffffffff809216602486015260609081604487015260e486019284516064880152602093848601519460808060848b01528651809352816101048b0197019360009b8c925b858410610db6575050505050505092859392610d8892610d7686958401519260631993848883030160a4890152610b5b565b920151908483030160c4850152610c0c565b03915afa801561037d57610d9d575b50600190565b80610daa610db09261041d565b8061015b565b38610d97565b9193869a9b9c508d8882989b939597999a9b518781511685528784820151168486015201518a84019091905b8b8d60058410610e0d575050505050610400600192019a019401918d9b9a9998979694959391610d44565b9160c091859693600195965190808d83519060ff82511687528882015116888701528d8582015116858701520151908401528b85820151168a840152015160a082015201930191018892610de2565b634e487b7160e01b600052601160045260246000fd5b906001600160f81b038092169160148302169180830460141490151715610e9557565b610e5c565b906001600160f81b038092169160328302169180830460321490151715610e9557565b906001600160f81b0380921691604b83021691808304604b1490151715610e9557565b906001600160f81b0380921691605a83021691808304605a1490151715610e9557565b908160209103126100fd5751610f18816100ec565b90565b9081156001838004141715610e9557565b90610f3691611372565b91926001600160f81b039260009284166a52b7d2dcc80cd2e40000008111156110fd5750610f79919250610f6990610ee0565b6001600160f81b03606491160490565b905b600092821680610ff3575b50604080516fffffffffffffffffffffffffffffffff909516855262ffffff90911660208501526001600160f81b03909116908301526001600160a01b0316907fab5fbf0441b04b7a6b969c24bbf1821c6ec51adaa0bd99ceec902fb0fc2a2f499080606081015b0390a2565b909261101661100a6002546001600160a01b031690565b6001600160a01b031690565b60405163bf60c31d60e01b81526fffffffffffffffffffffffffffffffff871660048201529390602090859060249082905afa94851561037d577fab5fbf0441b04b7a6b969c24bbf1821c6ec51adaa0bd99ceec902fb0fc2a2f49956001600160a01b0395610fee94916110cf575b508094869182811661109f575b5050509294509250610f86565b6110c7926110c06110b260015494610f1b565b670de0b6b3a7640000900490565b9216611175565b388080611092565b6110f0915060203d81116110f6575b6110e8818361044d565b810190610f03565b38611085565b503d6110de565b6a084595161401484a0000008111156111265750611120919250610f6990610ebd565b90610f7b565b69d3c21bcecceda10000008111156111485750611120919250610f6990610e9a565b69152d02c7e14af68000001061115f575b50610f7b565b61116e919250610f6990610e72565b9038611159565b91604051916020938484019263a9059cbb60e01b84526001600160a01b0380931660248601526044850152604484526111ad84610401565b1690604051926111bc84610431565b8484527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656485850152823b1561122f57611208939260009283809351925af16112026112fe565b9061132e565b8051908161121557505050565b8261122d93611228938301019101611274565b61128c565b565b60405162461bcd60e51b815260048101869052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b908160209103126100fd575180151581036100fd5790565b1561129357565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608490fd5b3d15611329573d9061130f826106a5565b9161131d604051938461044d565b82523d6000602084013e565b606090565b9091901561133a575090565b81511561134a5750805190602001fd5b60405162461bcd60e51b81526020600482015290819061136e906024830190610bcc565b0390fd5b90806013116100fd57601082013560e81c92816023116100fd57601383013560801c92826042116100fd57602381013560081c926061116100fd576042013560081c9056fea2646970667358221220fe97d0be557d7597c7527ad40d30f6e2226ed8aa9adcd9484e2fd66112bdaafd64736f6c63430008140033\";\n\ntype FeeReimbursementAppConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: FeeReimbursementAppConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class FeeReimbursementApp__factory extends ContractFactory {\n  constructor(...args: FeeReimbursementAppConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n    this.contractName = \"FeeReimbursementApp\";\n  }\n\n  deploy(\n    _brevisProof: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<FeeReimbursementApp> {\n    return super.deploy(\n      _brevisProof,\n      overrides || {}\n    ) as Promise<FeeReimbursementApp>;\n  }\n  getDeployTransaction(\n    _brevisProof: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(_brevisProof, overrides || {});\n  }\n  attach(address: string): FeeReimbursementApp {\n    return super.attach(address) as FeeReimbursementApp;\n  }\n  connect(signer: Signer): FeeReimbursementApp__factory {\n    return super.connect(signer) as FeeReimbursementApp__factory;\n  }\n  static readonly contractName: \"FeeReimbursementApp\";\n  public readonly contractName: \"FeeReimbursementApp\";\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): FeeReimbursementAppInterface {\n    return new utils.Interface(_abi) as FeeReimbursementAppInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): FeeReimbursementApp {\n    return new Contract(address, _abi, signerOrProvider) as FeeReimbursementApp;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\nimport type {\n  IAccountModule,\n  IAccountModuleInterface,\n} from \"../IAccountModule\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"uint128\",\n        name: \"accountId\",\n        type: \"uint128\",\n      },\n    ],\n    name: \"getAccountOwner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nexport class IAccountModule__factory {\n  static readonly abi = _abi;\n  static createInterface(): IAccountModuleInterface {\n    return new utils.Interface(_abi) as IAccountModuleInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IAccountModule {\n    return new Contract(address, _abi, signerOrProvider) as IAccountModule;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { BrevisRequest, BrevisRequestInterface } from \"./BrevisRequest\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_feeCollector\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IBrevisProof\",\n        name: \"_brevisProof\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n    ],\n    name: \"FeeCollectorUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"RequestFulfilled\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"requestId\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"fee\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"callback\",\n        type: \"address\",\n      },\n    ],\n    name: \"RequestSent\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"from\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"to\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"RequestTimeoutUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"brevisProof\",\n    outputs: [\n      {\n        internalType: \"contract IBrevisProof\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"chargeFee\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_to\",\n        type: \"address\",\n      },\n    ],\n    name: \"collectFee\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"feeCollector\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_proof\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"_withAppProof\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_appCircuitOutput\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"fulfillRequest\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"queryRequestStatus\",\n    outputs: [\n      {\n        internalType: \"enum BrevisRequest.RequestStatus\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"refund\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"requestTimeout\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"requests\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"fee\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"refundee\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"callback\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum BrevisRequest.RequestStatus\",\n        name: \"status\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_refundee\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_callback\",\n        type: \"address\",\n      },\n    ],\n    name: \"sendRequest\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_feeCollector\",\n        type: \"address\",\n      },\n    ],\n    name: \"setFeeCollector\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_timeout\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setRequestTimeout\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    stateMutability: \"payable\",\n    type: \"receive\",\n  },\n];\n\nconst _bytecode =\n  \"0x6080346100c057601f610d9638819003918201601f19168301916001600160401b038311848410176100c55780849260409485528339810103126100c05780516001600160a01b0391828216918290036100c05760200151908282168092036100c0576000549060018060a01b0319913383821617600055604051943391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a38160015416176001556003541617600355610cba90816100dc8239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040818152600480361015610021575b505050361561001f57600080fd5b005b600092833560e01c9081633f20b4c91461097b57508063622b6af41461091a5780636a96173514610700578063715018a6146106a0578381637249fbb614610600575080637ff7b0d2146105735780638da5cb5b1461054d5780639d866985146104e9578063a42dce8014610470578063b6979c3e1461043a578063c415b95c14610412578063c7f5aaa0146103ea578063da47dc32146101d5578063e713b4c9146101b15763f2fde38b0361001157346101ad5760203660031901126101ad576100ea6109e0565b908354906001600160a01b0380831693610105338614610a19565b169384156101445750506001600160a01b031916821783557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b8382346101d15760203660031901126101d1576101ce9035610b49565b80f35b5080fd5b50919060603660031901126101d1578235906101ef6109ca565b90604435916001600160a01b038084168094036103e657848652602091878352838720546103a35781169081156103605760025442019081421161034d5784519160a0830183811067ffffffffffffffff82111761033a5786528252600384830192348452868101948552606081019488865260808201948b86528a8c528c8852888c209251835551600183015583600283019151166001600160a01b031982541617905501925116825491516003811015610327577fffffffffffffffffffffff0000000000000000000000000000000000000000009092161760a09190911b74ff00000000000000000000000000000000000000001617905581519384523390840152349083015260608201527f4eede03ca33645529b4d82428b024149165298c901cf7453f68eb43bd3d3b65890608090a180f35b634e487b7160e01b895260218a52602489fd5b634e487b7160e01b8a5260418b5260248afd5b634e487b7160e01b885260118952602488fd5b835162461bcd60e51b8152808901849052601560248201527f726566756e646565206e6f742070726f766964656400000000000000000000006044820152606490fd5b835162461bcd60e51b8152808901849052601860248201527f7265717565737420616c726561647920696e20717565756500000000000000006044820152606490fd5b8580fd5b5050346101d157816003193601126101d1576020906001600160a01b03600354169051908152f35b5050346101d157816003193601126101d1576020906001600160a01b03600154169051908152f35b50346101ad5760203660031901126101ad5760ff6003836020958461046e95358252875220015460a01c16915180926109f6565bf35b5050346101d15760203660031901126101d1577f5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f38906104ad6109e0565b6001600160a01b036104c3818654163314610a19565b80600154921690816001600160a01b03198416176001558351921682526020820152a180f35b50346101ad5760203660031901126101ad578160a0938261046e93358252602052208054926001820154916001600160a01b039160038360028401541692015493815196875260208701528501528116606084015260ff6080840191851c166109f6565b5050346101d157816003193601126101d1576001600160a01b0360209254169051908152f35b50346101ad57816003193601126101ad5761058c6109ca565b916001600160a01b036001541633036105bd57508280806101ce948194359061c350f16105b7610abd565b50610c38565b906020606492519162461bcd60e51b8352820152601160248201527f6e6f742066656520636f6c6c6563746f720000000000000000000000000000006044820152fd5b8084843461069c57602036600319011261069c5780358084528160205261062b838520541515610afd565b80845281602052828420805442111561069857848080808460039961066b965560016001600160a01b036002830154169101549061c350f16105b7610abd565b84526020528220017402000000000000000000000000000000000000000060ff60a01b1982541617905580f35b8480fd5b5050fd5b83346106fd57806003193601126106fd578080546001600160a01b03196001600160a01b038216916106d3338414610a19565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b509190346101d15760a03660031901126101d15767ffffffffffffffff833560243582811690819003610698576044358381116103e6576107449036908801610997565b949060643594851515809603610905576084359081116109055761076b9036908a01610997565b939095896001600160a01b03936107a685600354169187519b8c968795630979240d60e21b8752860152606060248601526064850191610a9c565b926044830152818b60209b8c9503925af19081156109105788916108df575b50840361089c5786976107d785610b49565b8488528087526003838920017401000000000000000000000000000000000000000060ff60a01b198254161790557f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e6878451878152a1848852865260038288200154169384610844578680f35b86956108756108839288958551958694850198633ceb5b5160e11b8a52602486015260448501526064840191610a9c565b03601f198101835282610a64565b51925af150610890610abd565b50803880808080808680f35b815162461bcd60e51b8152808901879052601d60248201527f72657175657374496420616e642070726f6f66206e6f74206d617463680000006044820152606490fd5b90508681813d8311610909575b6108f68183610a64565b810103126109055751386107c5565b8780fd5b503d6108ec565b83513d8a823e3d90fd5b5090346101ad5760203660031901126101ad577f87a73c061f18ffd513249d1d727921e40e348948b01e2979efb36ef4f5204a6391356109656001600160a01b038554163314610a19565b600254908060025582519182526020820152a180f35b8490346101d157816003193601126101d1576020906002548152f35b9181601f840112156109c55782359167ffffffffffffffff83116109c557602083818601950101116109c557565b600080fd5b602435906001600160a01b03821682036109c557565b600435906001600160a01b03821682036109c557565b906003821015610a035752565b634e487b7160e01b600052602160045260246000fd5b15610a2057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90601f8019910116810190811067ffffffffffffffff821117610a8657604052565b634e487b7160e01b600052604160045260246000fd5b908060209392818452848401376000828201840152601f01601f1916010190565b3d15610af8573d9067ffffffffffffffff8211610a865760405191610aec601f8201601f191660200184610a64565b82523d6000602084013e565b606090565b15610b0457565b60405162461bcd60e51b815260206004820152601460248201527f72657175657374206e6f7420696e2071756575650000000000000000000000006044820152606490fd5b60009080825260209060048252610b6560408420541515610afd565b6024826001600160a01b0360035416604051928380926371e8f36b60e11b82528660048301525afa908115610c2d578491610bf3575b5015610bae578252600490526040812055565b60405162461bcd60e51b815260048101839052601360248201527f70726f6f66206e6f742067656e657261746564000000000000000000000000006044820152606490fd5b90508281813d8311610c26575b610c0a8183610a64565b81010312610c2257518015158103610c225738610b9b565b8380fd5b503d610c00565b6040513d86823e3d90fd5b15610c3f57565b60405162461bcd60e51b815260206004820152601260248201527f73656e64206e6174697665206661696c656400000000000000000000000000006044820152606490fdfea26469706673582212201905409e4cdfc7fb6b946c9212735c55a3478272e9a45a4b96ed82c94b4d1ba164736f6c63430008140033\";\n\ntype BrevisRequestConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: BrevisRequestConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class BrevisRequest__factory extends ContractFactory {\n  constructor(...args: BrevisRequestConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n    this.contractName = \"BrevisRequest\";\n  }\n\n  deploy(\n    _feeCollector: string,\n    _brevisProof: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<BrevisRequest> {\n    return super.deploy(\n      _feeCollector,\n      _brevisProof,\n      overrides || {}\n    ) as Promise<BrevisRequest>;\n  }\n  getDeployTransaction(\n    _feeCollector: string,\n    _brevisProof: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(\n      _feeCollector,\n      _brevisProof,\n      overrides || {}\n    );\n  }\n  attach(address: string): BrevisRequest {\n    return super.attach(address) as BrevisRequest;\n  }\n  connect(signer: Signer): BrevisRequest__factory {\n    return super.connect(signer) as BrevisRequest__factory;\n  }\n  static readonly contractName: \"BrevisRequest\";\n  public readonly contractName: \"BrevisRequest\";\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): BrevisRequestInterface {\n    return new utils.Interface(_abi) as BrevisRequestInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): BrevisRequest {\n    return new Contract(address, _abi, signerOrProvider) as BrevisRequest;\n  }\n}\n","import { BigNumber, ethers } from \"ethers\";\nimport { STATUS_READY } from \"../constants/index.ts\";\nimport { updateReceipt, updateStorage } from \"../db/index.ts\";\nimport { sourceChainProvider } from \"../ether_interactions/index.ts\";\n\nasync function querySingleReceipt(receipt: any) {\n    return sourceChainProvider\n      .getTransactionReceipt(receipt.tx_hash)\n      .catch((error) => {\n        console.log(error, error);\n      })\n      .then((transactionReceipt) => {\n        if (transactionReceipt == null || transactionReceipt == undefined) {\n          console.debug(\"tx receipt not found\", receipt.id, receipt.tx_hash);\n          return;\n        }\n        let logsFound = false;\n        let data = \"\";\n        transactionReceipt.logs.forEach((log, i) => {\n          if (log.topics.length < 3) {\n            return \n          }\n\n          let logAddress = log.address.toLowerCase()\n          let topic0 = log.topics[0].toLowerCase();\n          \n          if (\n            logAddress ===\n              \"0x0A2AF931eFFd34b81ebcc57E3d3c9B1E1dE1C9Ce\".toLowerCase() &&\n            topic0.toLowerCase() ===\n              \"0x460080a757ec90719fe90ab2384c0196cdeed071a9fd7ce1ada43481d96b7db5\"\n          ) {\n            logsFound = true;\n            data = JSON.stringify({\n              block_num: transactionReceipt.blockNumber,\n              tx_hash: transactionReceipt.transactionHash,\n              fields: [\n                // accountId\n                {\n                  contract: logAddress,\n                  log_index: i,\n                  event_id: topic0,\n                  is_topic: true,\n                  field_index: 2,\n                  value: log.topics[2].toLowerCase(),\n                },\n                // fillPrice\n                {\n                  contract: logAddress,\n                  log_index: i,\n                  event_id: topic0,\n                  is_topic: false,\n                  field_index: 0,\n                  value: \"0x\" + log.data.replace(\"0x\", \"\").slice(0, 64),\n                },\n                // sizeDelta\n                {\n                  contract: logAddress,\n                  log_index: i,\n                  event_id: topic0,\n                  is_topic: false,\n                  field_index: 3,\n                  value: \"0x\" + log.data.replace(\"0x\", \"\").slice(64 * 3, 64 * 4),\n                },  \n                // totalFees\n                {\n                  contract: logAddress,\n                  log_index: i,\n                  event_id: topic0,\n                  is_topic: false,\n                  field_index: 5,\n                  value: \"0x\" + log.data.replace(\"0x\", \"\").slice(64 * 5, 64 * 6),\n                },   \n              ],\n            });\n          }\n        });\n  \n        if (logsFound) {\n          updateReceipt(\n            receipt.id,\n            STATUS_READY,\n            data,\n          );\n        }\n      }, null);\n}\n\nasync function querySingleStorage(storage: any) {\n  return sourceChainProvider.getStorageAt(storage.account, storage.key, Number(storage.blk_number)).then((value) => {\n    if (value == null || value == void 0) {\n      console.debug(\"storage not found\", storage.id, storage.tx_hash);\n      return;\n    }\n    updateStorage(\n      storage.id,\n      STATUS_READY,\n      value,\n      JSON.stringify({\n        account: storage.account,\n        key: storage.key,\n        value,\n        blk_number: storage.blk_number\n      })\n    );\n  }, null);\n}\n\nexport {\n    querySingleReceipt,\n    querySingleStorage,\n}","import {\n  PROOF_STATUS_INELIGIBLE_ACCOUNT_ID,\n  PROOF_STATUS_INIT,\n  PROOF_STATUS_INPUT_READY,\n  PROOF_STATUS_INPUT_REQUEST_SENT,\n  PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED,\n} from \"../constants/index.ts\";\nimport {\n  findNotReadyReceipts, \n  findNotReadyStorages, \n  findUserTradeVolumeFees,\n  getUserTradeVolumeFee,\n  insertReceipt,\n  updateUserTradeVolumeFee,\n} from \"../db/index.ts\";\nimport { postSwapsQuery } from \"../graphql/index.ts\";\nimport { sendUserTradeVolumeFeeProvingRequest, uploadUserTradeVolumeFeeProof } from \"../prover/index.ts\";\nimport { QueryOrderTxsByAccount } from \"../query/index.ts\";\nimport { querySingleReceipt, querySingleStorage } from \"../rpc/index.ts\";\n\nexport async function getReceiptInfos() {\n  try {\n    const receipts = await findNotReadyReceipts();\n    let promises = Array<Promise<void>>();\n    for (let i = 0; i < receipts.length; i++) {\n      promises.push(querySingleReceipt(receipts[i]));\n    }\n\n    await Promise.all(promises);\n  } catch (error) {\n    console.error(\"failed to get receipt infos\");\n  }\n}\n\nexport async function getStorageInfos() {\n  try {\n    const storages = await findNotReadyStorages();\n    let promises = Array<Promise<void>>();\n    for (let i = 0; i < storages.length; i++) {\n      promises.push(querySingleStorage(storages[i]));\n    }\n\n    await Promise.all(promises);\n  } catch (error) {\n    console.error(\"failed to get storage infos\");\n  }\n}\n\nexport async function prepareUserTradeVolumeFees() {\n  try {\n    let promises = Array<Promise<void>>();\n    promises.push(prepareUserSwapAmountInput());\n    promises.push(prepareUserSwapAmountProof());\n    promises.push(uploadUserSwapAmountProof());\n    await Promise.all(promises);\n  } catch (error) {\n    console.error(\"failed to prepare utvfs\", error);\n  }\n}\n\nasync function prepareUserSwapAmountInput() {\n  try {\n    const utvfs = await findUserTradeVolumeFees(PROOF_STATUS_INIT);\n    let promises = Array<Promise<void>>();\n    for (let i = 0; i < utvfs.length; i++) {\n      promises.push(queryUserSwapAmountInput(utvfs[i]));\n    }\n    await Promise.all(promises);\n  } catch (error) {\n    console.error(\"failed to prepare utvf input\", error);\n  }\n}\n\nexport async function queryUserSwapAmountInput(userSwapAmountOld: any) {\n  const userSwapAmount = await getUserTradeVolumeFee(userSwapAmountOld.id)\n\n  if (userSwapAmount.status != PROOF_STATUS_INIT) {\n    return \n  }\n  userSwapAmount.status = PROOF_STATUS_INPUT_REQUEST_SENT\n  await updateUserTradeVolumeFee(userSwapAmount)\n  const ym = Number(userSwapAmount.trade_year_month)\n\n  const month = ym % 100\n  const monthString = (month + \"\").padStart(2, \"0\")\n  const nextMonth = (month + 1) % 12\n  const nextMonthString = (nextMonth + \"\").padStart(2, \"0\")\n\n  const year0 = Math.floor(ym / 100)\n  var year1 = year0\n  if (nextMonth < month) {\n    year1++\n  }\n\n  console.log(\"Start to send dune query: \", userSwapAmount.id, (new Date()).toLocaleString())\n\n  const duneResult = await QueryOrderTxsByAccount(year0+\"-\"+monthString+\"-01\", year1+\"-\"+nextMonthString+\"-01\", userSwapAmount.account)\n\n  console.log(\"Dune resule returned: \", userSwapAmount.id, (new Date()).toLocaleString())\n\n\n  if (duneResult.txs.length === 0) {\n    console.error(\"no order settled found\")\n    userSwapAmount.status = PROOF_STATUS_INELIGIBLE_ACCOUNT_ID\n    updateUserTradeVolumeFee(userSwapAmount)\n    return\n  }\n\n  const promises = Array<Promise<string>>();\n\n  duneResult.txs.forEach((tx) => {\n    promises.push(\n      insertReceipt(tx).then((receipt) => {\n        return receipt.id;\n      })\n    );\n  });\n\n  const receiptIds = await Promise.all(promises);\n  userSwapAmount.receipt_ids = receiptIds.reduce(\n    (accumulator, currentValue) => accumulator + \",\" + currentValue\n  );\n  userSwapAmount.status = PROOF_STATUS_INPUT_READY;\n  userSwapAmount.volume = duneResult.volume\n  userSwapAmount.fee = duneResult.fee\n\n  console.log(\"User Circuit Input Ready: \", userSwapAmount.id, (new Date()).toLocaleString())\n\n  updateUserTradeVolumeFee(userSwapAmount).then(value => {\n    sendUserTradeVolumeFeeProvingRequest(value)\n  }).then();\n}\n\nasync function prepareUserSwapAmountProof() {\n  try {\n    const utvfs = await findUserTradeVolumeFees(PROOF_STATUS_INPUT_READY);\n    let promises = Array<Promise<void>>();\n    for (let i = 0; i < utvfs.length; i++) {\n      promises.push(sendUserTradeVolumeFeeProvingRequest(utvfs[i]));\n    }\n    await Promise.all(promises);\n  } catch (error) {\n    console.error(\"failed to send user swap amount prove\", error);\n  }\n}\n\nasync function uploadUserSwapAmountProof() {\n  try {\n    const utvfs = await findUserTradeVolumeFees(PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED);\n    let promises = Array<Promise<void>>();\n    for (let i = 0; i < utvfs.length; i++) {\n      promises.push(uploadUserTradeVolumeFeeProof(utvfs[i]));\n    }\n    await Promise.all(promises);\n  } catch (error) {\n    console.error(\"failed to upload user swap amount proof\");\n  }\n}","// @ts-nocheck\nimport { server } from \"./server/index\";\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\nBigInt.prototype.toJSON = function () {\n  return this.toString();\n};\n\nserver;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qBAAoB;;;ACApB,oBAA6B;AAC7B,kBAA6B;;;ACD7B,IAAM,iBAAiB,OAAO,CAAC;AAC/B,IAAM,cAAc,OAAO,CAAC;AAC5B,IAAM,eAAe,OAAO,CAAC;AAE7B,IAAM,uBAAuB,OAAO,CAAC;AACrC,IAAM,oBAAoB,OAAO,CAAC;AAClC,IAAM,kCAAkC,OAAO,CAAC;AAChD,IAAM,2BAA2B,OAAO,CAAC;AACzC,IAAM,4BAA4B,OAAO,CAAC;AAC1C,IAAM,gDAAgD,OAAO,CAAC;AAC9D,IAAM,iCAAiC,OAAO,CAAC;AAC/C,IAAM,8BAA8B,OAAO,CAAC;AAC5C,IAAM,kCAAkC,OAAO,CAAC;AAChD,IAAM,wCAAwC,OAAO,EAAE;AACvD,IAAM,gCAAgC,OAAO,EAAE;AAC/C,IAAM,qCAAqC,OAAO,EAAE;AAEpD,IAAM,0CAA0C;AAChD,IAAM,qCAAqC;AAC3C,IAAM,sDAAsD;AAC5D,IAAM,uDAAuD;AAC7D,IAAM,mDAAmD;AACzD,IAAM,+CAA+C;;;ADXrD,IAAM,SAAS,IAAI,2BAAa;AAEhC,eAAe,cAAc,SAA+B;AAC1D,SAAO,OAAO,QAAQ,OAAO;AAAA,IAC3B,MAAM;AAAA,MACJ,QAAI,YAAAA,IAAO;AAAA,MACX,SAAS,SAAS,kBAAkB;AAAA,MACpC,QAAQ;AAAA,MACR,aAAa,oBAAI,KAAK;AAAA,MACtB,aAAa,oBAAI,KAAK;AAAA,IACxB;AAAA,EACF,CAAC;AACH;AAEA,eAAe,cACb,IACA,QACA,MACc;AACd,SAAO,OAAO,QAAQ,OAAO;AAAA,IAC3B,OAAO;AAAA,MACL;AAAA,IACF;AAAA,IACA,MAAM;AAAA,MACJ;AAAA,MACA,aAAa,oBAAI,KAAK;AAAA,MACtB;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAEA,eAAe,WAAW,IAA0B;AAClD,SAAO,OAAO,QAAQ,WAAW;AAAA,IAC/B,OAAO;AAAA,MACL;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAEA,eAAe,uBAAqC;AAClD,MAAI,MAAM,oBAAI,KAAK;AACnB,SAAO,OAAO,QAAQ,SAAS;AAAA,IAC7B,MAAM;AAAA,IACN,OAAO;AAAA,MACL,QAAQ;AAAA,MACR,aAAa;AAAA,QACX,KAAK;AAAA,MACP;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAgBA,eAAe,cACb,IACA,QACA,OACA,MACc;AACd,SAAO,OAAO,QAAQ,OAAO;AAAA,IAC3B,OAAO;AAAA,MACL;AAAA,IACF;AAAA,IACA,MAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA,aAAa,oBAAI,KAAK;AAAA,MACtB;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAUA,eAAe,uBAAqC;AAClD,MAAI,MAAM,oBAAI,KAAK;AACnB,MAAI,WAAW,IAAI,WAAW,IAAI,EAAE;AACpC,SAAO,OAAO,QAAQ,SAAS;AAAA,IAC7B,MAAM;AAAA,IACN,OAAO;AAAA,MACL,QAAQ;AAAA,MACR,aAAa;AAAA,QACX,KAAK;AAAA,MACP;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAEA,eAAe,yBACb,cACA,cACA,SACA,kBACc;AACd,SAAO,OAAO,sBAAsB,OAAO;AAAA,IACzC,MAAM;AAAA,MACJ,QAAI,YAAAC,IAAO;AAAA,MACX;AAAA,MACA;AAAA,MACA,SAAS,SAAS,kBAAkB;AAAA,MACpC;AAAA,MACA,QAAQ;AAAA,MACR,aAAa,oBAAI,KAAK;AAAA,MACtB,aAAa,oBAAI,KAAK;AAAA,IACxB;AAAA,EACF,CAAC;AACH;AAEA,eAAe,yBAAyB,MAAyB;AAC/D,SAAO,OAAO,sBAAsB,OAAO;AAAA,IACzC,OAAO;AAAA,MACL,IAAI,KAAK;AAAA,IACX;AAAA,IACA,MAAM;AAAA,MACJ,QAAQ,KAAK;AAAA,MACb,KAAK,KAAK;AAAA,MACV,aAAa,KAAK;AAAA,MAClB,aAAa,KAAK;AAAA,MAClB,mBAAmB,KAAK,mBAAmB,kBAAkB;AAAA,MAC7D,kBAAkB,KAAK;AAAA,MACvB,OAAO,KAAK;AAAA,MACZ,QAAQ,KAAK;AAAA,MACb,aAAa,oBAAI,KAAK;AAAA,MACtB,WAAW,KAAK;AAAA,IAClB;AAAA,EACF,CAAC;AACH;AAEA,eAAe,sBAAsB,IAA0B;AAC7D,SAAO,OAAO,sBAAsB,WAAW;AAAA,IAC7C,OAAO;AAAA,MACL;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAEA,eAAe,qBACb,SACA,kBACc;AACd,SAAO,OAAO,sBAAsB,UAAU;AAAA,IAC5C,OAAO;AAAA,MACL,SAAS,SAAS,kBAAkB;AAAA,MACpC,kBAAkB;AAAA,QAChB,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAEA,eAAe,wBAAwB,QAA8B;AACnE,SAAO,OAAO,sBAAsB,SAAS;AAAA,IAC3C,MAAM;AAAA,IACN,OAAO;AAAA,MACL,QAAQ;AAAA,QACN,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAEA,eAAe,0BACb,mBACc;AACd,SAAO,OAAO,sBAAsB,WAAW;AAAA,IAC7C,OAAO;AAAA,MACL,mBAAmB,mBAAmB,kBAAkB;AAAA,MACxD,QAAQ;AAAA,QACN,IAAI;AAAA,MACN;AAAA,IACF;AAAA,IACA,MAAM;AAAA,MACJ,QAAQ;AAAA,IACV;AAAA,EACF,CAAC;AACH;;;AE7MA,UAAqB;AAiBrB,oBAAkC;AAElC,IAAM;AAAA,EACJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,IAAI;AAEJ,IAAM,SAAS,IAAI,OAAO,iBAAiB;AAC3C,IAAM,SAAS,IAAI,OAAO,6BAA6B;AAEvD,IAAM,kCAAkC,OAAO,SAA6B;AAC1E,QAAM,WAAW,IAAI,aAAa;AAClC,QAAM,MAAM,KAAK,YAAY,MAAM,GAAG;AACtC,MAAI,WAAW,MAAoC;AAEnD,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACnC,aAAS;AAAA,MACP,WAAW,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC,UAAU;AACjC,cAAM,IAAI;AACV,YAAI,MAAM,UAAa,MAAM,MAAM;AACjC,iBAAO;AAAA,QACT,OAAO;AACL,cAAI,EAAE,wBAAwB;AAC5B,mBAAO;AAAA,UACT,OAAO;AACL,mBAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAEA,QAAM,UAAU,MAAM,QAAQ,IAAI,QAAQ;AAE1C,MAAI,QAAQ;AACZ,MAAI,aAAa;AACjB,MAAI,YAAY;AAEhB,WAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,UAAM,UAAU,QAAQ,CAAC;AACzB,QAAI,YAAY,QAAW;AACzB;AAAA,IACF;AACA,QAAI,QAAQ,WAAW,cAAc;AACnC,YAAM,IAAI,MAAM,oBAAoB;AAAA,IACtC;AACA,UAAM,OAAO,KAAK,MAAM,QAAQ,IAAI;AACpC,UAAM,YAAW,OAAO,KAAK,SAAS;AACtC,QAAI,MAAM,SAAS,GAAG;AACpB,cAAQ,MAAM,gCAAgC,IAAI;AAAA,IACpD;AAEA,QAAI,aAAa,WAAW;AAC1B,mBAAa;AAAA,IACf;AACA,QAAI,YAAY,WAAW;AACzB,kBAAY;AAAA,IACd;AACA,aAAS;AAAA,MACP,IAAI,YAAY;AAAA,QACd,WAAW,OAAO,KAAK,SAAS;AAAA,QAChC,SAAS,QAAQ;AAAA,QACjB,QAAQ;AAAA,UACN,IAAQ,UAAM,KAAK,OAAO,CAAC,CAAC;AAAA,UAC5B,IAAQ,UAAM,KAAK,OAAO,CAAC,CAAC;AAAA,UAC5B,IAAQ,UAAM,KAAK,OAAO,CAAC,CAAC;AAAA,UAC5B,IAAQ,UAAM,KAAK,OAAO,CAAC,CAAC;AAAA,QAC9B;AAAA,MACF,CAAC;AAAA,MACD;AAAA,IACF;AAAA,EACF;AAEA,QAAM,eAAe,wBAAU,KAAK,KAAK,OAAO,EAAE,YAAY;AAE9D,WAAS,eAAe;AAAA,IACtB,WAAW,UAAU,YAAY;AAAA,IACjC,aAAa,UAAU,WAAW,SAAS,CAAC;AAAA,IAC5C,WAAW,UAAU,UAAU,SAAS,CAAC;AAAA,IAC3C,WAAa,UAAU,KAAK,iBAAiB,SAAS,CAAC;AAAA,EACvD,CAAC;AAED,SAAO;AACT;AAEA,eAAe,qCAAqC,SAA6B;AAC/E,QAAM,OAAO,MAAM,sBAAsB,QAAQ,EAAE;AACnD,MAAI,KAAK,UAAU,0BAA0B;AAC3C;AAAA,EACF;AAEA,OAAK,SAAS;AACd,QAAM,yBAAyB,IAAI;AACnC,MAAI;AACF,YAAQ,IAAI,kCAAkC,KAAK,KAAK,oBAAI,KAAK,GAAG,eAAe,CAAC;AACpF,UAAM,WAAW,MAAM,gCAAgC,IAAI;AAC3D,YAAQ,IAAI,qCAAqC,KAAK,KAAK,oBAAI,KAAK,GAAG,eAAe,CAAC;AAEvF,UAAM,WAAW,MAAM,OAAO,WAAW,QAAQ;AACjD,YAAQ,IAAI,qBAAoB,SAAS,WAAW,oBAAI,KAAK,GAAG,eAAe,CAAC;AAEhF,QAAI,SAAS,SAAS;AACpB,YAAM,MAAM,SAAS;AACrB,cAAQ,IAAI,MAAM;AAAA,QAChB,KAAK,QAAQ;AACX,kBAAQ,MAAM,8CAA8C,IAAI,GAAG;AAEnE;AAAA,QACF,KAAK,QAAQ;AACX,kBAAQ,MAAM,yBAAyB,IAAI,GAAG;AAE9C;AAAA,QACF,KAAK,QAAQ;AACX,kBAAQ,MAAM,oBAAoB,IAAI,GAAG;AAEzC;AAAA,QACF;AACE;AAAA,MACJ;AACA;AAAA,IACF;AAEA,QAAI;AACF,YAAM,uBAAuB,MAAM,OAAO;AAAA,QACxC;AAAA,QACA,SAAS;AAAA,QACT,OAAO,KAAK,YAAY;AAAA,QACxB,OAAO,KAAK,YAAY;AAAA,MAC1B;AACA,cAAQ,IAAI,qCAAqC,qBAAqB,aAAa,oBAAI,KAAK,GAAG,eAAe,CAAC;AAC/G,WAAK,SAAS;AACd,WAAK,mBAAmB,qBAAqB;AAC7C,WAAK,oBAAoB,qBAAqB;AAC9C,WAAK,YAAY,SAAS;AAE1B,+BAAyB,IAAI,EAAE,KAAK,WAAS;AAC3C,sCAA8B,KAAK;AAAA,MACrC,CAAC,EAAE,KAAK;AAAA,IACV,SAAS,OAAO;AACd,cAAQ,MAAM,2BAA2B,OAAO,KAAK,EAAE;AACvD,WAAK,SAAS;AACd,+BAAyB,IAAI;AAAA,IAC/B;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,IAAI,mDAAmD,KAAK,KAAK,oBAAI,KAAK,GAAG,eAAe,CAAC;AACrG,SAAK,SAAS;AACd,UAAM,yBAAyB,IAAI;AAAA,EACrC;AACF;AAEA,eAAe,8BAA8B,SAA6B;AACxE,QAAM,OAAO,MAAM,sBAAsB,QAAQ,EAAE;AACnD,MAAI,KAAK,UAAU,+CAA+C;AAChE;AAAA,EACF;AAEA,OAAK,SAAS;AACd,QAAM,yBAAyB,IAAI;AAEnC,MAAI;AACF,YAAQ,IAAI,uBAAuB,KAAK,IAAI,KAAK,YAAY,oBAAI,KAAK,GAAG,eAAe,CAAC;AACzF,UAAM,cAAc,MAAM,OAAO,SAAS,KAAK,SAAS;AACxD,QAAI,YAAY,SAAS;AACvB,cAAQ,MAAM,YAAY,IAAI,GAAG;AACjC,WAAK,SAAS;AACd,YAAM,yBAAyB,IAAI;AACnC;AAAA,IACF,WAAW,YAAY,MAAM,WAAW,GAAG;AACzC,WAAK,SAAS;AACd,YAAM,yBAAyB,IAAI;AACnC;AAAA,IACF;AAEA,UAAM,OAAO;AAAA,MACX,KAAK;AAAA,MACL,OAAO,KAAK,YAAY;AAAA,MACxB,YAAY;AAAA,IACd;AAEA,SAAK,SAAS;AAEd,YAAQ,IAAI,oBAAoB,KAAK,KAAK,oBAAI,KAAK,GAAG,eAAe,CAAC;AAEtE,6BAAyB,IAAI;AAAA,EAC/B,SAAS,KAAK;AACZ,SAAK,SAAS;AACd,6BAAyB,IAAI;AAC7B,YAAQ,MAAM,GAAG;AAAA,EACnB;AACF;;;ACpNA,wBAA2C;AAC3C,aAAwB;AACxB,IAAAC,iBAA0B;AAEnB,cAAO;AACd,IAAM,SAAS,IAAI,6BAAW,QAAQ,IAAI,gBAAgB,EAAE;AAC5D,IAAM,UAAU;AAOhB,eAAsB,uBACpB,MACA,KACA,WACqB;AACrB,MAAI;AACF,YAAQ,IAAI,6BAA6B,oBAAI,KAAK,GAAG,eAAe,CAAC;AACrE,UAAM,UAAU,MAAM,OAAO,SAAS;AAAA,MACpC;AAAA,MACA,kBAAkB;AAAA,QAChB,iCAAe,KAAK,QAAQ,IAAI;AAAA,QAChC,iCAAe,KAAK,MAAM,GAAG;AAAA,QAC7B,iCAAe,KAAK,cAAc,SAAS;AAAA,MAC7C;AAAA,IACF,CAAC;AACD,UAAM,MAAM,MAAc;AAC1B,QAAI,MAAM,yBAAU,KAAK,CAAC;AAC1B,QAAI,SAAS,yBAAU,KAAK,CAAC;AAE7B,YAAQ,QAAQ,KAAK,IAAI,CAAC,WAAW;AACnC,YAAM,UAAU,OAAO,aAAa;AACpC,YAAM,YAAY,OAAO,WAAW;AACpC,YAAM,YAAY,OAAO,WAAW;AACpC,YAAM,YAAY,OAAO,WAAW;AAEpC,YAAM,IAAI,IAAI,yBAAU,KAAK,SAAS,CAAC;AACvC,eAAS,OAAO;AAAA,QACd,yBAAU,KAAK,SAAS,EAAE,IAAI,EAAE,IAAI,yBAAU,KAAK,SAAS,CAAC,EAAE,IAAI,yBAAU,KAAK,qBAAqB,CAAC;AAAA,MAC1G;AAEA,UAAI,OAAO,YAAY,YAAY,mBAAmB,QAAQ;AAC5D,YAAI,KAAK,QAAQ,SAAS,CAAC;AAAA,MAC7B,OAAO;AACL,gBAAQ,MAAM,iCAAiC,OAAO;AAAA,MACxD;AAAA,IACF,CAAC;AACD,WAAO,EAAC,KAAU,KAAK,IAAI,SAAS,GAAG,QAAQ,OAAO,SAAS,EAAC;AAAA,EAClE,SAAS,OAAO;AACd,YAAQ,IAAI,cAAc,KAAK;AAC/B,WAAO,EAAC,KAAK,CAAC,GAAG,KAAK,KAAK,QAAQ,IAAG;AAAA,EACxC;AACF;;;ACtDA,IAAAC,kBAAkC;;;ACAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACIA,IAAAC,iBAAwC;AAIxC,IAAM,OAAO;AAAA,EACX;AAAA,IACE,WAAW;AAAA,IACX,QAAQ;AAAA,MACN;AAAA,QACE,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AACF;AAEO,IAAM,mBAAN,MAAuB;AAAA,EAE5B,OAAO,kBAAoC;AACzC,WAAO,IAAI,qBAAM,UAAU,IAAI;AAAA,EACjC;AAAA,EACA,OAAO,QACL,SACA,kBACS;AACT,WAAO,IAAI,wBAAS,SAAS,MAAM,gBAAgB;AAAA,EACrD;AACF;AAXa,iBACK,MAAM;;;AC5DxB,IAAAC,iBAAwC;AAIxC,IAAMC,QAAO;AAAA,EACX;AAAA,IACE,WAAW;AAAA,IACX,QAAQ;AAAA,MACN;AAAA,QACE,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,WAAW;AAAA,IACX,QAAQ;AAAA,MACN;AAAA,QACE,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AACF;AAEO,IAAM,kBAAN,MAAsB;AAAA,EAE3B,OAAO,kBAAmC;AACxC,WAAO,IAAI,qBAAM,UAAUA,KAAI;AAAA,EACjC;AAAA,EACA,OAAO,QAAQ,SAAiB,kBAA6C;AAC3E,WAAO,IAAI,wBAAS,SAASA,OAAM,gBAAgB;AAAA,EACrD;AACF;AARa,gBACK,MAAMA;;;AC/LxB,IAAAC,iBAAwC;AAIxC,IAAMC,QAAO;AAAA,EACX;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,YAAY;AAAA,UACV;AAAA,YACE,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,YAAY;AAAA,cACV;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,YAAY;AAAA,kBACV;AAAA,oBACE,YAAY;AAAA,sBACV;AAAA,wBACE,cAAc;AAAA,wBACd,MAAM;AAAA,wBACN,MAAM;AAAA,sBACR;AAAA,sBACA;AAAA,wBACE,cAAc;AAAA,wBACd,MAAM;AAAA,wBACN,MAAM;AAAA,sBACR;AAAA,sBACA;AAAA,wBACE,cAAc;AAAA,wBACd,MAAM;AAAA,wBACN,MAAM;AAAA,sBACR;AAAA,sBACA;AAAA,wBACE,cAAc;AAAA,wBACd,MAAM;AAAA,wBACN,MAAM;AAAA,sBACR;AAAA,oBACF;AAAA,oBACA,cAAc;AAAA,oBACd,MAAM;AAAA,oBACN,MAAM;AAAA,kBACR;AAAA,kBACA;AAAA,oBACE,cAAc;AAAA,oBACd,MAAM;AAAA,oBACN,MAAM;AAAA,kBACR;AAAA,kBACA;AAAA,oBACE,cAAc;AAAA,oBACd,MAAM;AAAA,oBACN,MAAM;AAAA,kBACR;AAAA,gBACF;AAAA,gBACA,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,YACF;AAAA,YACA,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,YAAY;AAAA,cACV;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,YACF;AAAA,YACA,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,YAAY;AAAA,cACV;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,YACF;AAAA,YACA,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,QACF;AAAA,QACA,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AACF;AAEO,IAAM,qBAAN,MAAyB;AAAA,EAE9B,OAAO,kBAAsC;AAC3C,WAAO,IAAI,qBAAM,UAAUA,KAAI;AAAA,EACjC;AAAA,EACA,OAAO,QACL,SACA,kBACW;AACX,WAAO,IAAI,wBAAS,SAASA,OAAM,gBAAgB;AAAA,EACrD;AACF;AAXa,mBACK,MAAMA;;;ACxMxB,IAAAC,iBAAwC;AAIxC,IAAMC,QAAO;AAAA,EACX;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,YAAY;AAAA,UACV;AAAA,YACE,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,QACF;AAAA,QACA,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,YAAY;AAAA,UACV;AAAA,YACE,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,YAAY;AAAA,cACV;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,YAAY;AAAA,kBACV;AAAA,oBACE,YAAY;AAAA,sBACV;AAAA,wBACE,cAAc;AAAA,wBACd,MAAM;AAAA,wBACN,MAAM;AAAA,sBACR;AAAA,sBACA;AAAA,wBACE,cAAc;AAAA,wBACd,MAAM;AAAA,wBACN,MAAM;AAAA,sBACR;AAAA,sBACA;AAAA,wBACE,cAAc;AAAA,wBACd,MAAM;AAAA,wBACN,MAAM;AAAA,sBACR;AAAA,sBACA;AAAA,wBACE,cAAc;AAAA,wBACd,MAAM;AAAA,wBACN,MAAM;AAAA,sBACR;AAAA,oBACF;AAAA,oBACA,cAAc;AAAA,oBACd,MAAM;AAAA,oBACN,MAAM;AAAA,kBACR;AAAA,kBACA;AAAA,oBACE,cAAc;AAAA,oBACd,MAAM;AAAA,oBACN,MAAM;AAAA,kBACR;AAAA,kBACA;AAAA,oBACE,cAAc;AAAA,oBACd,MAAM;AAAA,oBACN,MAAM;AAAA,kBACR;AAAA,gBACF;AAAA,gBACA,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,YACF;AAAA,YACA,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,YAAY;AAAA,cACV;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,YACF;AAAA,YACA,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,YAAY;AAAA,cACV;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,YACF;AAAA,YACA,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,QACF;AAAA,QACA,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AACF;AAEO,IAAM,wBAAN,MAA4B;AAAA,EAEjC,OAAO,kBAAyC;AAC9C,WAAO,IAAI,qBAAM,UAAUA,KAAI;AAAA,EACjC;AAAA,EACA,OAAO,QACL,SACA,kBACc;AACd,WAAO,IAAI,wBAAS,SAASA,OAAM,gBAAgB;AAAA,EACrD;AACF;AAXa,sBACK,MAAMA;;;AC/RxB,IAAAC,iBAAoE;AAIpE,IAAMC,QAAO;AAAA,EACX;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,YAAY;AAAA,UACV;AAAA,YACE,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,QACF;AAAA,QACA,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AACF;AAEA,IAAM,YACJ;AAMF,IAAM,cAAc,CAClB,OACwD,GAAG,SAAS;AAE/D,IAAM,cAAN,cAA0B,+BAAgB;AAAA,EAC/C,eAAe,MAA2B;AACxC,QAAI,YAAY,IAAI,GAAG;AACrB,YAAM,GAAG,IAAI;AAAA,IACf,OAAO;AACL,YAAMA,OAAM,WAAW,KAAK,CAAC,CAAC;AAAA,IAChC;AACA,SAAK,eAAe;AAAA,EACtB;AAAA,EAEA,OACE,WACa;AACb,WAAO,MAAM,OAAO,aAAa,CAAC,CAAC;AAAA,EACrC;AAAA,EACA,qBACE,WACoB;AACpB,WAAO,MAAM,qBAAqB,aAAa,CAAC,CAAC;AAAA,EACnD;AAAA,EACA,OAAO,SAAqB;AAC1B,WAAO,MAAM,OAAO,OAAO;AAAA,EAC7B;AAAA,EACA,QAAQ,QAA6B;AACnC,WAAO,MAAM,QAAQ,MAAM;AAAA,EAC7B;AAAA,EAKA,OAAO,kBAA+B;AACpC,WAAO,IAAI,qBAAM,UAAUA,KAAI;AAAA,EACjC;AAAA,EACA,OAAO,QAAQ,SAAiB,kBAAyC;AACvE,WAAO,IAAI,wBAAS,SAASA,OAAM,gBAAgB;AAAA,EACrD;AACF;AApCa,YA4BK,WAAW;AA5BhB,YA6BK,MAAMA;;;ACjHxB,IAAAC,iBAAoE;AAOpE,IAAMC,QAAO;AAAA,EACX;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,WAAW;AAAA,IACX,QAAQ;AAAA,MACN;AAAA,QACE,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,WAAW;AAAA,IACX,QAAQ;AAAA,MACN;AAAA,QACE,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,YAAY;AAAA,UACV;AAAA,YACE,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,YAAY;AAAA,cACV;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,YAAY;AAAA,kBACV;AAAA,oBACE,YAAY;AAAA,sBACV;AAAA,wBACE,cAAc;AAAA,wBACd,MAAM;AAAA,wBACN,MAAM;AAAA,sBACR;AAAA,sBACA;AAAA,wBACE,cAAc;AAAA,wBACd,MAAM;AAAA,wBACN,MAAM;AAAA,sBACR;AAAA,sBACA;AAAA,wBACE,cAAc;AAAA,wBACd,MAAM;AAAA,wBACN,MAAM;AAAA,sBACR;AAAA,sBACA;AAAA,wBACE,cAAc;AAAA,wBACd,MAAM;AAAA,wBACN,MAAM;AAAA,sBACR;AAAA,oBACF;AAAA,oBACA,cAAc;AAAA,oBACd,MAAM;AAAA,oBACN,MAAM;AAAA,kBACR;AAAA,kBACA;AAAA,oBACE,cAAc;AAAA,oBACd,MAAM;AAAA,oBACN,MAAM;AAAA,kBACR;AAAA,kBACA;AAAA,oBACE,cAAc;AAAA,oBACd,MAAM;AAAA,oBACN,MAAM;AAAA,kBACR;AAAA,gBACF;AAAA,gBACA,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,YACF;AAAA,YACA,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,YAAY;AAAA,cACV;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,YACF;AAAA,YACA,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,YAAY;AAAA,cACV;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA;AAAA,gBACE,cAAc;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,YACF;AAAA,YACA,cAAc;AAAA,YACd,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AAAA,QACF;AAAA,QACA,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AACF;AAEA,IAAMC,aACJ;AAMF,IAAMC,eAAc,CAClB,OACwD,GAAG,SAAS;AAE/D,IAAM,+BAAN,cAA2C,+BAAgB;AAAA,EAChE,eAAe,MAA4C;AACzD,QAAIA,aAAY,IAAI,GAAG;AACrB,YAAM,GAAG,IAAI;AAAA,IACf,OAAO;AACL,YAAMF,OAAMC,YAAW,KAAK,CAAC,CAAC;AAAA,IAChC;AACA,SAAK,eAAe;AAAA,EACtB;AAAA,EAEA,OACE,cACA,WAC8B;AAC9B,WAAO,MAAM;AAAA,MACX;AAAA,MACA,aAAa,CAAC;AAAA,IAChB;AAAA,EACF;AAAA,EACA,qBACE,cACA,WACoB;AACpB,WAAO,MAAM,qBAAqB,cAAc,aAAa,CAAC,CAAC;AAAA,EACjE;AAAA,EACA,OAAO,SAAsC;AAC3C,WAAO,MAAM,OAAO,OAAO;AAAA,EAC7B;AAAA,EACA,QAAQ,QAA8C;AACpD,WAAO,MAAM,QAAQ,MAAM;AAAA,EAC7B;AAAA,EAKA,OAAO,kBAAgD;AACrD,WAAO,IAAI,qBAAM,UAAUD,KAAI;AAAA,EACjC;AAAA,EACA,OAAO,QACL,SACA,kBACqB;AACrB,WAAO,IAAI,wBAAS,SAASA,OAAM,gBAAgB;AAAA,EACrD;AACF;AA5Ca,6BAiCK,WAAWC;AAjChB,6BAkCK,MAAMD;;;ACpbxB,IAAAG,iBAAwC;AAOxC,IAAMC,QAAO;AAAA,EACX;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AACF;AAEO,IAAM,0BAAN,MAA8B;AAAA,EAEnC,OAAO,kBAA2C;AAChD,WAAO,IAAI,qBAAM,UAAUA,KAAI;AAAA,EACjC;AAAA,EACA,OAAO,QACL,SACA,kBACgB;AAChB,WAAO,IAAI,wBAAS,SAASA,OAAM,gBAAgB;AAAA,EACrD;AACF;AAXa,wBACK,MAAMA;;;AC/BxB,IAAAC,kBAAoE;AAIpE,IAAMC,QAAO;AAAA,EACX;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,WAAW;AAAA,IACX,QAAQ;AAAA,MACN;AAAA,QACE,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,WAAW;AAAA,IACX,QAAQ;AAAA,MACN;AAAA,QACE,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,WAAW;AAAA,IACX,QAAQ;AAAA,MACN;AAAA,QACE,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,WAAW;AAAA,IACX,QAAQ;AAAA,MACN;AAAA,QACE,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,WAAW;AAAA,IACX,QAAQ;AAAA,MACN;AAAA,QACE,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,SAAS;AAAA,QACT,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,MACA;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AACF;AAEA,IAAMC,aACJ;AAMF,IAAMC,eAAc,CAClB,OACwD,GAAG,SAAS;AAE/D,IAAM,yBAAN,cAAqC,gCAAgB;AAAA,EAC1D,eAAe,MAAsC;AACnD,QAAIA,aAAY,IAAI,GAAG;AACrB,YAAM,GAAG,IAAI;AAAA,IACf,OAAO;AACL,YAAMF,OAAMC,YAAW,KAAK,CAAC,CAAC;AAAA,IAChC;AACA,SAAK,eAAe;AAAA,EACtB;AAAA,EAEA,OACE,eACA,cACA,WACwB;AACxB,WAAO,MAAM;AAAA,MACX;AAAA,MACA;AAAA,MACA,aAAa,CAAC;AAAA,IAChB;AAAA,EACF;AAAA,EACA,qBACE,eACA,cACA,WACoB;AACpB,WAAO,MAAM;AAAA,MACX;AAAA,MACA;AAAA,MACA,aAAa,CAAC;AAAA,IAChB;AAAA,EACF;AAAA,EACA,OAAO,SAAgC;AACrC,WAAO,MAAM,OAAO,OAAO;AAAA,EAC7B;AAAA,EACA,QAAQ,QAAwC;AAC9C,WAAO,MAAM,QAAQ,MAAM;AAAA,EAC7B;AAAA,EAKA,OAAO,kBAA0C;AAC/C,WAAO,IAAI,sBAAM,UAAUD,KAAI;AAAA,EACjC;AAAA,EACA,OAAO,QACL,SACA,kBACe;AACf,WAAO,IAAI,yBAAS,SAASA,OAAM,gBAAgB;AAAA,EACrD;AACF;AAnDa,uBAwCK,WAAWC;AAxChB,uBAyCK,MAAMD;;;ATxaxB,IAAAG,UAAwB;AAEjB,eAAO;AAEd,IAAM,EAAE,8BAAAC,8BAA6B,IAAI;AAEzC,IAAM,mBAAmB,IAAI,uBAAO,UAAU;AAAA,EAC5C,QAAQ,IAAI,YAAY;AAC1B;AAEA,IAAM,sBAAsB,IAAI,uBAAO,UAAU;AAAA,EAC/C,QAAQ,IAAI,cAAc;AAC5B;AACA,IAAM,SAAS,IAAI,uBAAO;AAAA,EACxB,QAAQ,IAAI,eAAe;AAAA,EAC3B;AACF;AAEA,IAAM,gBAAgB,uBAAuB;AAAA,EAC3C,QAAQ,IAAI,kBAAkB;AAAA,EAC9B;AACF;AACA,IAAM,oBAAoBA,8BAA6B;AAAA,EACrD,QAAQ,IAAI,qBAAqB;AAAA,EACjC;AACF;AAEA,eAAe,uBAAuB;AAEpC,oBAAkB,GAAG,iBAAiB,CAAC,MAAM,WAAW,gBAAgB,QAAQ;AAC9E,UAAM,cAAc;AACpB,UAAM,cAAc;AACpB,UAAM,mBAAmB;AAEzB,QACE,gBAAgB,UAChB,gBAAgB,QAChB,qBAAqB,UACrB,qBAAqB,QACrB,gBAAgB,UAChB,gBAAgB,MAChB;AACA,cAAQ;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA;AAAA,IACF;AAEA,yBAAqB,YAAY,SAAS,GAAG,OAAO,iBAAiB,SAAS,CAAC,CAAC,EAC7E,KAAK,UAAQ;AACZ,UAAI,MAAM;AACR,aAAK,SAAS;AACd,eAAO,yBAAyB,IAAI;AAAA,MACtC;AAAA,IACF,CAAC,EAAE,MAAM,WAAS;AAChB,cAAQ;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACL,CAAC;AACH;AAEA,eAAe,uBAAuB;AACpC,gBAAc,GAAG,eAAe,CAAC,cAAsB;AACrD,8BAA0B,SAAS,EAChC,KAAK,EACL,MAAM,CAAC,UAAU;AAChB,cAAQ;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACL,CAAC;AACH;;;AU5FA,eAAe,mBAAmB,SAAc;AAC5C,SAAO,oBACJ,sBAAsB,QAAQ,OAAO,EACrC,MAAM,CAAC,UAAU;AAChB,YAAQ,IAAI,OAAO,KAAK;AAAA,EAC1B,CAAC,EACA,KAAK,CAAC,uBAAuB;AAC5B,QAAI,sBAAsB,QAAQ,sBAAsB,QAAW;AACjE,cAAQ,MAAM,wBAAwB,QAAQ,IAAI,QAAQ,OAAO;AACjE;AAAA,IACF;AACA,QAAI,YAAY;AAChB,QAAI,OAAO;AACX,uBAAmB,KAAK,QAAQ,CAAC,KAAK,MAAM;AAC1C,UAAI,IAAI,OAAO,SAAS,GAAG;AACzB;AAAA,MACF;AAEA,UAAI,aAAa,IAAI,QAAQ,YAAY;AACzC,UAAI,SAAS,IAAI,OAAO,CAAC,EAAE,YAAY;AAEvC,UACE,eACE,6CAA6C,YAAY,KAC3D,OAAO,YAAY,MACjB,sEACF;AACA,oBAAY;AACZ,eAAO,KAAK,UAAU;AAAA,UACpB,WAAW,mBAAmB;AAAA,UAC9B,SAAS,mBAAmB;AAAA,UAC5B,QAAQ;AAAA;AAAA,YAEN;AAAA,cACE,UAAU;AAAA,cACV,WAAW;AAAA,cACX,UAAU;AAAA,cACV,UAAU;AAAA,cACV,aAAa;AAAA,cACb,OAAO,IAAI,OAAO,CAAC,EAAE,YAAY;AAAA,YACnC;AAAA;AAAA,YAEA;AAAA,cACE,UAAU;AAAA,cACV,WAAW;AAAA,cACX,UAAU;AAAA,cACV,UAAU;AAAA,cACV,aAAa;AAAA,cACb,OAAO,OAAO,IAAI,KAAK,QAAQ,MAAM,EAAE,EAAE,MAAM,GAAG,EAAE;AAAA,YACtD;AAAA;AAAA,YAEA;AAAA,cACE,UAAU;AAAA,cACV,WAAW;AAAA,cACX,UAAU;AAAA,cACV,UAAU;AAAA,cACV,aAAa;AAAA,cACb,OAAO,OAAO,IAAI,KAAK,QAAQ,MAAM,EAAE,EAAE,MAAM,KAAK,GAAG,KAAK,CAAC;AAAA,YAC/D;AAAA;AAAA,YAEA;AAAA,cACE,UAAU;AAAA,cACV,WAAW;AAAA,cACX,UAAU;AAAA,cACV,UAAU;AAAA,cACV,aAAa;AAAA,cACb,OAAO,OAAO,IAAI,KAAK,QAAQ,MAAM,EAAE,EAAE,MAAM,KAAK,GAAG,KAAK,CAAC;AAAA,YAC/D;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF,CAAC;AAED,QAAI,WAAW;AACb;AAAA,QACE,QAAQ;AAAA,QACR;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAAA,EACF,GAAG,IAAI;AACb;AAEA,eAAe,mBAAmB,SAAc;AAC9C,SAAO,oBAAoB,aAAa,QAAQ,SAAS,QAAQ,KAAK,OAAO,QAAQ,UAAU,CAAC,EAAE,KAAK,CAAC,UAAU;AAChH,QAAI,SAAS,QAAQ,SAAS,QAAQ;AACpC,cAAQ,MAAM,qBAAqB,QAAQ,IAAI,QAAQ,OAAO;AAC9D;AAAA,IACF;AACA;AAAA,MACE,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,MACA,KAAK,UAAU;AAAA,QACb,SAAS,QAAQ;AAAA,QACjB,KAAK,QAAQ;AAAA,QACb;AAAA,QACA,YAAY,QAAQ;AAAA,MACtB,CAAC;AAAA,IACH;AAAA,EACF,GAAG,IAAI;AACT;;;ACtFA,eAAsB,kBAAkB;AACtC,MAAI;AACF,UAAM,WAAW,MAAM,qBAAqB;AAC5C,QAAI,WAAW,MAAqB;AACpC,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,eAAS,KAAK,mBAAmB,SAAS,CAAC,CAAC,CAAC;AAAA,IAC/C;AAEA,UAAM,QAAQ,IAAI,QAAQ;AAAA,EAC5B,SAAS,OAAO;AACd,YAAQ,MAAM,6BAA6B;AAAA,EAC7C;AACF;AAEA,eAAsB,kBAAkB;AACtC,MAAI;AACF,UAAM,WAAW,MAAM,qBAAqB;AAC5C,QAAI,WAAW,MAAqB;AACpC,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,eAAS,KAAK,mBAAmB,SAAS,CAAC,CAAC,CAAC;AAAA,IAC/C;AAEA,UAAM,QAAQ,IAAI,QAAQ;AAAA,EAC5B,SAAS,OAAO;AACd,YAAQ,MAAM,6BAA6B;AAAA,EAC7C;AACF;AAEA,eAAsB,6BAA6B;AACjD,MAAI;AACF,QAAI,WAAW,MAAqB;AACpC,aAAS,KAAK,2BAA2B,CAAC;AAC1C,aAAS,KAAK,2BAA2B,CAAC;AAC1C,aAAS,KAAK,0BAA0B,CAAC;AACzC,UAAM,QAAQ,IAAI,QAAQ;AAAA,EAC5B,SAAS,OAAO;AACd,YAAQ,MAAM,2BAA2B,KAAK;AAAA,EAChD;AACF;AAEA,eAAe,6BAA6B;AAC1C,MAAI;AACF,UAAM,QAAQ,MAAM,wBAAwB,iBAAiB;AAC7D,QAAI,WAAW,MAAqB;AACpC,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,eAAS,KAAK,yBAAyB,MAAM,CAAC,CAAC,CAAC;AAAA,IAClD;AACA,UAAM,QAAQ,IAAI,QAAQ;AAAA,EAC5B,SAAS,OAAO;AACd,YAAQ,MAAM,gCAAgC,KAAK;AAAA,EACrD;AACF;AAEA,eAAsB,yBAAyB,mBAAwB;AACrE,QAAM,iBAAiB,MAAM,sBAAsB,kBAAkB,EAAE;AAEvE,MAAI,eAAe,UAAU,mBAAmB;AAC9C;AAAA,EACF;AACA,iBAAe,SAAS;AACxB,QAAM,yBAAyB,cAAc;AAC7C,QAAM,KAAK,OAAO,eAAe,gBAAgB;AAEjD,QAAM,QAAQ,KAAK;AACnB,QAAM,eAAe,QAAQ,IAAI,SAAS,GAAG,GAAG;AAChD,QAAM,aAAa,QAAQ,KAAK;AAChC,QAAM,mBAAmB,YAAY,IAAI,SAAS,GAAG,GAAG;AAExD,QAAM,QAAQ,KAAK,MAAM,KAAK,GAAG;AACjC,MAAI,QAAQ;AACZ,MAAI,YAAY,OAAO;AACrB;AAAA,EACF;AAEA,UAAQ,IAAI,8BAA8B,eAAe,KAAK,oBAAI,KAAK,GAAG,eAAe,CAAC;AAE1F,QAAM,aAAa,MAAM,uBAAuB,QAAM,MAAI,cAAY,OAAO,QAAM,MAAI,kBAAgB,OAAO,eAAe,OAAO;AAEpI,UAAQ,IAAI,0BAA0B,eAAe,KAAK,oBAAI,KAAK,GAAG,eAAe,CAAC;AAGtF,MAAI,WAAW,IAAI,WAAW,GAAG;AAC/B,YAAQ,MAAM,wBAAwB;AACtC,mBAAe,SAAS;AACxB,6BAAyB,cAAc;AACvC;AAAA,EACF;AAEA,QAAM,WAAW,MAAuB;AAExC,aAAW,IAAI,QAAQ,CAAC,OAAO;AAC7B,aAAS;AAAA,MACP,cAAc,EAAE,EAAE,KAAK,CAAC,YAAY;AAClC,eAAO,QAAQ;AAAA,MACjB,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AAED,QAAM,aAAa,MAAM,QAAQ,IAAI,QAAQ;AAC7C,iBAAe,cAAc,WAAW;AAAA,IACtC,CAAC,aAAa,iBAAiB,cAAc,MAAM;AAAA,EACrD;AACA,iBAAe,SAAS;AACxB,iBAAe,SAAS,WAAW;AACnC,iBAAe,MAAM,WAAW;AAEhC,UAAQ,IAAI,8BAA8B,eAAe,KAAK,oBAAI,KAAK,GAAG,eAAe,CAAC;AAE1F,2BAAyB,cAAc,EAAE,KAAK,WAAS;AACrD,yCAAqC,KAAK;AAAA,EAC5C,CAAC,EAAE,KAAK;AACV;AAEA,eAAe,6BAA6B;AAC1C,MAAI;AACF,UAAM,QAAQ,MAAM,wBAAwB,wBAAwB;AACpE,QAAI,WAAW,MAAqB;AACpC,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,eAAS,KAAK,qCAAqC,MAAM,CAAC,CAAC,CAAC;AAAA,IAC9D;AACA,UAAM,QAAQ,IAAI,QAAQ;AAAA,EAC5B,SAAS,OAAO;AACd,YAAQ,MAAM,yCAAyC,KAAK;AAAA,EAC9D;AACF;AAEA,eAAe,4BAA4B;AACzC,MAAI;AACF,UAAM,QAAQ,MAAM,wBAAwB,6CAA6C;AACzF,QAAI,WAAW,MAAqB;AACpC,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,eAAS,KAAK,8BAA8B,MAAM,CAAC,CAAC,CAAC;AAAA,IACvD;AACA,UAAM,QAAQ,IAAI,QAAQ;AAAA,EAC5B,SAAS,OAAO;AACd,YAAQ,MAAM,yCAAyC;AAAA,EACzD;AACF;;;AhBnIA,IAAAC,kBAA0B;AAE1B,IAAM,UAAM,eAAAC,SAAQ;AAEpB,IAAI,IAAI,eAAAA,QAAQ,KAAK,CAAC;AACtB,IAAI,IAAI,eAAAA,QAAQ,WAAW,EAAE,UAAU,KAAK,CAAC,CAAC;AAE9C,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS;AAC1B,MAAI,OAAO,+BAA+B,GAAG;AAC7C,MAAI,OAAO,gCAAgC,cAAc;AACzD,OAAK;AACP,CAAC;AACD,gBAAgB,EAAE,KAAK;AACvB,YAAY,iBAAiB,GAAI;AACjC,gBAAgB,EAAE,KAAK;AACvB,YAAY,iBAAiB,GAAK;AAClC,2BAA2B,EAAE,KAAK;AAClC,YAAY,4BAA4B,GAAI;AAE5C,qBAAqB;AACrB,qBAAqB;AAErB,IAAI,KAAK,oCAAoC,OAAO,KAAK,QAAQ;AAC/D,MAAI;AACF,UAAM,EAAE,SAAS,iBAAiB,IAAI,IAAI;AAE1C,UAAM,MAAM,OAAO,gBAAgB;AAEnC,UAAM,QAAQ,MAAM;AAEpB,UAAM,MAAM,oBAAI,KAAK;AACrB,UAAM,WAAW,IAAI,YAAY,IAAI;AACrC,UAAM,WAAW,IAAI,eAAe;AAEpC,QAAI,MAAM,GAAG,KAAK,MAAM,UAAW,OAAO,WAAW,WAAW,OAAQ,QAAQ,IAAI;AAClF,UAAI,OAAO,GAAG;AACd,UAAI,KAAK,EAAE,OAAO,MAAM,SAAS,kCAAkC,CAAC;AACpE;AAAA,IACF;AAEA,QAAI,OAAO,MAAM,qBAAqB,SAAS,OAAO,GAAG,CAAC;AAC1D,QAAI,QAAQ,UAAa,QAAQ,QAAQ,MAAM;AAC7C,UAAI,KAAK,EAAE,UAAU,KAAK,GAAG,CAAC;AAC9B;AAAA,IACF;AAEA,UAAM,eAAe,OAAO,QAAQ,IAAI,gBAAgB,IAAI;AAC5D,UAAM,eAAe,OAAO,QAAQ,IAAI,gBAAgB,IAAI;AAE5D,QAAI,OAAO,MAAM;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA,OAAO,GAAG;AAAA,IACZ;AAEA,YAAQ,IAAI,uBAAuB,KAAK,KAAK,oBAAI,KAAK,GAAG,eAAe,CAAC;AAEzE,6BAAyB,IAAI,EAAE,KAAK;AACpC,QAAI,KAAK,EAAE,UAAU,KAAK,GAAG,CAAC;AAAA,EAChC,SAAS,OAAO;AACd,QAAI,OAAO,GAAG;AACd,QAAI,KAAK,EAAE,OAAO,MAAM,SAAS,MAAM,CAAC;AAAA,EAC1C;AACF,CAAC;AAED,IAAI,IAAI,wCAAwC,OAAO,KAAK,QAAQ;AAClE,MAAI;AACF,UAAM,EAAE,SAAS,IAAI,IAAI;AACzB,QAAI,UAAU,SAAS,KAAK,QAAQ,UAAU,SAAS,KAAK,QAAW;AACrE,UAAI,OAAO,GAAG;AACd,UAAI,KAAK,EAAE,OAAO,MAAM,SAAS,qBAAqB,CAAC;AACvD;AAAA,IACF;AACA,UAAM,OAAO,MAAM,sBAAsB,UAAU,SAAS,CAAC;AAE7D,QAAI,QAAQ,QAAQ,QAAQ,QAAW;AACrC,UAAI,OAAO,GAAG;AACd,UAAI,KAAK,EAAE,OAAO,MAAM,SAAS,iBAAiB,CAAC;AACnD;AAAA,IACF;AAEA,QAAI,UAAU;AACd,QAAI,SAAS;AACb,QAAIC,iBACF,KAAK,QAAQ,IAAI;AACnB,QAAI,OAAO,KAAK,MAAM,KAAK,OAAO,6BAA6B,GAAG;AAChE,eAAS;AACT,gBAAU;AAAA,IACZ,WAAY,OAAO,KAAK,MAAM,KAAK,OAAO,6CAA6C,GAAG;AACxF,eAAS;AACT,gBACE,yHAEA,QAAQ,IAAI,oBACZ;AAAA,IACJ,WAAY,OAAO,KAAK,MAAM,KAAK,OAAO,qCAAqC,GAAG;AAChF,eAAS;AACT,gBAAU;AAAA,IACZ,WAAY,OAAO,KAAK,MAAM,KAAK,OAAO,2BAA2B,GAAG;AACtE,eAAS;AACT,gBAAU;AAAA,IACZ,OAAO;AACL,eAAS;AACT,gBAAU;AAAA,IACZ;AAEA,QAAI,SAAS,KAAK;AAClB,QAAI,WAAW,IAAI;AACjB,eAAS;AAAA,IACX;AACA,UAAM,WAAW,0BAAU,KAAK,MAAM,EAAE,IAAI,0BAAU,KAAK,qBAAqB,CAAC;AAEjF,QAAI,MAAM,KAAK;AACf,QAAI,QAAQ,IAAI;AACd,YAAM;AAAA,IACR;AACA,QAAI,QAAQ,0BAAU,KAAK,GAAG,EAAE,IAAI,0BAAU,KAAK,qBAAqB,CAAC;AAEzE,QAAI,OAAO;AAEX,QAAI,SAAS,SAAS,IAAI,KAAW;AACnC,aAAO;AACP,cAAQ,MAAM,IAAI,0BAAU,KAAK,CAAC,CAAC,EAAE,IAAI,0BAAU,KAAK,EAAE,CAAC;AAAA,IAC7D,WAAW,SAAS,SAAS,IAAI,KAAU;AACzC,aAAO;AACP,cAAQ,MAAM,IAAI,0BAAU,KAAK,EAAE,CAAC,EAAE,IAAI,0BAAU,KAAK,GAAG,CAAC;AAAA,IAC/D,WAAW,SAAS,SAAS,IAAI,KAAS;AACxC,aAAO;AACP,cAAQ,MAAM,IAAI,0BAAU,KAAK,CAAC,CAAC,EAAE,IAAI,0BAAU,KAAK,EAAE,CAAC;AAAA,IAC7D,WAAW,SAAS,SAAS,IAAI,KAAQ;AACvC,aAAO;AACP,cAAQ,MAAM,IAAI,0BAAU,KAAK,CAAC,CAAC,EAAE,IAAI,0BAAU,KAAK,EAAE,CAAC;AAAA,IAC7D;AAEA,QAAI,KAAK;AAAA,MACP;AAAA,MACA,YAAY,KAAK;AAAA,MACjB,WAAW,KAAK;AAAA,MAChB,iCAAiCA;AAAA,MACjC;AAAA,MACA;AAAA,MACA,mBAAmB,MAAM,SAAS;AAAA,IACpC,CAAC;AAAA,EACH,SAAS,OAAO;AACd,QAAI,OAAO,GAAG;AACd,QAAI,KAAK,EAAE,OAAO,MAAM,SAAS,MAAM,CAAC;AAAA,EAC1C;AACF,CAAC;AAED,IAAM,OAAO;AACN,IAAM,SAAS,IAAI;AAAA,EAAO;AAAA,EAAM,MACrC,QAAQ,IAAI;AAAA,8CACyB,IAAI,GAAG;AAC9C;;;AiBlLA,IAAAC,UAAwB;AACjB,eAAO;AAEd,OAAO,UAAU,SAAS,WAAY;AACpC,SAAO,KAAK,SAAS;AACvB;","names":["uuidv4","uuidv4","import_ethers","import_ethers","import_ethers","import_ethers","_abi","import_ethers","_abi","import_ethers","_abi","import_ethers","_abi","import_ethers","_abi","_bytecode","isSuperArgs","import_ethers","_abi","import_ethers","_abi","_bytecode","isSuperArgs","dotenv","FeeReimbursementApp__factory","import_ethers","express","brevisRequest","dotenv"]}