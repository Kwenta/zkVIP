{"version":3,"sources":["../src/server/index.ts","../src/db/index.ts","../src/constants/index.ts","../src/interval_jobs/index.ts","../src/graphql/common.ts","../src/graphql/index.ts","../src/prover/index.ts","../src/query/index.ts","../src/rpc/index.ts","../src/ether_interactions/index.ts","../../contract/typechain/index.ts","../../contract/typechain/factories/Ownable__factory.ts","../../contract/typechain/factories/IERC20__factory.ts","../../contract/typechain/factories/BrevisApp__factory.ts","../../contract/typechain/factories/IBrevisProof__factory.ts","../../contract/typechain/factories/Tx__factory.ts","../../contract/typechain/factories/FeeReimbursementApp__factory.ts","../../contract/typechain/factories/IFeeRebateTierModule__factory.ts","../../contract/typechain/factories/MockFeeModule__factory.ts","../src/brevis_request/BrevisRequest__factory.ts","../src/server/type.ts","../src/index.ts"],"sourcesContent":["import express from \"express\";\nimport { findUserExistingUTVF, getUserTradeVolumeFee, insertUserTradeVolumeFee } from \"../db/index.ts\";\nimport {\n  PROOF_STATUS_ONCHAIN_VERIFIED,\n  \n  FEE_REIMBURSEMENT_INFO_STATUS_INIT,\n  FEE_REIMBURSEMENT_INFO_STATUS_NEED_TO_SUBMIT_REQUEST,\n  FEE_REIMBURSEMENT_INFO_STATUS_UNDEFINED,\n  FEE_REIMBURSEMENT_INFO_STATUS_WAITING_FOR_RESULT,\n  FEE_REIMBURSEMENT_INFO_STATUS_FEE_REIMBURSED,\n  FEE_REIMBURSEMENT_INFO_STATUS_INELIGIBLE_ACCOUNT_ID,\n  PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED,\n  PROOF_STATUS_INELIGIBLE_ACCOUNT_ID,\n  PROOF_STATUS_BREVIS_QUERY_ERROR,\n} from \"../constants/index.ts\";\nimport {\n  getReceiptInfos,\n  getStorageInfos,\n  prepareNewDayTradeClaims,\n  prepareUserTradeVolumeFees,\n  queryUserSwapAmountInput,\n  submitUserSwapAmountTx,\n} from \"../interval_jobs/index.ts\";\nimport {\n  monitorFeeAccumulated,\n  monitorBrevisRequest,\n} from \"../ether_interactions/index.ts\";\nimport { validTimeNumber, UserTradeVolumeFee, findNextDay, findDayStartTimestamp, findDayEndTimestamp } from \"./type.ts\";\nimport { BigNumber } from \"ethers\";\nimport moment from \"moment\";\nimport { postSwapsQuery } from \"../graphql/index.ts\";\nimport { error } from \"console\";\n\nconst app = express();\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\napp.use((req, res, next) => {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Headers\", \"Content-Type\");\n  next();\n});\ngetReceiptInfos().then();\nsetInterval(getReceiptInfos, 1000);\ngetStorageInfos().then();\nsetInterval(getStorageInfos, 10000);\nprepareUserTradeVolumeFees().then();\nsetInterval(prepareUserTradeVolumeFees, 2000);\n\nmonitorFeeAccumulated();\nmonitorBrevisRequest();\n\nprepareNewDayTradeClaims();\nsetInterval(prepareUserTradeVolumeFees, 30000);\n\nsubmitUserSwapAmountTx();\nsetInterval(submitUserSwapAmountTx, 1000);\n\npostSwapsQuery(1714799749, 1715459199, 1715459199).then().catch(error => {\n  console.error(\"postSwapsQuery error\", error)\n})\n\napp.post(\"/kwenta/newTradeFeeReimbursement\", async (req, res) => {\n  try {\n    const { account, start_year_month_day, end_year_month_day } = req.body;\n\n    const start = Number(start_year_month_day)\n    const end = Number(end_year_month_day)\n\n    if (isNaN(start) || isNaN(end)) {\n      res.status(500);\n      res.send({ error: true, message: \"invalid claim trade time period\" });\n      return\n    }\n\n    if (start > end) {\n      res.status(500);\n      res.send({ error: true, message: \"start is bigger than end\" });\n      return\n    }\n\n\n    if (end >= Number((moment(new Date())).format('YYYYMMDD'))) {\n      res.status(500);\n      res.send({ error: true, message: \"invalid end trade period\" });\n      return\n    }\n\n    if (!validTimeNumber(start)) {\n      res.status(500);\n      res.send({ error: true, message: \"invalid start trade period\" });\n      return\n    }\n\n    if (!validTimeNumber(end)) {\n      res.status(500);\n      res.send({ error: true, message: \"invalid end trade period\" });\n      return\n    }\n\n    var utvf = await findUserExistingUTVF(account, BigInt(start), BigInt(end));\n    if (utvf != undefined && utvf != null && utvf) {\n      res.json({ query_id: utvf.id });\n      return;\n    }\n\n    const src_chain_id = BigInt(process.env.SRC_CHAIN_ID ?? 8453);\n    const dst_chain_id = BigInt(process.env.DST_CHAIN_ID ?? 8453);\n\n    var utvf = await insertUserTradeVolumeFee(\n      src_chain_id,\n      dst_chain_id,\n      account,\n      BigInt(start),\n      BigInt(end),\n    );\n\n    console.log(\"New User Comes In: \", utvf.id, (new Date()).toLocaleString())\n\n    queryUserSwapAmountInput(utvf).then()\n    res.json({ query_id: utvf.id });\n  } catch (error) {\n    res.status(500);\n    res.send({ error: true, message: error });\n  }\n});\n\napp.get(\"/kwenta/getTradeFeeReimbursementInfo\", async (req, res) => {\n  try {\n    const { account, start_year_month_day, end_year_month_day } = req.query;\n    const start = Number(start_year_month_day)\n    const end = Number(end_year_month_day)\n   \n    if (account?.toString() == null || account?.toString() == undefined) {\n      res.status(500);\n      res.send({ error: true, message: \"invalid account id\" });\n      return\n    }\n\n    if (isNaN(start) || isNaN(end)) {\n      res.status(500);\n      res.send({ error: true, message: \"invalid claim trade time period\" });\n      return\n    }\n\n    if (start > end) {\n      res.status(500);\n      res.send({ error: true, message: \"start is bigger than end\" });\n      return\n    }\n\n\n    if (end >= Number((moment(new Date())).format('YYYYMMDD'))) {\n      res.status(500);\n      res.send({ error: true, message: \"invalid end trade period\" });\n      return\n    }\n\n    if (!validTimeNumber(start)) {\n      res.status(500);\n      res.send({ error: true, message: \"invalid start trade period\" });\n      return\n    }\n\n    if (!validTimeNumber(end)) {\n      res.status(500);\n      res.send({ error: true, message: \"invalid end trade period\" });\n      return\n    }\n\n    const utvf = await findUserExistingUTVF(account?.toString(), BigInt(start), BigInt(end));\n    if (utvf === undefined || utvf === null || !utvf) {\n      res.status(500);\n      res.send({ error: true, message: \"info not found\" });\n      return;\n    }\n\n    let message = \"\";\n    let status = FEE_REIMBURSEMENT_INFO_STATUS_UNDEFINED;\n    let brevisRequest =\n      \"\" + process.env.BREVIS_REQUEST;\n    if (Number(utvf.status) == Number(PROOF_STATUS_ONCHAIN_VERIFIED)) {\n      status = FEE_REIMBURSEMENT_INFO_STATUS_FEE_REIMBURSED;\n      message = \"Fee reimbursed\";\n    } else if (Number(utvf.status) == Number(PROOF_STATUS_BREVIS_QUERY_ERROR)) {\n      status = FEE_REIMBURSEMENT_INFO_STATUS_FEE_REIMBURSED;\n      message = \"unsupported user, please contact custom support\";\n    } else if (Number(utvf.status) >= Number(PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED)\n      && Number(utvf.status) < Number(PROOF_STATUS_BREVIS_QUERY_ERROR)\n      && !utvf.request_sent\n    ) {\n      status = FEE_REIMBURSEMENT_INFO_STATUS_NEED_TO_SUBMIT_REQUEST;\n      message =\n        \"You need to submit SendRequest transaction with query_hash and query_fee on brevis request contract.\" +\n        \"And use address(\" +\n        process.env.FEE_REIMBURSEMENT +\n        \") as _callback\";\n    } else if (utvf.request_sent) {\n      status = FEE_REIMBURSEMENT_INFO_STATUS_WAITING_FOR_RESULT;\n      message = \"Brevis is preparing swap amount proof\";\n    } else if ( Number(utvf.status) == Number(PROOF_STATUS_INELIGIBLE_ACCOUNT_ID)) {\n      status = FEE_REIMBURSEMENT_INFO_STATUS_INELIGIBLE_ACCOUNT_ID\n      message = \"Ineligible account id\";\n\n      res.json({\n        status: status,\n        message: message,\n        tier: -1,\n        fee_to_reimbursed: 0,\n      });\n      return \n    } else {\n      status = FEE_REIMBURSEMENT_INFO_STATUS_INIT;\n      message = \"Wait until query_hash and query_fee is ready\";\n    }\n    var feeBN = BigNumber.from(\"0\")\n    var volumeBN = BigNumber.from(\"0\")\n    var totalFeeBN = BigNumber.from(\"0\")\n    var tier = -1\n    try {\n      var volume = utvf.volume\n      if (volume === \"\") {\n        volume = \"0\"\n      }\n      volumeBN = BigNumber.from(volume)\n      const volumeWithoutDecimalBN = volumeBN.div(BigNumber.from(\"1000000000000000000\"))\n      var fee = utvf.fee\n      if (fee === \"\") {\n        fee = \"0\"\n      }\n      feeBN = BigNumber.from(fee)\n      totalFeeBN = BigNumber.from(fee)\n      tier = -1\n\n      if (volumeWithoutDecimalBN.toNumber() > 100000000) {\n        tier = 3\n        feeBN = feeBN.mul(BigNumber.from(9)).div(BigNumber.from(10))\n      } else if (volumeWithoutDecimalBN.toNumber() > 10000000) {\n        tier = 2    \n        feeBN = feeBN.mul(BigNumber.from(75)).div(BigNumber.from(100))\n      } else if (volumeWithoutDecimalBN.toNumber() > 1000000) {\n        tier = 1\n        feeBN = feeBN.mul(BigNumber.from(5)).div(BigNumber.from(10))\n      } else if (volumeWithoutDecimalBN.toNumber() > 100000) {\n        tier = 0\n        feeBN = feeBN.mul(BigNumber.from(2)).div(BigNumber.from(10))\n      } else {\n        feeBN = BigNumber.from(0)\n        message = \"Ineligble user\"\n      }\n    } catch {\n      status = FEE_REIMBURSEMENT_INFO_STATUS_INIT;\n      message = \"preparing account info\";\n      res.json({\n        status: status,\n        message: message,\n      });\n      return \n    }\n   \n    res.json({\n      status: status,\n      query_hash: utvf.brevis_query_hash,\n      query_fee: utvf.brevis_query_fee,\n      brevis_request_contract_address: brevisRequest,\n      message: message,\n      tier: tier,\n      fee_to_be_reimbursed: feeBN.toString(),\n      volume: volumeBN.toString(),\n      total_fee: totalFeeBN.toString(),\n    });\n  } catch (error) {\n    res.status(500);\n    res.send({ error: true, message: error });\n  }\n});\n\nconst port = 11084;\nexport const server = app.listen(port, () =>\n  console.log(`\n🚀 Server ready at: http://localhost:${port}!`)\n);\n","import { PrismaClient } from \"@prisma/client\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  PROOF_STATUS_BREVIS_QUERY_ERROR,\n  PROOF_STATUS_INIT,\n  PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED,\n  STATUS_INIT,\n} from \"../constants/index.ts\";\n\nconst prisma = new PrismaClient();\n\n// transaction_type: OrderFeeFlowTx is 1, ExecutionTx is 2\nasync function insertReceipt(tx_hash: string, account: string, transaction_type: bigint): Promise<any> {\n  return prisma.receipt.create({\n    data: {\n      id: uuidv4(),\n      tx_hash: tx_hash?.toLowerCase(),\n      account: account,\n      status: STATUS_INIT,\n      create_time: new Date(),\n      update_time: new Date(),\n      transaction_type: transaction_type,\n    },\n  });\n}\n\nasync function updateReceipt(\n  id: string,\n  status: bigint,\n  data: string,\n): Promise<any> {\n  return prisma.receipt.update({\n    where: {\n      id: id,\n    },\n    data: {\n      status: status,\n      update_time: new Date(),\n      data: data,\n    },\n  });\n}\n\nasync function getReceipt(id: string): Promise<any> {\n  return prisma.receipt.findUnique({\n    where: {\n      id: id,\n    },\n  });\n}\n\nasync function findNotReadyReceipts(): Promise<any> {\n  var now = new Date();\n  return prisma.receipt.findMany({\n    take: 10,\n    where: {\n      status: STATUS_INIT,\n      update_time: {\n        lte: now,\n      },\n    },\n  });\n}\n\nasync function insertStorage(account: string, key: string, blkNumber: bigint): Promise<any> {\n  return prisma.storage.create({\n    data: {\n      id: uuidv4(),\n      account: account,\n      key: key,\n      blk_number: BigInt(blkNumber),\n      status: STATUS_INIT,\n      create_time: new Date(),\n      update_time: new Date(),\n    },\n  });\n}\n\nasync function updateStorage(\n  id: string,\n  status: bigint,\n  value: string,\n  data: string,\n): Promise<any> {\n  return prisma.storage.update({\n    where: {\n      id: id,\n    },\n    data: {\n      status: status,\n      value: value,\n      update_time: new Date(),\n      data: data,\n    },\n  });\n}\n\nasync function getStorage(id: string): Promise<any> {\n  return prisma.storage.findUnique({\n    where: {\n      id: id,\n    },\n  });\n}\n\nasync function findNotReadyStorages(): Promise<any> {\n  var now = new Date();\n  now.setSeconds(now.getSeconds() - 10);\n  return prisma.receipt.findMany({\n    take: 10,\n    where: {\n      status: STATUS_INIT,\n      update_time: {\n        lte: now,\n      },\n    },\n  });\n}\n\nasync function insertUserTradeVolumeFee(\n  src_chain_id: bigint,\n  dst_chain_id: bigint,\n  account: string,\n  start_ymd: bigint,\n  end_ymd: bigint,\n): Promise<any> {\n  return prisma.user_trade_volume_fee.create({\n    data: {\n      id: uuidv4(),\n      src_chain_id: src_chain_id,\n      dst_chain_id: dst_chain_id,\n      account: account?.toLowerCase(),\n      start_ymd: start_ymd,\n      end_ymd: end_ymd,\n      status: PROOF_STATUS_INIT,\n      create_time: new Date(),\n      update_time: new Date(),\n      request_sent: false,\n    },\n  });\n}\n\nasync function updateUserTradeVolumeFee(utvf: any): Promise<any> {\n  return prisma.user_trade_volume_fee.update({\n    where: {\n      id: utvf.id,\n    },\n    data: {\n      volume: utvf.volume,\n      fee: utvf.fee,\n      receipt_ids: utvf.receipt_ids,\n      storage_ids: utvf.storage_ids,\n      brevis_query_hash: utvf.brevis_query_hash?.toLowerCase(),\n      brevis_query_fee: utvf.brevis_query_fee,\n      proof: utvf.proof,\n      status: utvf.status,\n      update_time: new Date(),\n      prover_id: utvf.prover_id,\n      request_sent: utvf.request_sent,\n    },\n  });\n}\n\nasync function getUserTradeVolumeFee(id: string): Promise<any> {\n  return prisma.user_trade_volume_fee.findUnique({\n    where: {\n      id: id,\n    },\n  });\n}\n\nasync function findUserExistingUTVF(\n  account: string,\n  start_blk_num: bigint,\n  end_blk_num: bigint\n): Promise<any> {\n  return prisma.user_trade_volume_fee.findFirst({\n    where: {\n      account: account?.toLowerCase(),\n      start_blk_num: {\n        equals: start_blk_num,\n      },\n      end_blk_num: {\n        equals: end_blk_num,\n      }\n    },\n  });\n}\n\nasync function findUserTradeVolumeFees(status: bigint): Promise<any> {\n  return prisma.user_trade_volume_fee.findMany({\n    take: 10,\n    where: {\n      status: {\n        equals: status,\n      },\n    },\n  });\n}\n\nasync function findTxToBeSent(): Promise<any> {\n  return prisma.user_trade_volume_fee.findMany({\n    take: 1,\n    where: {\n      status: {\n        gte: PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED,\n        lt: PROOF_STATUS_BREVIS_QUERY_ERROR,\n      },\n      request_sent: {\n        equals: false,\n      }\n    },\n  });\n}\n\nasync function updateBrevisRequestStatus(\n  brevis_query_hash: string\n): Promise<any> {\n  return prisma.user_trade_volume_fee.updateMany({\n    where: {\n      brevis_query_hash: brevis_query_hash?.toLowerCase(),\n    },\n    data: {\n      request_sent: true,\n    },\n  });\n}\n\nasync function insertDailyTrack(\n  year_month_day: bigint,\n): Promise<any> {\n  return prisma.daily_track.create({\n    data: {\n      year_month_day: year_month_day,\n    },\n  });\n}\n\nasync function getDailyTrack(year_month_day: bigint): Promise<any> {\n  return prisma.daily_track.findUnique({\n    where: {\n      year_month_day: year_month_day,\n    },\n  });\n}\n\nexport {\n  insertReceipt,\n  updateReceipt,\n  getReceipt,\n  findNotReadyReceipts,\n  insertUserTradeVolumeFee,\n  updateUserTradeVolumeFee,\n  getUserTradeVolumeFee,\n  findUserExistingUTVF,\n  findUserTradeVolumeFees,\n  updateBrevisRequestStatus,\n  insertStorage,\n  updateStorage,\n  getStorage,\n  findNotReadyStorages,\n  insertDailyTrack,\n  getDailyTrack,\n  findTxToBeSent,\n};\n","const STATUS_UNKNOWN = BigInt(0)\nconst STATUS_INIT = BigInt(1)\nconst STATUS_READY = BigInt(2)\n\nconst PROOF_STATUS_UNKNOWN = BigInt(0)\nconst PROOF_STATUS_INIT = BigInt(1)\nconst PROOF_STATUS_INPUT_REQUEST_SENT = BigInt(2)\nconst PROOF_STATUS_INPUT_READY = BigInt(3)\nconst PROOF_STATUS_PROVING_SENT = BigInt(4)\nconst PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED = BigInt(5)\nconst PROOF_STATUS_PROOF_UPLOAD_SENT = BigInt(7)\nconst PROOF_STATUS_PROOF_UPLOADED = BigInt(8)\nconst PROOF_STATUS_BREVIS_QUERY_ERROR = BigInt(9)\nconst PROOF_STATUS_ONCHAIN_VERIFIED = BigInt(11)\nconst PROOF_STATUS_INELIGIBLE_ACCOUNT_ID = BigInt(99)\n\nconst FEE_REIMBURSEMENT_INFO_STATUS_UNDEFINED = 0\nconst FEE_REIMBURSEMENT_INFO_STATUS_INIT = 1\nconst FEE_REIMBURSEMENT_INFO_STATUS_INELIGIBLE_ACCOUNT_ID = 2\nconst FEE_REIMBURSEMENT_INFO_STATUS_NEED_TO_SUBMIT_REQUEST = 3\nconst FEE_REIMBURSEMENT_INFO_STATUS_WAITING_FOR_RESULT = 4\nconst FEE_REIMBURSEMENT_INFO_STATUS_FEE_REIMBURSED = 5\n\n\nconst OrderFlowFeeImposedEvent                = \"0x213209073252965f156ceca72c65727bfcf77e3f25ca2a1f23a1b9db58295d48\".toLowerCase()\nconst OrderFlowFeeImposedEventContractAddress = \"0x6B32d15a6Cb77ea227A6Fb19532b2de542c45AC6\".toLowerCase()\nconst DelayedOrderSubmittedEvent              = \"0x9deb3648ccf8efc44205985ac6ead4ffb30791fea9ce7f9437ae398b31cf9d5a\".toLowerCase()\nconst\tSynthetixPerpsV2ProxyContractAddress    = \"0x2B3bb4c683BFc5239B029131EEf3B1d214478d93\".toLowerCase()\nconst PositionModifiedEvent                   = \"0xc0d933baa356386a245ade48f9a9c59db4612af2b5b9c17de5b451c628760f43\".toLowerCase()\n\nfunction hexStringToUint8Array(hexString: string){\n    if (hexString.length % 2 !== 0){\n      throw \"Invalid hexString\";\n    }/*from  w w w.  j  av a 2s  . c  o  m*/\n    var arrayBuffer = new Uint8Array(hexString.length / 2);\n  \n    for (var i = 0; i < hexString.length; i += 2) {\n      var byteValue = parseInt(hexString.substr(i, 2), 16);\n      if (isNaN(byteValue)){\n        throw \"Invalid hexString\";\n      }\n      arrayBuffer[i/2] = byteValue;\n    }\n  \n    return arrayBuffer;\n}\n\nexport {\n    STATUS_UNKNOWN,\n    STATUS_INIT,\n    STATUS_READY,\n    PROOF_STATUS_UNKNOWN,\n    PROOF_STATUS_INIT,\n    PROOF_STATUS_INPUT_REQUEST_SENT,\n    PROOF_STATUS_INPUT_READY,\n    PROOF_STATUS_PROVING_SENT,\n    PROOF_STATUS_PROOF_UPLOAD_SENT,\n    PROOF_STATUS_PROOF_UPLOADED,\n    PROOF_STATUS_BREVIS_QUERY_ERROR,\n    PROOF_STATUS_ONCHAIN_VERIFIED,\n    PROOF_STATUS_INELIGIBLE_ACCOUNT_ID,\n    PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED,\n    \n    FEE_REIMBURSEMENT_INFO_STATUS_UNDEFINED,\n    FEE_REIMBURSEMENT_INFO_STATUS_INIT,\n    FEE_REIMBURSEMENT_INFO_STATUS_INELIGIBLE_ACCOUNT_ID,\n    FEE_REIMBURSEMENT_INFO_STATUS_NEED_TO_SUBMIT_REQUEST,\n    FEE_REIMBURSEMENT_INFO_STATUS_WAITING_FOR_RESULT,\n    FEE_REIMBURSEMENT_INFO_STATUS_FEE_REIMBURSED,\n\n    OrderFlowFeeImposedEvent,\n    OrderFlowFeeImposedEventContractAddress,\n    DelayedOrderSubmittedEvent,\n    SynthetixPerpsV2ProxyContractAddress,\n    PositionModifiedEvent,\n    hexStringToUint8Array\n}\n","import { BigNumber } from \"ethers\";\nimport {\n  PROOF_STATUS_INELIGIBLE_ACCOUNT_ID,\n  PROOF_STATUS_INIT,\n  PROOF_STATUS_INPUT_READY,\n  PROOF_STATUS_INPUT_REQUEST_SENT,\n  PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED,\n} from \"../constants/index.ts\";\nimport {\n  findNotReadyReceipts, \n  findNotReadyStorages, \n  findTxToBeSent, \n  findUserTradeVolumeFees,\n  getDailyTrack,\n  getUserTradeVolumeFee,\n  insertDailyTrack,\n  insertReceipt,\n  updateUserTradeVolumeFee,\n} from \"../db/index.ts\";\nimport { getAvailableAccountIds } from \"../graphql/index.ts\";\nimport { sendUserTradeVolumeFeeProvingRequest, uploadUserTradeVolumeFeeProof } from \"../prover/index.ts\";\nimport { QueryOrderTxsByAccount } from \"../query/index.ts\";\nimport { querySingleReceipt, querySingleStorage } from \"../rpc/index.ts\";\nimport { findNextDay, getCurrentDay } from \"../server/type.ts\";\nimport moment from \"moment\";\nimport { submitBrevisRequestTx } from \"../ether_interactions/index.ts\";\n\nexport async function prepareNewDayTradeClaims() {\n  try {\n    const today = Number((moment(new Date())).format('YYYYMMDD'))\n    var todayInTrack = await getDailyTrack(BigInt(today));\n    if (todayInTrack != undefined && todayInTrack != null && todayInTrack) {\n      return;\n    }\n\n    // TODO: Get yesterday's all available accountId\n    await getAvailableAccountIds()\n    // TODO: Uncomment insertDailyTrack for today\n    // await insertDailyTrack(BigInt(today))\n  } catch (error) {\n    console.error(\"failed to prepare new day trade claims\", error)\n  }\n}\n\nexport async function getReceiptInfos() {\n  try {\n    const receipts = await findNotReadyReceipts();\n    let promises = Array<Promise<void>>();\n    for (let i = 0; i < receipts.length; i++) {\n      promises.push(querySingleReceipt(receipts[i]));\n    }\n\n    await Promise.all(promises);\n  } catch (error) {\n    console.error(\"failed to get receipt infos\");\n  }\n}\n\nexport async function getStorageInfos() {\n  try {\n    const storages = await findNotReadyStorages();\n    let promises = Array<Promise<void>>();\n    for (let i = 0; i < storages.length; i++) {\n      promises.push(querySingleStorage(storages[i]));\n    }\n\n    await Promise.all(promises);\n  } catch (error) {\n    console.error(\"failed to get storage infos\");\n  }\n}\n\nexport async function prepareUserTradeVolumeFees() {\n  try {\n    let promises = Array<Promise<void>>();\n    promises.push(prepareUserSwapAmountInput());\n    promises.push(prepareUserSwapAmountProof());\n    promises.push(uploadUserSwapAmountProof());\n    await Promise.all(promises);\n  } catch (error) {\n    console.error(\"failed to prepare utvfs\", error);\n  }\n}\n\nasync function prepareUserSwapAmountInput() {\n  try {\n    const utvfs = await findUserTradeVolumeFees(PROOF_STATUS_INIT);\n    let promises = Array<Promise<void>>();\n    for (let i = 0; i < utvfs.length; i++) {\n      promises.push(queryUserSwapAmountInput(utvfs[i]));\n    }\n    await Promise.all(promises);\n  } catch (error) {\n    console.error(\"failed to prepare utvf input\", error);\n  }\n}\n\nexport async function queryUserSwapAmountInput(userSwapAmountOld: any) {\n  const userSwapAmount = await getUserTradeVolumeFee(userSwapAmountOld.id)\n\n  if (userSwapAmount.status != PROOF_STATUS_INIT) {\n    return \n  }\n  userSwapAmount.status = PROOF_STATUS_INPUT_REQUEST_SENT\n  await updateUserTradeVolumeFee(userSwapAmount)\n\n  const start = getCurrentDay(Number(userSwapAmount.start_ymd))\n  const end = findNextDay(Number(userSwapAmount.end_ymd))\n\n\n  if (start.length === 0 || end.length === 0) {\n    console.error(\"invalid start end time format\", userSwapAmount.start_ymd, userSwapAmount.end_ymd, userSwapAmount.id)\n    userSwapAmount.status = PROOF_STATUS_INIT\n    updateUserTradeVolumeFee(userSwapAmount)\n  }\n\n  console.log(\"Start to send dune query: \", userSwapAmount.id, (new Date()).toLocaleString())\n\n  const duneResult = await QueryOrderTxsByAccount(start, end, userSwapAmount.account)\n\n  console.log(\"Dune resule returned: \", userSwapAmount.id, (new Date()).toLocaleString())\n\n\n  if (duneResult.txs.length === 0) {\n    console.error(\"no order settled found\")\n    userSwapAmount.status = PROOF_STATUS_INELIGIBLE_ACCOUNT_ID\n    updateUserTradeVolumeFee(userSwapAmount)\n    return\n  } else if (BigNumber.from(duneResult.volume).lte(BigNumber.from(\"100000000000000000000000\"))) {\n    console.error(\"invalid volume\", duneResult.volume, userSwapAmount.account)\n    userSwapAmount.status = PROOF_STATUS_INELIGIBLE_ACCOUNT_ID\n    updateUserTradeVolumeFee(userSwapAmount)\n    return\n  }\n\n  const promises = Array<Promise<string>>();\n\n  duneResult.txs.forEach((tx) => {\n    promises.push(\n      // insertReceipt(tx, userSwapAmount.account).then((receipt) => {\n      //   return receipt.id;\n      // })\n    );\n  });\n\n  const receiptIds = await Promise.all(promises);\n  userSwapAmount.receipt_ids = receiptIds.reduce(\n    (accumulator, currentValue) => accumulator + \",\" + currentValue\n  );\n  userSwapAmount.status = PROOF_STATUS_INPUT_READY;\n  userSwapAmount.volume = duneResult.volume\n  userSwapAmount.fee = duneResult.fee\n\n  console.log(\"User Circuit Input Ready: \", userSwapAmount.id, (new Date()).toLocaleString())\n\n  updateUserTradeVolumeFee(userSwapAmount).then(value => {\n    sendUserTradeVolumeFeeProvingRequest(value)\n  }).then();\n}\n\nasync function prepareUserSwapAmountProof() {\n  try {\n    const utvfs = await findUserTradeVolumeFees(PROOF_STATUS_INPUT_READY);\n    let promises = Array<Promise<void>>();\n    for (let i = 0; i < utvfs.length; i++) {\n      promises.push(sendUserTradeVolumeFeeProvingRequest(utvfs[i]));\n    }\n    await Promise.all(promises);\n  } catch (error) {\n    console.error(\"failed to send user swap amount prove\", error);\n  }\n}\n\nasync function uploadUserSwapAmountProof() {\n  try {\n    const utvfs = await findUserTradeVolumeFees(PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED);\n    let promises = Array<Promise<void>>();\n    for (let i = 0; i < utvfs.length; i++) {\n      promises.push(uploadUserTradeVolumeFeeProof(utvfs[i]));\n    }\n    await Promise.all(promises);\n  } catch (error) {\n    console.error(\"failed to upload user swap amount proof\");\n  }\n}\n\nexport async function submitUserSwapAmountTx() {\n  try {\n    const utvfs = await findTxToBeSent();\n    let promises = Array<Promise<void>>();\n    for (let i = 0; i < utvfs.length; i++) {\n      promises.push(submitBrevisRequestTx(utvfs[i]));\n    }\n    await Promise.all(promises);\n  } catch (error) {\n    console.error(\"failed to submit tx\", error);\n  }\n}","const PoolAddr = \"0x9616bdc926880053545675561afba23ad0455e47\";\nconst GraphRpc = \"https://subgraph.satsuma-prod.com/616cc2144c5c/kwenta/optimism-perps/version/0.0.22/api\";\n\nconst SrcChainId = 17000;\nconst DstChainId = 17000;\n\nexport {\n  PoolAddr,\n  GraphRpc,\n  SrcChainId,\n  DstChainId,\n};\n","import { GraphRpc, PoolAddr } from \"./common.ts\";\n\nexport const postSwapsQuery = async (\n  timestamp30DAgo: number,\n  startTimestamp: number,\n  endTimestamp: number\n) => {\n  try {\n    const res = await fetch(GraphRpc, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        query: `{\n            futuresTrades(orderBy: timestamp, orderDirection: asc, where: {timestamp_gte:\"${timestamp30DAgo}\", timestamp_lte: \"${endTimestamp}\"}) \n          {\n            orderFeeFlowTxhash,\n            executionTxhash,\n          }\n        }`,\n      }),\n    });\n    console.log(6677777, res);\n    if (res.status === 200) {\n      const resBody = await res.json();\n      console.log(111222333, resBody);\n    }\n  } catch (error) {\n    console.log(\"getPositions66 graphql error:\", error);\n    return { txs: [], error: error };\n  }\n};\n\nexport const getAvailableAccountIds = async () => {};\n","import * as sdk from \"brevis-sdk-typescript\";\nimport { Receipt, UserTradeVolumeFee } from \"../server/type.ts\";\nimport {\n  getReceipt,\n  getUserTradeVolumeFee,\n  updateUserTradeVolumeFee,\n} from \"../db/index.ts\";\nimport {\n  PROOF_STATUS_BREVIS_QUERY_ERROR,\n  PROOF_STATUS_INPUT_READY,\n  PROOF_STATUS_PROOF_UPLOAD_SENT,\n  PROOF_STATUS_PROOF_UPLOADED,\n  PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED,\n  PROOF_STATUS_PROVING_SENT,\n  STATUS_READY,\n} from \"../constants/index.ts\";\nimport { BigNumber, ethers } from \"ethers\";\n\nconst {\n  Brevis,\n  ErrCode,\n  ProofRequest,\n  Prover,\n  ReceiptData,\n  StorageData,\n  asUint248,\n  asUint521,\n} = sdk;\n\nconst provers = [\n  new Prover(\"222.74.153.228:53248\"),\n  new Prover(\"222.74.153.228:53249\"),\n  new Prover(\"222.74.153.228:53250\")\n]\n\nconst brevis = new Brevis(\"appsdk.brevis.network:11080\");\n\nconst buildUserTradeVolumeFeeProofReq = async (utvf: UserTradeVolumeFee) => {\n  const proofReq = new ProofRequest();\n  const ids = utvf.receipt_ids.split(\",\");\n  let promises = Array<Promise<Receipt | undefined>>();\n  const startBlkNum = Number(utvf.start_blk_num)\n  const endBlkNum = Number(utvf.end_blk_num)\n  for (let i = 0; i < ids.length; i++) {\n    promises.push(\n      getReceipt(ids[i]).then((value) => {\n        const r = value as Receipt;\n        if (r === undefined || r === null) {\n          return undefined;\n        } else {\n          if (r.should_be_filtered_out) {\n            return undefined;\n          } else {\n            return r;\n          }\n        }\n      })\n    );\n  }\n\n  const results = await Promise.all(promises);\n\n  var unclaimableReceiptIndexes = Array<number>();\n  var claimableReceiptIndexes = Array<number>();\n\n  const sortedReceipts = new Array<Receipt>()\n  for (let i = 0; i < results.length; i++) {\n    const receipt = results[i];\n    if (receipt === undefined) {\n      continue;\n    }\n    if (receipt.status !== STATUS_READY) {\n      throw new Error(\"receipts not ready\"); \n    }\n    sortedReceipts.push(receipt)\n  }\n\n  sortedReceipts.sort((a,b) => {\n    const dataA = JSON.parse(a.data);\n    const blkNumberA= Number(dataA.block_num)\n\n    const dataB = JSON.parse(b.data);\n    const blkNumberB= Number(dataB.block_num)\n    \n    if (blkNumberA < blkNumberB) {\n      return -1\n    } else {\n      return 1\n    }\n  })\n\n  for (let i = 0; i < sortedReceipts.length; i++) {\n    const receipt = sortedReceipts[i];\n    const data = JSON.parse(receipt.data);\n    const blkNumber= Number(data.block_num)\n    if (isNaN(blkNumber)) {\n      console.error(\"invalid receipt block number\", data)\n    }\n\n    if (blkNumber >= startBlkNum && blkNumber <= endBlkNum) {\n      claimableReceiptIndexes.push(i)\n    } else if (blkNumber < startBlkNum && blkNumber >= startBlkNum - 43200 * 30) {\n\n      unclaimableReceiptIndexes.push(i)\n    } else {\n      console.error(\"out of range  receipt block number\", data)\n    }\n  }\n\n  var proverIndex = -1\n  var initialClaimableReceiptIndex = 0\n  if (unclaimableReceiptIndexes.length <= 236 && claimableReceiptIndexes.length <= 20) {\n    proverIndex = 0\n    initialClaimableReceiptIndex = 236\n  } else if (unclaimableReceiptIndexes.length <= 462 && claimableReceiptIndexes.length <= 50) {\n    proverIndex = 1\n    initialClaimableReceiptIndex = 462\n  } else if (unclaimableReceiptIndexes.length <= 4700 && claimableReceiptIndexes.length <=300) {\n    proverIndex = 2\n    initialClaimableReceiptIndex = 4700\n  } else if (claimableReceiptIndexes.length == 0) {\n    console.error(\"no claimable receipts\")\n  } else {\n    console.error(\"receipts out of range\", sortedReceipts.length)\n  }\n\n  var receiptIndex = 0\n  unclaimableReceiptIndexes.forEach(index => {\n    const receipt = sortedReceipts[index];\n    if (receipt === undefined) {\n      return;\n    }\n    const data = JSON.parse(receipt.data);\n    const blkNumber= Number(data.block_num)\n    if (isNaN(blkNumber)) {\n      console.error(\"invalid receipt block number\", data)\n    }\n    proofReq.addReceipt(\n      new ReceiptData({\n        block_num: Number(data.block_num),\n        tx_hash: receipt.tx_hash,\n        fields: [\n          new sdk.Field(data.fields[0]),\n          new sdk.Field(data.fields[1]),\n          new sdk.Field(data.fields[2]),\n          new sdk.Field(data.fields[3]), \n        ],\n      }),\n      receiptIndex++\n    );\n  })\n\n  claimableReceiptIndexes.forEach(index => {\n    const receipt = sortedReceipts[index];\n    if (receipt === undefined) {\n      return;\n    }\n    const data = JSON.parse(receipt.data);\n    const blkNumber= Number(data.block_num)\n    if (isNaN(blkNumber)) {\n      console.error(\"invalid receipt block number\", data)\n    }\n\n    proofReq.addReceipt(\n      new ReceiptData({\n        block_num: Number(data.block_num),\n        tx_hash: receipt.tx_hash,\n        fields: [\n          new sdk.Field(data.fields[0]),\n          new sdk.Field(data.fields[1]),\n          new sdk.Field(data.fields[2]),\n          new sdk.Field(data.fields[3]), \n        ],\n      }),\n      initialClaimableReceiptIndex++\n    );\n  })\n\n  const accountIdHex = BigNumber.from(utvf.account).toHexString()\n  \n  proofReq.setCustomInput({\n    AccountId: asUint248(accountIdHex),\n    StartBlkNum: asUint248(utvf.start_blk_num.toString()),\n    EndBlkNum: asUint248(utvf.end_blk_num.toString()),\n  });\n\n  return {proofReq: proofReq, proverIndex: proverIndex};\n};\n\nasync function sendUserTradeVolumeFeeProvingRequest(utvfOld: UserTradeVolumeFee) {\n  const utvf = await getUserTradeVolumeFee(utvfOld.id)\n  if (utvf.status != PROOF_STATUS_INPUT_READY) {\n    return \n  }\n\n  utvf.status = PROOF_STATUS_PROVING_SENT\n  await updateUserTradeVolumeFee(utvf)\n  try {\n    console.log(\"Start to Build Proof Request: \", utvf.id, (new Date()).toLocaleString())\n    const r = await buildUserTradeVolumeFeeProofReq(utvf);\n    console.log(\"User Circuit Proof Request Sent: \", utvf.id, (new Date()).toLocaleString())\n    if (r.proverIndex < 0) {\n      console.log(\"Cannot proceed cause prover index is invalid\", utvf.id, (new Date()).toLocaleString())\n      return \n    }\n    const proofRes = await provers[r.proverIndex].proveAsync(r.proofReq);\n    console.log(\"proofRes proof_id ready\",proofRes.proof_id, (new Date()).toLocaleString())\n    // error handling\n    if (proofRes.has_err) {\n      const err = proofRes.err;\n      switch (err.code) {\n        case ErrCode.ERROR_INVALID_INPUT:\n          console.error(\"invalid receipt/storage/transaction input:\", err.msg);\n          // handle invalid data input...\n          break;\n        case ErrCode.ERROR_INVALID_CUSTOM_INPUT:\n          console.error(\"invalid custom input:\", err.msg);\n          // handle invalid custom input assignment...\n          break;\n        case ErrCode.ERROR_FAILED_TO_PROVE:\n          console.error(\"failed to prove:\", err.msg);\n          // handle failed to prove case...\n          break;\n        default:\n          break;\n      }\n      return;\n    }\n\n    // Save prover id in case prepare query failed\n    utvf.prover_id = proofRes.proof_id\n    await updateUserTradeVolumeFee(utvf)\n\n    try {\n      console.log(\"send prepare query request\", (new Date()).toLocaleString())\n      const prepareQueryResponse = await brevis.prepareQuery(\n        r.proofReq, \n        proofRes.circuit_info, \n        Number(utvf.src_chain_id),\n        Number(utvf.dst_chain_id)\n      )\n\n      if (prepareQueryResponse.has_err) {\n        const err = prepareQueryResponse.err;\n        console.error(\"Failed to prepare query\", err, utvf.id)\n        utvf.status = PROOF_STATUS_BREVIS_QUERY_ERROR\n        updateUserTradeVolumeFee(utvf)\n        return \n      }\n      console.log('Ready to submit brevis query hash', prepareQueryResponse.query_hash, (new Date()).toLocaleString());\n      utvf.status = PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED\n      utvf.brevis_query_fee = prepareQueryResponse.fee\n      utvf.brevis_query_hash = prepareQueryResponse.query_hash\n\n      updateUserTradeVolumeFee(utvf).then(value => {\n        uploadUserTradeVolumeFeeProof(value)\n      }).then();\n    } catch (error) {\n      console.error(\"Failed to prepare query\", error, utvf.id)\n      utvf.status = PROOF_STATUS_BREVIS_QUERY_ERROR\n      updateUserTradeVolumeFee(utvf)\n    }\n  } catch (error) {\n    console.log(\"Prove failed back to PROOF_STATUS_INPUT_READY: \", utvf.id, (new Date()).toLocaleString())\n    utvf.status = PROOF_STATUS_INPUT_READY\n    await updateUserTradeVolumeFee(utvf)\n  }\n}\n\nasync function uploadUserTradeVolumeFeeProof(utvfOld: UserTradeVolumeFee) {\n  const utvf = await getUserTradeVolumeFee(utvfOld.id)\n  if (utvf.status != PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED) {\n    return \n  }\n\n  utvf.status = PROOF_STATUS_PROOF_UPLOAD_SENT\n  await updateUserTradeVolumeFee(utvf)\n\n  try {\n    console.log(\"Proof upload sent: \", utvf.id, utvf.prover_id, (new Date()).toLocaleString())  \n    const r = await buildUserTradeVolumeFeeProofReq(utvf);\n    if (r.proverIndex < 0) {\n      console.log(\"Cannot proceed upload proof cause prover index is invalid\", utvf.id, (new Date()).toLocaleString())\n      return \n    }\n    const getProofRes = await provers[r.proverIndex].getProof(utvf.prover_id)\n    if (getProofRes.has_err) {\n      console.error(getProofRes.err.msg);\n      utvf.status = PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED\n      await updateUserTradeVolumeFee(utvf)\n      return;\n    } else if (getProofRes.proof.length === 0) {\n      utvf.status = PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED\n      await updateUserTradeVolumeFee(utvf)\n      return;\n    }\n\n    await brevis.submitProof(\n      utvf.brevis_query_hash,\n      Number(utvf.dst_chain_id),\n      getProofRes.proof\n    );\n   \n    utvf.status = PROOF_STATUS_PROOF_UPLOADED;\n\n    console.log(\"Proof uploaded: \", utvf.id, (new Date()).toLocaleString())\n\n    updateUserTradeVolumeFee(utvf);\n  } catch (err) {\n    utvf.status = PROOF_STATUS_PROVING_BREVIS_REQUEST_GENERATED;\n    updateUserTradeVolumeFee(utvf);\n    console.error(err);\n  }\n}\n\nexport {\n  sendUserTradeVolumeFeeProvingRequest,\n  uploadUserTradeVolumeFeeProof,\n};\n","import { QueryParameter, DuneClient, ExecutionPerformance } from \"@duneanalytics/client-sdk\";\nimport * as dotenv from \"dotenv\";\nimport { BigNumber } from \"ethers\";\n\ndotenv.config();\nconst client = new DuneClient(process.env.DUNE_API_KEY ?? \"\");\nconst queryId = 3677895;\n\ntype DuneResult = {\n  txs: Array<string>,\n  fee: string,\n  volume: string,\n}\nexport async function QueryOrderTxsByAccount(\n  from: string,\n  end: string,\n  accountId: string\n): Promise<DuneResult> {\n  try {\n    console.log(\"Client send dune query: \", from, end, accountId, (new Date()).toLocaleString())\n    const results = await client.runQuery({\n      queryId: queryId,\n      limit: 100,\n      performance: ExecutionPerformance.Large,\n      query_parameters: [\n        QueryParameter.text(\"from\", from),\n        QueryParameter.text(\"to\", end),\n        QueryParameter.text(\"account_id\", accountId),\n      ],\n    })\n    console.log(\"result returned: results\", from, end, accountId, (new Date()).toLocaleString())\n    const txs = Array<string>();\n    var fee = BigNumber.from(0)\n    var volume = BigNumber.from(0)\n\n    results.result?.rows.map((record) => {\n      const tx_hash = record[\"evt_tx_hash\"];\n      const totalFees = record[\"totalFees\"]\n      const sizeDelta = record[\"sizeDelta\"]\n      const fillPrice = record[\"fillPrice\"]\n\n      fee = fee.add(BigNumber.from(totalFees))\n      volume = volume.add(\n        BigNumber.from(sizeDelta).abs().mul(BigNumber.from(fillPrice)).div(BigNumber.from(\"1000000000000000000\"))\n      )\n\n      if (typeof tx_hash === \"string\" || tx_hash instanceof String) {\n        txs.push(tx_hash.toString());\n      } else {\n        console.error(\"unknown type of dune result: \", tx_hash);\n      }\n    });\n    console.log(\"dune result ready\")\n    return {txs: txs, fee: fee.toString(), volume: volume.toString()};\n  } catch (error) {\n    console.log(\"dune error\", error);\n    console.error(\"dune result ready\", error)\n\n    return {txs: [], fee: \"0\", volume: \"0\"};\n  }\n}","import { BigNumber, ethers } from \"ethers\";\nimport { DelayedOrderSubmittedEvent, OrderFlowFeeImposedEvent, OrderFlowFeeImposedEventContractAddress, PositionModifiedEvent, STATUS_READY, SynthetixPerpsV2ProxyContractAddress } from \"../constants/index.ts\";\nimport { updateReceipt, updateStorage } from \"../db/index.ts\";\nimport { sourceChainProvider } from \"../ether_interactions/index.ts\";\n\ntype Log = {\n  contract: string,\n  log_index: number,\n  event_id: string,\n  is_topic: boolean,\n  field_index: number,\n  value: string,\n} \ntype ReceiptInfo = {\n  block_num: number,\n  tx_hash: string,\n  fields: Log[],\n}\n\nasync function querySingleReceipt(receipt: any) {\n    return sourceChainProvider\n      .getTransactionReceipt(receipt.tx_hash)\n      .catch((error) => {\n        console.log(error, error);\n      })\n      .then((transactionReceipt) => {\n        if (transactionReceipt == null || transactionReceipt == undefined) {\n          console.debug(\"tx receipt not found\", receipt.id, receipt.tx_hash);\n          return;\n        }\n        if (receipt.transaction_type == 1) {\n          const result = getJSONForOrderFeeFlowTx(receipt.account, transactionReceipt)\n          if (result.logsFound) {\n            updateReceipt(\n              receipt.id,\n              STATUS_READY,\n              result.data,\n            );\n          }\n        } else if (receipt.transaction_type == 2) {\n          const result = getJSONForExecutionFlowTx(receipt.account, transactionReceipt)\n          if (result.logsFound) {\n            updateReceipt(\n              receipt.id,\n              STATUS_READY,\n              result.data,\n            );\n          }\n        } else {\n          console.error(\"unexpected transaction type\")\n        }\n      }, null);\n}\n\nasync function querySingleStorage(storage: any) {\n  return sourceChainProvider.getStorageAt(storage.account, storage.key, Number(storage.blk_number)).then((value) => {\n    if (value == null || value == void 0) {\n      console.debug(\"storage not found\", storage.id, storage.tx_hash);\n      return;\n    }\n    updateStorage(\n      storage.id,\n      STATUS_READY,\n      value,\n      JSON.stringify({\n        account: storage.account,\n        key: storage.key,\n        value,\n        blk_number: storage.blk_number\n      })\n    );\n  }, null);\n}\n\nfunction getJSONForOrderFeeFlowTx(\n  account: string,\n  transactionReceipt: ethers.providers.TransactionReceipt\n) {\n  let data = \"\";\n\n  let original: ReceiptInfo = {\n    block_num: transactionReceipt.blockNumber,\n    tx_hash: transactionReceipt.transactionHash,\n    fields: [],\n  };\n\n  transactionReceipt.logs.forEach((log, i) => {\n    if (log.topics.length < 2) {\n      return \n    }\n\n    let logAddress = log.address.toLowerCase()\n    let topic0 = log.topics[0].toLowerCase();\n    \n    // OrderFlowFee Events\n    if (\n      logAddress === OrderFlowFeeImposedEventContractAddress &&\n      topic0.toLowerCase() === OrderFlowFeeImposedEvent &&\n      BigNumber.from(log.topics[1]).eq(BigNumber.from(account))\n    ) {\n      // OrderFlowFeeImposed account\n      original.fields.push({\n        contract: OrderFlowFeeImposedEventContractAddress,\n        log_index: i,\n        event_id: OrderFlowFeeImposedEvent,\n        is_topic: true,\n        field_index: 1,\n        value: account,\n      })\n      // OrderFlowFeeImposed amount\n      original.fields.push({\n        contract: OrderFlowFeeImposedEventContractAddress,\n        log_index: i,\n        event_id: OrderFlowFeeImposedEvent,\n        is_topic: false,\n        field_index: 0,\n        value: \"0x\" + log.data.replace(\"0x\", \"\").slice(0, 64),\n      })\n    } else  if (\n      logAddress === SynthetixPerpsV2ProxyContractAddress &&\n      topic0.toLowerCase() === DelayedOrderSubmittedEvent &&\n      BigNumber.from(log.topics[1]).eq(BigNumber.from(account))\n    ) {\n      // DelayedOrderSubmittedEvent account\n      original.fields.push({\n        contract: SynthetixPerpsV2ProxyContractAddress,\n        log_index: i,\n        event_id: DelayedOrderSubmittedEvent,\n        is_topic: true,\n        field_index: 1,\n        value: account,\n      })\n      // DelayedOrderSubmittedEvent keeperDeposit\n      original.fields.push({\n        contract: SynthetixPerpsV2ProxyContractAddress,\n        log_index: i,\n        event_id: DelayedOrderSubmittedEvent,\n        is_topic: false,\n        field_index: 6,\n        value: \"0x\" + log.data.replace(\"0x\", \"\").slice(6 * 64, 7 * 64),\n      })\n    }\n  });\n  data = JSON.stringify(original)\n  return {data: data, logsFound: original.fields.length == 4}\n}\n\nfunction getJSONForExecutionFlowTx(  \n  account: string,\n  transactionReceipt: ethers.providers.TransactionReceipt\n) {\n  let logsFound = false;\n  let data = \"\";\n\n  transactionReceipt.logs.forEach((log, i) => {\n    if (log.topics.length < 3) {\n      return \n    }\n\n    let logAddress = log.address.toLowerCase()\n    let topic0 = log.topics[0].toLowerCase();\n    \n    // PositionModified Event\n    if (\n      logAddress === SynthetixPerpsV2ProxyContractAddress &&\n      topic0.toLowerCase() === PositionModifiedEvent &&\n      BigNumber.from(log.topics[2]).eq(BigNumber.from(account))\n    ) {\n      logsFound = true;\n      data = JSON.stringify({\n        block_num: transactionReceipt.blockNumber,\n        tx_hash: transactionReceipt.transactionHash,\n        fields: [\n          // account\n          {\n            contract: logAddress,\n            log_index: i,\n            event_id: topic0,\n            is_topic: true,\n            field_index: 2,\n            value: log.topics[2].toLowerCase(),\n          },\n          // tradeSize\n          {\n            contract: logAddress,\n            log_index: i,\n            event_id: topic0,\n            is_topic: false,\n            field_index: 2,\n            value: \"0x\" + log.data.replace(\"0x\", \"\").slice(2 * 64, 3 * 64),\n          },\n          // lastPrice\n          {\n            contract: logAddress,\n            log_index: i,\n            event_id: topic0,\n            is_topic: false,\n            field_index: 3,\n            value: \"0x\" + log.data.replace(\"0x\", \"\").slice(3 * 64, 4 * 64),\n          },  \n          // fee\n          {\n            contract: logAddress,\n            log_index: i,\n            event_id: topic0,\n            is_topic: false,\n            field_index: 5,\n            value: \"0x\" + log.data.replace(\"0x\", \"\").slice(5 * 64, 6 * 64),\n          },   \n        ],\n      });\n    }\n  });\n  return {data: data, logsFound: logsFound}\n}\n\nexport {\n    querySingleReceipt,\n    querySingleStorage,\n}","import { BigNumber, ethers } from \"ethers\";\nimport * as typeChain from \"../../../contract/typechain/index.ts\";\n\nimport { BrevisRequest__factory } from \"../brevis_request/BrevisRequest__factory.ts\";\nimport {\n  findUserExistingUTVF,\n  updateBrevisRequestStatus,\n  updateUserTradeVolumeFee,\n} from \"../db/index.ts\";\nimport {\n  PROOF_STATUS_ONCHAIN_VERIFIED,\n  PROOF_STATUS_PROOF_UPLOADED,\n  STATUS_READY,\n} from \"../constants/index.ts\";\n\nimport * as dotenv from \"dotenv\";\nimport { UserTradeVolumeFee } from \"../server/type.ts\";\ndotenv.config();\n\nconst { FeeReimbursementApp__factory } = typeChain;\n// DstChain Provider uses Arbitrum Sepolia RPC to submit transaction on AS\nconst dstChainProvider = new ethers.providers.JsonRpcProvider(\n  process.env.DEST_RPC ?? \"\"\n);\n// Source Provider uses Arbirtrum RPC to retrieve Aribitrum data\nconst sourceChainProvider = new ethers.providers.JsonRpcProvider(\n  process.env.SOURCE_RPC ?? \"\"\n);\nconst wallet = new ethers.Wallet(\n  process.env.PRIVATE_KEY ?? \"\",\n  dstChainProvider\n);\n\nconst brevisRequest = BrevisRequest__factory.connect(\n  process.env.BREVIS_REQUEST ?? \"\",\n  wallet\n);\nconst userSwapAmountApp = FeeReimbursementApp__factory.connect(\n  process.env.FEE_REIMBURSEMENT ?? \"\",\n  wallet\n);\n\nasync function monitorFeeAccumulated() {\n  // event FeeReimbursed(address indexed user, uint128 accountId, uint248 feeRebate, uint32 startYearMonthDay, uint32 endYearMonthDay, uint64 startBlockNumber,uint64 endBlockNumber);\n \n  userSwapAmountApp.on(\"FeeRebateAccumulated\", (account, feeRebate, volume30D, feeRebateWithRate, startBlockNumber, endBlockNumber) => {\n    const feeRebateBN = feeRebate as BigNumber;\n    const volume30DBN = volume30D as BigNumber;\n    const feeRebateWithRateBN = feeRebateWithRate as BigNumber;\n    const startBlockNumberBN = startBlockNumber as BigNumber;\n    const endBlockNumberBN = endBlockNumber as BigNumber;\n\n    console.log(\"Fee Accumulated Event\", account, feeRebate, volume30D, feeRebateWithRate, startBlockNumber, endBlockNumber)\n    if (\n      account === undefined || account === null ||\n      feeRebateBN === undefined || feeRebateBN === null ||\n      volume30DBN === undefined || volume30DBN === null ||\n      feeRebateWithRateBN === undefined || feeRebateWithRateBN === null ||\n      startBlockNumberBN === undefined || startBlockNumberBN === null ||\n      endBlockNumberBN === undefined || endBlockNumberBN === null\n    ) {\n      return;\n    }\n    \n    findUserExistingUTVF(account, BigInt(startBlockNumberBN.toString()), BigInt(endBlockNumberBN.toString()))\n      .then(utvf => {\n        if (utvf) {\n          utvf.status = PROOF_STATUS_ONCHAIN_VERIFIED\n          utvf.fee_rebate = feeRebateWithRateBN\n          return updateUserTradeVolumeFee(utvf)\n        }\n      }).catch(error => {\n        console.error(\n          \"failed to update user swap amount\",\n          account,\n          startBlockNumber,\n          endBlockNumber, \n          error\n        );\n      })\n  });\n}\n\nasync function monitorBrevisRequest() {\n  brevisRequest.on(\"RequestSent\", (requestId: string) => {\n    updateBrevisRequestStatus(requestId)\n      .then()\n      .catch((error) => {\n        console.error(\n          \"failed to update brevis request on-chain status\",\n          requestId,\n          error\n        );\n      });\n  });\n}\n\nasync function submitBrevisRequestTx(utvf: UserTradeVolumeFee) {\n  console.log(\n    brevisRequest.address,\n    utvf.brevis_query_hash,\n    utvf.id,\n    process.env.FEE_REIMBURSEMENT,\n  );\n\n  const tx = await brevisRequest.sendRequest(\n    utvf.brevis_query_hash,\n    wallet.address ?? \"\",\n    process.env.FEE_REIMBURSEMENT ?? \"\",\n    {\n      value: 0,\n    }\n  );\n  utvf.request_sent = true\n  updateUserTradeVolumeFee(utvf)\n\n  const receipt = await tx.wait();\n  if (receipt.status == 1) {\n    utvf.request_sent = true\n    updateUserTradeVolumeFee(utvf)\n  } else {\n    utvf.request_sent = false\n    updateUserTradeVolumeFee(utvf)\n  }\n}\n\n\nexport {\n  dstChainProvider,\n  sourceChainProvider,\n  wallet,\n  brevisRequest,\n  userSwapAmountApp,\n  monitorFeeAccumulated,\n  monitorBrevisRequest,\n  submitBrevisRequestTx,\n};\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexport type { Ownable } from \"./Ownable\";\nexport type { IERC20 } from \"./IERC20\";\nexport type { BrevisApp } from \"./BrevisApp\";\nexport type { IBrevisProof } from \"./IBrevisProof\";\nexport type { Tx } from \"./Tx\";\nexport type { FeeReimbursementApp } from \"./FeeReimbursementApp\";\nexport type { IFeeRebateTierModule } from \"./IFeeRebateTierModule\";\nexport type { MockFeeModule } from \"./MockFeeModule\";\n\nexport { Ownable__factory } from \"./factories/Ownable__factory\";\nexport { IERC20__factory } from \"./factories/IERC20__factory\";\nexport { BrevisApp__factory } from \"./factories/BrevisApp__factory\";\nexport { IBrevisProof__factory } from \"./factories/IBrevisProof__factory\";\nexport { Tx__factory } from \"./factories/Tx__factory\";\nexport { FeeReimbursementApp__factory } from \"./factories/FeeReimbursementApp__factory\";\nexport { IFeeRebateTierModule__factory } from \"./factories/IFeeRebateTierModule__factory\";\nexport { MockFeeModule__factory } from \"./factories/MockFeeModule__factory\";\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\nimport type { Ownable, OwnableInterface } from \"../Ownable\";\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nexport class Ownable__factory {\n  static readonly abi = _abi;\n  static createInterface(): OwnableInterface {\n    return new utils.Interface(_abi) as OwnableInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): Ownable {\n    return new Contract(address, _abi, signerOrProvider) as Ownable;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\nimport type { IERC20, IERC20Interface } from \"../IERC20\";\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nexport class IERC20__factory {\n  static readonly abi = _abi;\n  static createInterface(): IERC20Interface {\n    return new utils.Interface(_abi) as IERC20Interface;\n  }\n  static connect(address: string, signerOrProvider: Signer | Provider): IERC20 {\n    return new Contract(address, _abi, signerOrProvider) as IERC20;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\nimport type { BrevisApp, BrevisAppInterface } from \"../BrevisApp\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"commitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"vkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appCommitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appVkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"smtRoot\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Brevis.ProofData[]\",\n        name: \"_proofDataArray\",\n        type: \"tuple[]\",\n      },\n      {\n        internalType: \"bytes[]\",\n        name: \"_appCircuitOutputs\",\n        type: \"bytes[]\",\n      },\n    ],\n    name: \"brevisBatchCallback\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_appCircuitOutput\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"brevisCallback\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"brevisProof\",\n    outputs: [\n      {\n        internalType: \"contract IBrevisProof\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"commitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"vkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appCommitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appVkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"smtRoot\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Brevis.ProofData\",\n        name: \"_proofData\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_merkleRoot\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32[]\",\n        name: \"_merkleProof\",\n        type: \"bytes32[]\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"_nodeIndex\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_appCircuitOutput\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"singleRun\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"smtRoot\",\n            type: \"bytes32\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint64\",\n                name: \"blkNum\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"receiptIndex\",\n                type: \"uint64\",\n              },\n              {\n                components: [\n                  {\n                    components: [\n                      {\n                        internalType: \"uint8\",\n                        name: \"valueFromTopic\",\n                        type: \"uint8\",\n                      },\n                      {\n                        internalType: \"uint64\",\n                        name: \"valueIndex\",\n                        type: \"uint64\",\n                      },\n                      {\n                        internalType: \"address\",\n                        name: \"contractAddress\",\n                        type: \"address\",\n                      },\n                      {\n                        internalType: \"bytes32\",\n                        name: \"logTopic0\",\n                        type: \"bytes32\",\n                      },\n                    ],\n                    internalType: \"struct Brevis.LogExtraInfo\",\n                    name: \"logExtraInfo\",\n                    type: \"tuple\",\n                  },\n                  {\n                    internalType: \"uint64\",\n                    name: \"logIndex\",\n                    type: \"uint64\",\n                  },\n                  {\n                    internalType: \"bytes32\",\n                    name: \"value\",\n                    type: \"bytes32\",\n                  },\n                ],\n                internalType: \"struct Brevis.LogInfo[5]\",\n                name: \"logs\",\n                type: \"tuple[5]\",\n              },\n            ],\n            internalType: \"struct Brevis.ReceiptInfo[]\",\n            name: \"receipts\",\n            type: \"tuple[]\",\n          },\n          {\n            components: [\n              {\n                internalType: \"bytes32\",\n                name: \"blockHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"slot\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"slotValue\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockNumber\",\n                type: \"uint64\",\n              },\n            ],\n            internalType: \"struct Brevis.StorageInfo[]\",\n            name: \"stores\",\n            type: \"tuple[]\",\n          },\n          {\n            components: [\n              {\n                internalType: \"bytes32\",\n                name: \"leafHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"blockHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockNumber\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockTime\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"bytes\",\n                name: \"leafRlpPrefix\",\n                type: \"bytes\",\n              },\n            ],\n            internalType: \"struct Brevis.TransactionInfo[]\",\n            name: \"txs\",\n            type: \"tuple[]\",\n          },\n        ],\n        internalType: \"struct Brevis.ExtractInfos\",\n        name: \"_extractInfos\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"validateRequest\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nexport class BrevisApp__factory {\n  static readonly abi = _abi;\n  static createInterface(): BrevisAppInterface {\n    return new utils.Interface(_abi) as BrevisAppInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): BrevisApp {\n    return new Contract(address, _abi, signerOrProvider) as BrevisApp;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\nimport type { IBrevisProof, IBrevisProofInterface } from \"../IBrevisProof\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getProofAppData\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getProofData\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"commitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"vkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appCommitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appVkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"smtRoot\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Brevis.ProofData\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"hasProof\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        internalType: \"bytes32[]\",\n        name: \"_requestIds\",\n        type: \"bytes32[]\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_proofWithPubInputs\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"mustSubmitAggProof\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"commitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"vkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appCommitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appVkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"smtRoot\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Brevis.ProofData\",\n        name: \"_proofData\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_merkleRoot\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32[]\",\n        name: \"_merkleProof\",\n        type: \"bytes32[]\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"_nodeIndex\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"mustValidateRequest\",\n    outputs: [],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"commitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"vkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appCommitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appVkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"smtRoot\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Brevis.ProofData[]\",\n        name: \"_proofDataArray\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"mustValidateRequests\",\n    outputs: [],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_proofWithPubInputs\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"_withAppProof\",\n        type: \"bool\",\n      },\n    ],\n    name: \"submitProof\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"smtRoot\",\n            type: \"bytes32\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint64\",\n                name: \"blkNum\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"receiptIndex\",\n                type: \"uint64\",\n              },\n              {\n                components: [\n                  {\n                    components: [\n                      {\n                        internalType: \"uint8\",\n                        name: \"valueFromTopic\",\n                        type: \"uint8\",\n                      },\n                      {\n                        internalType: \"uint64\",\n                        name: \"valueIndex\",\n                        type: \"uint64\",\n                      },\n                      {\n                        internalType: \"address\",\n                        name: \"contractAddress\",\n                        type: \"address\",\n                      },\n                      {\n                        internalType: \"bytes32\",\n                        name: \"logTopic0\",\n                        type: \"bytes32\",\n                      },\n                    ],\n                    internalType: \"struct Brevis.LogExtraInfo\",\n                    name: \"logExtraInfo\",\n                    type: \"tuple\",\n                  },\n                  {\n                    internalType: \"uint64\",\n                    name: \"logIndex\",\n                    type: \"uint64\",\n                  },\n                  {\n                    internalType: \"bytes32\",\n                    name: \"value\",\n                    type: \"bytes32\",\n                  },\n                ],\n                internalType: \"struct Brevis.LogInfo[5]\",\n                name: \"logs\",\n                type: \"tuple[5]\",\n              },\n            ],\n            internalType: \"struct Brevis.ReceiptInfo[]\",\n            name: \"receipts\",\n            type: \"tuple[]\",\n          },\n          {\n            components: [\n              {\n                internalType: \"bytes32\",\n                name: \"blockHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"slot\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"slotValue\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockNumber\",\n                type: \"uint64\",\n              },\n            ],\n            internalType: \"struct Brevis.StorageInfo[]\",\n            name: \"stores\",\n            type: \"tuple[]\",\n          },\n          {\n            components: [\n              {\n                internalType: \"bytes32\",\n                name: \"leafHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"blockHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockNumber\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockTime\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"bytes\",\n                name: \"leafRlpPrefix\",\n                type: \"bytes\",\n              },\n            ],\n            internalType: \"struct Brevis.TransactionInfo[]\",\n            name: \"txs\",\n            type: \"tuple[]\",\n          },\n        ],\n        internalType: \"struct Brevis.ExtractInfos\",\n        name: \"_info\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"validateRequest\",\n    outputs: [],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nexport class IBrevisProof__factory {\n  static readonly abi = _abi;\n  static createInterface(): IBrevisProofInterface {\n    return new utils.Interface(_abi) as IBrevisProofInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IBrevisProof {\n    return new Contract(address, _abi, signerOrProvider) as IBrevisProof;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { Tx, TxInterface } from \"../Tx\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"bytes\",\n        name: \"txRaw\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"decodeTx\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint64\",\n            name: \"chainId\",\n            type: \"uint64\",\n          },\n          {\n            internalType: \"uint64\",\n            name: \"nonce\",\n            type: \"uint64\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"gasTipCap\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"gasFeeCap\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"gas\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"value\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"data\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"address\",\n            name: \"from\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct Tx.TxInfo\",\n        name: \"info\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x6080806040523461001a57610e5d9081610020823930815050f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c63dae029d31461002a57600080fd5b602090816003193601126103d95767ffffffffffffffff916004358381116103d557366023820112156103d55780600401359384116103d557602481019060248536920101116103d5576102e7946102dd926102cc9261008861052e565b9660ff926100bd6002856100b66100b06100a2878961059c565b356001600160f81b03191690565b60f81c90565b16146105b9565b6100e26100dd6100d86100d1858088610605565b36916106b4565b610a18565b610a80565b926101166101086100fb6100f5876106eb565b51610b98565b67ffffffffffffffff1690565b67ffffffffffffffff168b52565b6101386101286100fb6100f5876106f8565b67ffffffffffffffff168b840152565b6101446100f585610708565b898b01526101546100f585610718565b60608b01526101656100f585610728565b60808b015261018f61017f61017986610738565b51610b7a565b6001600160a01b031660a08c0152565b61019b6100f585610748565b60c08b01526101b26101ac85610758565b51610c06565b60e08b01526101cc6101c66100f586610769565b60ff1690565b956101f06101e56101ac6101ea6101e56101ac8a61077a565b6107b0565b9761078b565b958a61020a6102056100b06100a289886105aa565b6107e9565b9582871660010361039f576102366101c66102316100b061022b858a610644565b90610876565b610801565b965b61ffff8816603781116102eb5750506102c093926102a0876102926102b8958561028c61027d61026b6102a8998e610655565b9d9093610277816108a2565b91610663565b929093519c8d9687019161090a565b9161090a565b03601f1981018852876104fd565b859716610825565b60f81b6001600160f81b03191690565b901a91610986565b535b8151910120610996565b6001600160a01b0316610100840152565b519182918261041d565b0390f35b909697945083959391925011156000146103655761035f93828261032161031b6100a2610333966103519861059c565b98610814565b9261032b826108a2565b931691610680565b8c5195869491929160f81b6001600160f81b03191690888601610954565b03601f1981018352826104fd565b906102c2565b61035f93828261032161031b6100a2610381966103519861059c565b8c5195869491929160f01b6001600160f01b03191690888601610918565b6103cf6103ca6103c46103be6103b76101c68c610814565b858a610627565b90610836565b60f01c90565b610862565b96610238565b8480fd5b8280fd5b919082519283825260005b848110610409575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016103e8565b6104c3906020815261043c60208201845167ffffffffffffffff169052565b602083015167ffffffffffffffff1660408201526040830151606082015260608301516080820152608083015160a082015261048860a084015160c08301906001600160a01b03169052565b60c083015160e082015260e0830151610120906104b26101009183838601526101408501906103dd565b9401516001600160a01b0316910152565b90565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176104f857604052565b6104c6565b90601f8019910116810190811067ffffffffffffffff8211176104f857604052565b6040519061052c826104dc565b565b60405190610120820182811067ffffffffffffffff8211176104f857604052816101006000918281528260208201528260408201528260608201528260808201528260a08201528260c0820152606060e08201520152565b634e487b7160e01b600052603260045260246000fd5b90156105a55790565b610586565b90600110156105a55760010190565b156105c057565b60405162461bcd60e51b815260206004820152601660248201527f6e6f7420612044796e616d6963466565547854797065000000000000000000006044820152606490fd5b909291928360011161062257831161062257600101916000190190565b600080fd5b909291928360021161062257831161062257600201916001190190565b906003116106225760020190600190565b906002116106225790600290565b909291928360031161062257831161062257600301916002190190565b90939293848311610622578411610622578101920390565b67ffffffffffffffff81116104f857601f01601f191660200190565b9291926106c082610698565b916106ce60405193846104fd565b829481845281830111610622578281602093846000960137010152565b8051156105a55760200190565b8051600110156105a55760400190565b8051600210156105a55760600190565b8051600310156105a55760800190565b8051600410156105a55760a00190565b8051600510156105a55760c00190565b8051600610156105a55760e00190565b8051600710156105a5576101000190565b8051600910156105a5576101400190565b8051600a10156105a5576101600190565b8051600b10156105a5576101800190565b80518210156105a55760209160051b010190565b6020815191015190602081106107c4575090565b6000199060200360031b1b1690565b634e487b7160e01b600052601160045260246000fd5b60ff60f6199116019060ff82116107fc57565b6107d3565b60ff6042199116019060ff82116107fc57565b60ff166002019060ff82116107fc57565b60ff1660c0019060ff82116107fc57565b6001600160f01b0319903581811693926002811061085357505050565b60020360031b82901b16169150565b61ffff90811660421901919082116107fc57565b6001600160f81b0319903581811693926001811061089357505050565b60010360031b82901b16169150565b6042198101919082116107fc57565b60bf198101919082116107fc57565b607f198101919082116107fc57565b60200390602082116107fc57565b6000198101919082116107fc57565b60f6198101919082116107fc57565b60b6198101919082116107fc57565b908092918237016000815290565b6001600160f81b0319909116815260f960f81b60018201526001600160f01b031990911660028201526004929182908483013701016000815290565b6001600160f81b03199182168152601f60fb1b6001820152911660028201526003929182908483013701016000815290565b8051600110156105a55760210190565b919260ff8116601b81106109e5575b509160209360809260ff60009560405194855216868401526040830152606082015282805260015afa156109d95760005190565b6040513d6000823e3d90fd5b601b9150929192019060ff82116107fc57919060206109a5565b60405190610a0c826104dc565b60006020838281520152565b610a206109ff565b50602081519160405192610a33846104dc565b835201602082015290565b67ffffffffffffffff81116104f85760051b60200190565b90600182018092116107fc57565b919082018092116107fc57565b60001981146107fc5760010190565b610a8981610b53565b1561062257610a9781610c53565b610aa081610a3e565b91610aae60405193846104fd565b818352601f19610abd83610a3e565b0160005b818110610b3c575050610ae2602080920151610adc81610d3b565b90610a64565b6000905b838210610af4575050505090565b610b3081610b04610b3693610cb5565b90610b0d61051f565b8281528187820152610b1f868a61079c565b52610b2a858961079c565b50610a64565b91610a71565b90610ae6565b602090610b476109ff565b82828801015201610ac1565b805115610b7457602060c09101515160001a10610b6f57600190565b600090565b50600090565b601581510361062257610b946001600160a01b0391610b98565b1690565b80518015159081610bce575b501561062257610bb390610bda565b90519060208110610bc2575090565b6020036101000a900490565b60219150111538610ba4565b906020820191610bea8351610d3b565b9251908382018092116107fc57519283039283116107fc579190565b80511561062257610c196104c391610bda565b610c2581939293610698565b92610c3360405194856104fd565b818452601f19610c4283610698565b013660208601378360200190610daa565b805115610b745760009060208101908151610c6d81610d3b565b81018091116107fc579151905181018091116107fc5791905b828110610c935750905090565b610c9c81610cb5565b81018091116107fc57610caf9091610a71565b90610c86565b805160001a906080821015610ccb575050600190565b60b8821015610ce65750610ce16104c3916108c0565b610a56565b9060c0811015610d0a5760b51991600160b783602003016101000a91015104010190565b9060f8821015610d215750610ce16104c3916108b1565b60010151602082900360f7016101000a90040160f5190190565b5160001a6080811015610d4e5750600090565b60b881108015610d85575b15610d645750600190565b60c0811015610d7957610ce16104c3916108fb565b610ce16104c3916108ec565b5060c08110158015610d59575060f88110610d59565b601f81116107fc576101000a90565b929091928315610e215792915b602093848410610dec57805182528481018091116107fc579381018091116107fc5791601f1981019081116107fc5791610db7565b9193509180610dfa57505050565b610e0e610e09610e13926108cf565b610d9b565b6108dd565b905182518216911916179052565b5091505056fea26469706673582212209f248e3623c0552a588c9ed1a405b35a0ff8efaec2e217249cf2a7102e52077164736f6c63430008140033\";\n\ntype TxConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: TxConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class Tx__factory extends ContractFactory {\n  constructor(...args: TxConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n    this.contractName = \"Tx\";\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<Tx> {\n    return super.deploy(overrides || {}) as Promise<Tx>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): Tx {\n    return super.attach(address) as Tx;\n  }\n  connect(signer: Signer): Tx__factory {\n    return super.connect(signer) as Tx__factory;\n  }\n  static readonly contractName: \"Tx\";\n  public readonly contractName: \"Tx\";\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): TxInterface {\n    return new utils.Interface(_abi) as TxInterface;\n  }\n  static connect(address: string, signerOrProvider: Signer | Provider): Tx {\n    return new Contract(address, _abi, signerOrProvider) as Tx;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type {\n  FeeReimbursementApp,\n  FeeReimbursementAppInterface,\n} from \"../FeeReimbursementApp\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_brevisProof\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"InvalidNewClaimPeriod\",\n    type: \"error\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"BrevisProofUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint248\",\n        name: \"feeRebate\",\n        type: \"uint248\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint248\",\n        name: \"volume30D\",\n        type: \"uint248\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint248\",\n        name: \"feeRebateWithRate\",\n        type: \"uint248\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint64\",\n        name: \"startBlockNumber\",\n        type: \"uint64\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint64\",\n        name: \"endBlockNumber\",\n        type: \"uint64\",\n      },\n    ],\n    name: \"FeeRebateAccumulated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint248\",\n        name: \"feeRebate\",\n        type: \"uint248\",\n      },\n    ],\n    name: \"FeeReimbursed\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32[]\",\n        name: \"vkHashes\",\n        type: \"bytes32[]\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint16[]\",\n        name: \"sizes\",\n        type: \"uint16[]\",\n      },\n    ],\n    name: \"VkHashesUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"accountAccumulatedFee\",\n    outputs: [\n      {\n        internalType: \"uint248\",\n        name: \"\",\n        type: \"uint248\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"accountClaimPeriod\",\n    outputs: [\n      {\n        internalType: \"uint64\",\n        name: \"startBlockNumber\",\n        type: \"uint64\",\n      },\n      {\n        internalType: \"uint64\",\n        name: \"endBlockNumber\",\n        type: \"uint64\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"commitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"vkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appCommitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appVkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"smtRoot\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Brevis.ProofData[]\",\n        name: \"_proofDataArray\",\n        type: \"tuple[]\",\n      },\n      {\n        internalType: \"bytes[]\",\n        name: \"_appCircuitOutputs\",\n        type: \"bytes[]\",\n      },\n    ],\n    name: \"brevisBatchCallback\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_appCircuitOutput\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"brevisCallback\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"brevisProof\",\n    outputs: [\n      {\n        internalType: \"contract IBrevisProof\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"claim\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"claimer\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"feeRebateTierModule\",\n    outputs: [\n      {\n        internalType: \"contract IFeeRebateTierModule\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rewardToken\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rewardTokenDecimals\",\n    outputs: [\n      {\n        internalType: \"uint24\",\n        name: \"\",\n        type: \"uint24\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_brevisProof\",\n        type: \"address\",\n      },\n    ],\n    name: \"setBrevisProof\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_claimer\",\n        type: \"address\",\n      },\n    ],\n    name: \"setClaimer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IFeeRebateTierModule\",\n        name: \"_feeRebateTierModule\",\n        type: \"address\",\n      },\n    ],\n    name: \"setFeeRebateTierModule\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_rewardToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint24\",\n        name: \"_decimals\",\n        type: \"uint24\",\n      },\n    ],\n    name: \"setRewardToken\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32[]\",\n        name: \"_vkHashes\",\n        type: \"bytes32[]\",\n      },\n      {\n        internalType: \"uint16[]\",\n        name: \"_sizes\",\n        type: \"uint16[]\",\n      },\n    ],\n    name: \"setVkHashes\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"commitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"vkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appCommitHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"appVkHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"smtRoot\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Brevis.ProofData\",\n        name: \"_proofData\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_merkleRoot\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32[]\",\n        name: \"_merkleProof\",\n        type: \"bytes32[]\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"_nodeIndex\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_appCircuitOutput\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"singleRun\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"smtRoot\",\n            type: \"bytes32\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint64\",\n                name: \"blkNum\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"receiptIndex\",\n                type: \"uint64\",\n              },\n              {\n                components: [\n                  {\n                    components: [\n                      {\n                        internalType: \"uint8\",\n                        name: \"valueFromTopic\",\n                        type: \"uint8\",\n                      },\n                      {\n                        internalType: \"uint64\",\n                        name: \"valueIndex\",\n                        type: \"uint64\",\n                      },\n                      {\n                        internalType: \"address\",\n                        name: \"contractAddress\",\n                        type: \"address\",\n                      },\n                      {\n                        internalType: \"bytes32\",\n                        name: \"logTopic0\",\n                        type: \"bytes32\",\n                      },\n                    ],\n                    internalType: \"struct Brevis.LogExtraInfo\",\n                    name: \"logExtraInfo\",\n                    type: \"tuple\",\n                  },\n                  {\n                    internalType: \"uint64\",\n                    name: \"logIndex\",\n                    type: \"uint64\",\n                  },\n                  {\n                    internalType: \"bytes32\",\n                    name: \"value\",\n                    type: \"bytes32\",\n                  },\n                ],\n                internalType: \"struct Brevis.LogInfo[5]\",\n                name: \"logs\",\n                type: \"tuple[5]\",\n              },\n            ],\n            internalType: \"struct Brevis.ReceiptInfo[]\",\n            name: \"receipts\",\n            type: \"tuple[]\",\n          },\n          {\n            components: [\n              {\n                internalType: \"bytes32\",\n                name: \"blockHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"slot\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"slotValue\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockNumber\",\n                type: \"uint64\",\n              },\n            ],\n            internalType: \"struct Brevis.StorageInfo[]\",\n            name: \"stores\",\n            type: \"tuple[]\",\n          },\n          {\n            components: [\n              {\n                internalType: \"bytes32\",\n                name: \"leafHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"blockHash\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockNumber\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"uint64\",\n                name: \"blockTime\",\n                type: \"uint64\",\n              },\n              {\n                internalType: \"bytes\",\n                name: \"leafRlpPrefix\",\n                type: \"bytes\",\n              },\n            ],\n            internalType: \"struct Brevis.TransactionInfo[]\",\n            name: \"txs\",\n            type: \"tuple[]\",\n          },\n        ],\n        internalType: \"struct Brevis.ExtractInfos\",\n        name: \"_extractInfos\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"validateRequest\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"vkHashesToCircuitSize\",\n    outputs: [\n      {\n        internalType: \"uint16\",\n        name: \"\",\n        type: \"uint16\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x6080346100a957601f611d5438819003918201601f19168301916001600160401b038311848410176100ae578084926020946040528339810103126100a957516001600160a01b0390818116908190036100a95760018060a01b031990816000541617600055600154903390821617600155604051913391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3611c8f90816100c58239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60c0604052600436101561001257600080fd5b6000803560e01c80631dd3f354146116c25780631e83409a146115fb5780635419f27c146115af5780635d1c29eb146113e9578063715018a61461138957806379d6b6a21461106b5780637c08aa74146109705780637f239c4d146109495780638da5cb5b146109225780639bdcecd1146108fc578063a184a0c7146108ce578063ada323ff14610841578063b18c086814610800578063b90c209a146107b6578063c772c87f14610746578063c7f5aaa014610720578063cdfb5832146106d9578063d379be23146106b2578063ed1fe83b1461020c578063f2fde38b1461012d5763f7c618c11461010457600080fd5b3461012a578060031936011261012a5760206001600160a01b0360025416604051908152f35b80fd5b503461012a57602036600319011261012a5761014761183f565b600154906001600160a01b03808316916101623384146119de565b169182156101a1576001600160a01b03191682176001557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b503461012a57606036600319011261012a57610226611869565b67ffffffffffffffff602435116106ae573660236024350112156106ae5767ffffffffffffffff60243560040135116106ae5736602460a08135600401350281350101116106ae5760443567ffffffffffffffff81116106aa5761028e90369060040161180e565b61029f816024356004013514611a74565b6001600160a01b0384541692833b156106a65784906040519063cf7ac5a960e01b825267ffffffffffffffff604483019116600483015260406024830152602435600401359052606481019460248035019586845b60243560040135811061066557505083918380809303915afa801561065a57610642575b505b60243560040135811061032b578480f35b6103656040610341836024356004013588611ae5565b0135610358610351848688611b0b565b3691611997565b6020815191012014611a29565b610376816024356004013586611ae5565b50606061038a826024356004013587611ae5565b0135610397828486611b0b565b90918752600560205261ffff6040882054161561060a5780601411610606578060331161060657806052116106065780605a116106065760621161060257601481013560081c908180610526575b610402823560601c605a84013560c01c605285013560c01c611b8a565b823560601c89526006602052604089209067ffffffffffffffff8151166fffffffffffffffff00000000000000006020845493015160401b16916fffffffffffffffffffffffffffffffff19161717905560076020526001600160f81b036040892054166001600160f81b038083168201116105125792605a836001600160f81b0360c09461050d98978260408f7f865837efc36f96ff0de4b15e50b0ead4bf18a6928f7045e7e39161eebf7c5dc79a3560601c815260076020522091818416011660ff60f81b82541617905560405194833560601c86526020860152603383013560081c60408601521660608401526052810135841c60808401520135821c60a0820152a1611ac0565b61031a565b634e487b7160e01b89526011600452602489fd5b602460206001600160a01b03600354166040519283809263b72bf50960e01b8252603388013560081c60048301525afa80156105f75789906105a8575b67ffffffffffffffff9150168061057b575b506103e5565b90806001600160f81b03838202160482148115171561051257606491026001600160f81b03160438610575565b506020813d6020116105ef575b816105c26020938361195d565b810103126105eb575167ffffffffffffffff811681036105eb5767ffffffffffffffff90610563565b8880fd5b3d91506105b5565b6040513d8b823e3d90fd5b8580fd5b8680fd5b60405162461bcd60e51b815260206004820152601060248201526f1d9ad2185cda081b9bdd081d985b1a5960821b6044820152606490fd5b61064b906118c3565b610656578338610318565b8380fd5b6040513d84823e3d90fd5b813583526020808301359084015260408083013590840152606080830135908401526080808301359084015289955060a092830192909101906001016102f4565b8480fd5b8280fd5b5080fd5b503461012a578060031936011261012a5760206001600160a01b0360045416604051908152f35b503461012a57602036600319011261012a576106f361183f565b6001600160a01b039061070b826001541633146119de565b166001600160a01b0319600454161760045580f35b503461012a578060031936011261012a576001600160a01b036020915416604051908152f35b503461012a57602036600319011261012a577f1bf3143ab1544528303e489724067fb6c3ff3f7e3b0a6df041cae24242e44773602061078361183f565b6001600160a01b039061079b826001541633146119de565b16806001600160a01b0319855416178455604051908152a180f35b503461012a57602036600319011261012a576004356001600160a01b038082168092036106aa576107ec906001541633146119de565b6001600160a01b0319600354161760035580f35b503461012a57602036600319011261012a576001600160f81b0360406020926001600160a01b0361082f61183f565b16815260078452205416604051908152f35b503461012a57604036600319011261012a5761085b61183f565b60243562ffffff811681036106aa577fffffffffffffffffff00000000000000000000000000000000000000000000006001600160a01b036108a2816001541633146119de565b76ffffff00000000000000000000000000000000000000006002549360a01b1693169116171760025580f35b503461012a57602036600319011261012a5761ffff6040602092600435815260058452205416604051908152f35b503461012a578060031936011261012a57602062ffffff60025460a01c16604051908152f35b503461012a578060031936011261012a5760206001600160a01b0360015416604051908152f35b503461012a578060031936011261012a5760206001600160a01b0360035416604051908152f35b503461012a576003196060368201126106ae576024359067ffffffffffffffff82168203611056576044359067ffffffffffffffff82116106565760809082360301126106aa57604051906109c4826118ed565b80600401358252602481013567ffffffffffffffff81116106a6578101366023820112156106a6576004810135906109fb8261197f565b91610a09604051938461195d565b808352602083019136602483600a1b83010111610eda5760248101925b602483600a1b8301018410610f4257505050506020830152604481013567ffffffffffffffff81116106a6578101366023820112156106a657600481013590610a6e8261197f565b91610a7c604051938461195d565b808352602083019136602460a0840283010111610eda579160248301925b602460a084028201018410610ede5750505050604083015260648101359067ffffffffffffffff82116106a6573660238383010112156106a6576004828201013590610ae58261197f565b92610af3604051948561195d565b82845260208401913660248560051b848401010111610eda57602482820101925b60248560051b84840101018410610e0857505050505060608201526001600160a01b0383541690813b156106565791839167ffffffffffffffff93604051948593631f022a9d60e21b855260043560048601521660248401526060604484015260e48301908051606485015260208101519160806084860152825180915260206101048601930190865b818110610d45575050506040810151916063198582030160a486015260208084519283815201930190865b818110610ce65750505060600151906063198482030160c4850152815180825260208201916020808360051b83010194019287915b838310610c3b57505050505082809103915afa801561065a57610c27575b602060405160018152f35b610c3182916118c3565b61012a5780610c1c565b9295975092955092601f1982820301835260808651805183526020810151602084015267ffffffffffffffff604082015116604084015267ffffffffffffffff606082015116606084015201519060a060808201528151918260a08301528a5b838110610cd05750506020600192819260c0918d838284010152601f8019910116010197019301930187959389979592610bfe565b80602080928401015160c0828601015201610c9b565b929496509281955060a060209167ffffffffffffffff608060019551805184526001600160a01b038682015116868501526040810151604085015260608101516060850152015116608082015201950191019086949288969492610bc9565b92949650929094506040855167ffffffffffffffff815116835267ffffffffffffffff60208201511660208401520151604082019089915b60058310610da257505050602061040060019201950191019086949288969492610b9e565b602060c0600192604085516060815160ff815116855267ffffffffffffffff8782015116878601526001600160a01b038482015116848601520151606084015267ffffffffffffffff85820151166080840152015160a082015201920192019190610d7d565b833567ffffffffffffffff8111610ed65760a0838501820136036023190112610ed65760405191610e3883611925565b83850182016024810135845260448101356020850152610e5a90606401611880565b6040840152610e6f6084838787010101611880565b606084015260a4828686010101359067ffffffffffffffff8211610ed25736604383858989010101011215610ed2576024936020938493610ec09136918a8a01909101018088013590604401611997565b60808201528152019401939050610b14565b8b80fd5b8980fd5b8780fd5b60a0843603126105eb5760a0806020602494604051610efc81611925565b88358152610f0b838a01611855565b838201526040890135604082015260608901356060820152610f2f60808a01611880565b6080820152815201950194925050610a9a565b6104008085360312610ed65760405190610f5b82611909565b610f6486611880565b8252610f7260208701611880565b602083015236605f870112156110675760405190610f8f82611925565b819036818901116110635760408801915b8189018310610fc357505050604082015281526104009390930192602001610a26565b60c08336031261105f57604051610fd981611909565b60808436031261105b5760405191610ff0836118ed565b84359160ff83168303611056578360209360c09552611010848801611880565b8482015261102060408801611855565b604082015260608701356060820152815261103d60808701611880565b8382015260a08601356040820152815201920191610fa0565b600080fd5b8e80fd5b8d80fd5b8c80fd5b8a80fd5b503461012a57604036600319011261012a57602467ffffffffffffffff81358181116106565761109f903690600401611895565b906001600160a01b039084604083885416815197888092632cc27dc960e11b825260043560048301525afa801561137e5787968891611345575b506110f76110e8368786611997565b9788516020809a012014611a29565b87526005865261ffff6040882054161561130f578360141161060657813560601c9584603311610eda57601483013560081c91856052116105eb57603384013560081c9386605a11610ed657605281013560c01c96606211610ed657605a013560c01c96839582848615928315611253575b50505050611178898989611b8a565b898b526006845260408b20918151166fffffffffffffffff000000000000000085845493015160401b16916fffffffffffffffffffffffffffffffff191617179055600782526001600160f81b03808060408c20541696168096019181831161124157509160c097959391899795937f865837efc36f96ff0de4b15e50b0ead4bf18a6928f7045e7e39161eebf7c5dc79a8c526007835260408c20911660ff60f81b82541617905560405196875286015260408501526060840152608083015260a0820152a180f35b634e487b7160e01b8b5260116004528afd5b600354166040519283809263b72bf50960e01b82528b60048301525afa80156113045783918d916112ca575b50169081611290575b848491611169565b909196506001600160f81b0382860216918583041417156112b75760649004943880611288565b50634e487b7160e01b8952601160045288fd5b809250868092503d83116112fd575b6112e3818361195d565b81010312610ed257518281168103610ed25782903861127f565b503d6112d9565b6040513d8e823e3d90fd5b8560106064926040519262461bcd60e51b845260048401528201526f1d9ad2185cda081b9bdd081d985b1a5960821b6044820152fd5b9650506040863d604011611376575b816113616040938361195d565b810103126106065760208651960151386110d9565b3d9150611354565b6040513d89823e3d90fd5b503461012a578060031936011261012a5760006001546001600160a01b03196001600160a01b038216916113be3384146119de565b166001557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461012a5761014036600319011261012a57611404611869565b60a03660231901126106ae5767ffffffffffffffff60e4358181116106565761143190369060040161180e565b926101049182359060ff821680920361060657866101249687358781116106aa57611460903690600401611895565b9690946001600160a01b03968785541692833b15610602578a9260405197889687958695632247cd8f60e01b875216600486015260249e8f803590870152604435604487015260643580608052606487015260843560a05260a051608487015260a43560a487015260c43560c487015260e4860161012090528501906114e592611b4d565b9183015203915afa801561137e5761159c575b50611504368483611997565b94611519865160208098012060805114611a29565b60a05187526005865261ffff6040882054161561130f578360141161060657813560601c9584603311610eda57601483013560081c91856052116105eb57603384013560081c9386605a11610ed657605281013560c01c96606211610ed657605a013560c01c968395828486159283156112535750505050611178898989611b8a565b6115a8909691966118c3565b94386114f8565b503461012a57602036600319011261012a57604080916001600160a01b036115d561183f565b1681526006602052205481519067ffffffffffffffff908181168352831c166020820152f35b503461012a57602036600319011261012a5761161561183f565b6001600160a01b03908160045416330361167d577f17525e7c25776b686f3c5fb5714aac26a41bdccd536c711002922e7e5ffb4c2c916040911680845260076020526001600160f81b0382852080549060ff60f81b821690558351928352166020820152a180f35b60405162461bcd60e51b815260206004820152601760248201527f696e76616c696420636c61696d657220616464726573730000000000000000006044820152606490fd5b503461012a57604036600319011261012a5767ffffffffffffffff6004358181116106aa576116f590369060040161180e565b916024359081116106565761170e90369060040161180e565b90916001906117286001600160a01b0383541633146119de565b611733838614611a74565b855b8581106117bf57506117539060405195604087526040870191611b4d565b916020838682950382880152828152019392865b82811061179857877fb3f7d79a2f90dac793ddd7d86f2d7d5d073e107289c685083e9d4329f1640f5c88880389a180f35b909192939485359061ffff82168092036105eb579081528201948201939291908301611767565b6117cd818587969596611c49565b359061ffff8216809203610eda57611806916117ea828986611c49565b3589526005602052604089209061ffff19825416179055611ac0565b929192611735565b9181601f840112156110565782359167ffffffffffffffff8311611056576020808501948460051b01011161105657565b600435906001600160a01b038216820361105657565b35906001600160a01b038216820361105657565b6004359067ffffffffffffffff8216820361105657565b359067ffffffffffffffff8216820361105657565b9181601f840112156110565782359167ffffffffffffffff8311611056576020838186019501011161105657565b67ffffffffffffffff81116118d757604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff8211176118d757604052565b6060810190811067ffffffffffffffff8211176118d757604052565b60a0810190811067ffffffffffffffff8211176118d757604052565b6040810190811067ffffffffffffffff8211176118d757604052565b90601f8019910116810190811067ffffffffffffffff8211176118d757604052565b67ffffffffffffffff81116118d75760051b60200190565b92919267ffffffffffffffff82116118d757604051916119c1601f8201601f19166020018461195d565b829481845281830111611056578281602093846000960137010152565b156119e557565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b15611a3057565b606460405162461bcd60e51b815260206004820152602060248201527f6661696c656420746f206f70656e206f757470757420636f6d6d69746d656e746044820152fd5b15611a7b57565b60405162461bcd60e51b815260206004820152601060248201527f6c656e677468206e6f74206d61746368000000000000000000000000000000006044820152606490fd5b6000198114611acf5760010190565b634e487b7160e01b600052601160045260246000fd5b9190811015611af55760a0020190565b634e487b7160e01b600052603260045260246000fd5b9190811015611af55760051b81013590601e198136030182121561105657019081359167ffffffffffffffff8311611056576020018236038113611056579190565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116110565760209260051b809284830137010190565b9092916001600160a01b039060006020604051611ba681611941565b8281520152166000526006602052604060002060405190611bc682611941565b549267ffffffffffffffff91828086169586835260401c166020820195818752159081611c40575b50611c335782808251169616958610611c2957505080835116911611611c21575b604051632d75bc4f60e01b8152600490fd5b523880611c0f565b9350935016815290565b9282168352931690915290565b90501538611bee565b9190811015611af55760051b019056fea2646970667358221220ecd301770a11783d54c97caa25577647d0831b1af28a7917ec857c100b9177f364736f6c63430008140033\";\n\ntype FeeReimbursementAppConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: FeeReimbursementAppConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class FeeReimbursementApp__factory extends ContractFactory {\n  constructor(...args: FeeReimbursementAppConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n    this.contractName = \"FeeReimbursementApp\";\n  }\n\n  deploy(\n    _brevisProof: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<FeeReimbursementApp> {\n    return super.deploy(\n      _brevisProof,\n      overrides || {}\n    ) as Promise<FeeReimbursementApp>;\n  }\n  getDeployTransaction(\n    _brevisProof: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(_brevisProof, overrides || {});\n  }\n  attach(address: string): FeeReimbursementApp {\n    return super.attach(address) as FeeReimbursementApp;\n  }\n  connect(signer: Signer): FeeReimbursementApp__factory {\n    return super.connect(signer) as FeeReimbursementApp__factory;\n  }\n  static readonly contractName: \"FeeReimbursementApp\";\n  public readonly contractName: \"FeeReimbursementApp\";\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): FeeReimbursementAppInterface {\n    return new utils.Interface(_abi) as FeeReimbursementAppInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): FeeReimbursementApp {\n    return new Contract(address, _abi, signerOrProvider) as FeeReimbursementApp;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\nimport type {\n  IFeeRebateTierModule,\n  IFeeRebateTierModuleInterface,\n} from \"../IFeeRebateTierModule\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"uint248\",\n        name: \"volume30D\",\n        type: \"uint248\",\n      },\n    ],\n    name: \"getFeeRebatePercentage\",\n    outputs: [\n      {\n        internalType: \"uint64\",\n        name: \"\",\n        type: \"uint64\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nexport class IFeeRebateTierModule__factory {\n  static readonly abi = _abi;\n  static createInterface(): IFeeRebateTierModuleInterface {\n    return new utils.Interface(_abi) as IFeeRebateTierModuleInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IFeeRebateTierModule {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as IFeeRebateTierModule;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { MockFeeModule, MockFeeModuleInterface } from \"../MockFeeModule\";\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint248\",\n        name: \"volume30D\",\n        type: \"uint248\",\n      },\n    ],\n    name: \"getFeeRebatePercentage\",\n    outputs: [\n      {\n        internalType: \"uint64\",\n        name: \"\",\n        type: \"uint64\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x6080806040523461005b5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a361030190816100618239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c8063715018a6146101d55780638da5cb5b146101a2578063b72bf509146101475763f2fde38b1461004957600080fd5b346101445760203660031901126101445760043573ffffffffffffffffffffffffffffffffffffffff8082168092036101405782549081169061008d33831461024c565b82156100d55773ffffffffffffffffffffffffffffffffffffffff1916821783557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b8280fd5b80fd5b503461014457602036600319011261014457600435907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8216820361014457602061019083610297565b67ffffffffffffffff60405191168152f35b503461014457806003193601126101445773ffffffffffffffffffffffffffffffffffffffff6020915416604051908152f35b503461014457806003193601126101445780805473ffffffffffffffffffffffffffffffffffffffff1973ffffffffffffffffffffffffffffffffffffffff82169161022233841461024c565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b1561025357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6175309116116102c657600190565b60029056fea2646970667358221220826ef8d5ce734a1fe4385fd011e2cab52cceb1205ab9c235fae84880aba4ffd264736f6c63430008140033\";\n\ntype MockFeeModuleConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: MockFeeModuleConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class MockFeeModule__factory extends ContractFactory {\n  constructor(...args: MockFeeModuleConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n    this.contractName = \"MockFeeModule\";\n  }\n\n  deploy(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<MockFeeModule> {\n    return super.deploy(overrides || {}) as Promise<MockFeeModule>;\n  }\n  getDeployTransaction(\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  attach(address: string): MockFeeModule {\n    return super.attach(address) as MockFeeModule;\n  }\n  connect(signer: Signer): MockFeeModule__factory {\n    return super.connect(signer) as MockFeeModule__factory;\n  }\n  static readonly contractName: \"MockFeeModule\";\n  public readonly contractName: \"MockFeeModule\";\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): MockFeeModuleInterface {\n    return new utils.Interface(_abi) as MockFeeModuleInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): MockFeeModule {\n    return new Contract(address, _abi, signerOrProvider) as MockFeeModule;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { BrevisRequest, BrevisRequestInterface } from \"./BrevisRequest\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_feeCollector\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IBrevisProof\",\n        name: \"_brevisProof\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n    ],\n    name: \"FeeCollectorUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"RequestFulfilled\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"requestId\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"fee\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"callback\",\n        type: \"address\",\n      },\n    ],\n    name: \"RequestSent\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"from\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"to\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"RequestTimeoutUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"brevisProof\",\n    outputs: [\n      {\n        internalType: \"contract IBrevisProof\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"chargeFee\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_to\",\n        type: \"address\",\n      },\n    ],\n    name: \"collectFee\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"feeCollector\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint64\",\n        name: \"_chainId\",\n        type: \"uint64\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_proof\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"_withAppProof\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_appCircuitOutput\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"fulfillRequest\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"queryRequestStatus\",\n    outputs: [\n      {\n        internalType: \"enum BrevisRequest.RequestStatus\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"refund\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"requestTimeout\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"requests\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"fee\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"refundee\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"callback\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum BrevisRequest.RequestStatus\",\n        name: \"status\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"_requestId\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_refundee\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_callback\",\n        type: \"address\",\n      },\n    ],\n    name: \"sendRequest\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_feeCollector\",\n        type: \"address\",\n      },\n    ],\n    name: \"setFeeCollector\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_timeout\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setRequestTimeout\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    stateMutability: \"payable\",\n    type: \"receive\",\n  },\n];\n\nconst _bytecode =\n  \"0x6080346100c057601f610d9638819003918201601f19168301916001600160401b038311848410176100c55780849260409485528339810103126100c05780516001600160a01b0391828216918290036100c05760200151908282168092036100c0576000549060018060a01b0319913383821617600055604051943391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a38160015416176001556003541617600355610cba90816100dc8239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040818152600480361015610021575b505050361561001f57600080fd5b005b600092833560e01c9081633f20b4c91461097b57508063622b6af41461091a5780636a96173514610700578063715018a6146106a0578381637249fbb614610600575080637ff7b0d2146105735780638da5cb5b1461054d5780639d866985146104e9578063a42dce8014610470578063b6979c3e1461043a578063c415b95c14610412578063c7f5aaa0146103ea578063da47dc32146101d5578063e713b4c9146101b15763f2fde38b0361001157346101ad5760203660031901126101ad576100ea6109e0565b908354906001600160a01b0380831693610105338614610a19565b169384156101445750506001600160a01b031916821783557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b8382346101d15760203660031901126101d1576101ce9035610b49565b80f35b5080fd5b50919060603660031901126101d1578235906101ef6109ca565b90604435916001600160a01b038084168094036103e657848652602091878352838720546103a35781169081156103605760025442019081421161034d5784519160a0830183811067ffffffffffffffff82111761033a5786528252600384830192348452868101948552606081019488865260808201948b86528a8c528c8852888c209251835551600183015583600283019151166001600160a01b031982541617905501925116825491516003811015610327577fffffffffffffffffffffff0000000000000000000000000000000000000000009092161760a09190911b74ff00000000000000000000000000000000000000001617905581519384523390840152349083015260608201527f4eede03ca33645529b4d82428b024149165298c901cf7453f68eb43bd3d3b65890608090a180f35b634e487b7160e01b895260218a52602489fd5b634e487b7160e01b8a5260418b5260248afd5b634e487b7160e01b885260118952602488fd5b835162461bcd60e51b8152808901849052601560248201527f726566756e646565206e6f742070726f766964656400000000000000000000006044820152606490fd5b835162461bcd60e51b8152808901849052601860248201527f7265717565737420616c726561647920696e20717565756500000000000000006044820152606490fd5b8580fd5b5050346101d157816003193601126101d1576020906001600160a01b03600354169051908152f35b5050346101d157816003193601126101d1576020906001600160a01b03600154169051908152f35b50346101ad5760203660031901126101ad5760ff6003836020958461046e95358252875220015460a01c16915180926109f6565bf35b5050346101d15760203660031901126101d1577f5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f38906104ad6109e0565b6001600160a01b036104c3818654163314610a19565b80600154921690816001600160a01b03198416176001558351921682526020820152a180f35b50346101ad5760203660031901126101ad578160a0938261046e93358252602052208054926001820154916001600160a01b039160038360028401541692015493815196875260208701528501528116606084015260ff6080840191851c166109f6565b5050346101d157816003193601126101d1576001600160a01b0360209254169051908152f35b50346101ad57816003193601126101ad5761058c6109ca565b916001600160a01b036001541633036105bd57508280806101ce948194359061c350f16105b7610abd565b50610c38565b906020606492519162461bcd60e51b8352820152601160248201527f6e6f742066656520636f6c6c6563746f720000000000000000000000000000006044820152fd5b8084843461069c57602036600319011261069c5780358084528160205261062b838520541515610afd565b80845281602052828420805442111561069857848080808460039961066b965560016001600160a01b036002830154169101549061c350f16105b7610abd565b84526020528220017402000000000000000000000000000000000000000060ff60a01b1982541617905580f35b8480fd5b5050fd5b83346106fd57806003193601126106fd578080546001600160a01b03196001600160a01b038216916106d3338414610a19565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b509190346101d15760a03660031901126101d15767ffffffffffffffff833560243582811690819003610698576044358381116103e6576107449036908801610997565b949060643594851515809603610905576084359081116109055761076b9036908a01610997565b939095896001600160a01b03936107a685600354169187519b8c968795630979240d60e21b8752860152606060248601526064850191610a9c565b926044830152818b60209b8c9503925af19081156109105788916108df575b50840361089c5786976107d785610b49565b8488528087526003838920017401000000000000000000000000000000000000000060ff60a01b198254161790557f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e6878451878152a1848852865260038288200154169384610844578680f35b86956108756108839288958551958694850198633ceb5b5160e11b8a52602486015260448501526064840191610a9c565b03601f198101835282610a64565b51925af150610890610abd565b50803880808080808680f35b815162461bcd60e51b8152808901879052601d60248201527f72657175657374496420616e642070726f6f66206e6f74206d617463680000006044820152606490fd5b90508681813d8311610909575b6108f68183610a64565b810103126109055751386107c5565b8780fd5b503d6108ec565b83513d8a823e3d90fd5b5090346101ad5760203660031901126101ad577f87a73c061f18ffd513249d1d727921e40e348948b01e2979efb36ef4f5204a6391356109656001600160a01b038554163314610a19565b600254908060025582519182526020820152a180f35b8490346101d157816003193601126101d1576020906002548152f35b9181601f840112156109c55782359167ffffffffffffffff83116109c557602083818601950101116109c557565b600080fd5b602435906001600160a01b03821682036109c557565b600435906001600160a01b03821682036109c557565b906003821015610a035752565b634e487b7160e01b600052602160045260246000fd5b15610a2057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90601f8019910116810190811067ffffffffffffffff821117610a8657604052565b634e487b7160e01b600052604160045260246000fd5b908060209392818452848401376000828201840152601f01601f1916010190565b3d15610af8573d9067ffffffffffffffff8211610a865760405191610aec601f8201601f191660200184610a64565b82523d6000602084013e565b606090565b15610b0457565b60405162461bcd60e51b815260206004820152601460248201527f72657175657374206e6f7420696e2071756575650000000000000000000000006044820152606490fd5b60009080825260209060048252610b6560408420541515610afd565b6024826001600160a01b0360035416604051928380926371e8f36b60e11b82528660048301525afa908115610c2d578491610bf3575b5015610bae578252600490526040812055565b60405162461bcd60e51b815260048101839052601360248201527f70726f6f66206e6f742067656e657261746564000000000000000000000000006044820152606490fd5b90508281813d8311610c26575b610c0a8183610a64565b81010312610c2257518015158103610c225738610b9b565b8380fd5b503d610c00565b6040513d86823e3d90fd5b15610c3f57565b60405162461bcd60e51b815260206004820152601260248201527f73656e64206e6174697665206661696c656400000000000000000000000000006044820152606490fdfea26469706673582212201905409e4cdfc7fb6b946c9212735c55a3478272e9a45a4b96ed82c94b4d1ba164736f6c63430008140033\";\n\ntype BrevisRequestConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: BrevisRequestConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class BrevisRequest__factory extends ContractFactory {\n  constructor(...args: BrevisRequestConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n    this.contractName = \"BrevisRequest\";\n  }\n\n  deploy(\n    _feeCollector: string,\n    _brevisProof: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): Promise<BrevisRequest> {\n    return super.deploy(\n      _feeCollector,\n      _brevisProof,\n      overrides || {}\n    ) as Promise<BrevisRequest>;\n  }\n  getDeployTransaction(\n    _feeCollector: string,\n    _brevisProof: string,\n    overrides?: Overrides & { from?: string | Promise<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(\n      _feeCollector,\n      _brevisProof,\n      overrides || {}\n    );\n  }\n  attach(address: string): BrevisRequest {\n    return super.attach(address) as BrevisRequest;\n  }\n  connect(signer: Signer): BrevisRequest__factory {\n    return super.connect(signer) as BrevisRequest__factory;\n  }\n  static readonly contractName: \"BrevisRequest\";\n  public readonly contractName: \"BrevisRequest\";\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): BrevisRequestInterface {\n    return new utils.Interface(_abi) as BrevisRequestInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): BrevisRequest {\n    return new Contract(address, _abi, signerOrProvider) as BrevisRequest;\n  }\n}\n","import moment from \"moment\";\n\ntype UserTradeVolumeFee = {\n  id: string;\n  src_chain_id: bigint;\n  dst_chain_id: bigint;\n  trade_year_month: bigint;\n  start_ymd: bigint;\n  end_ymd: bigint;\n  account: string;\n  volume: string;\n  fee: string;\n  receipt_ids: string;\n  storage_ids: string;\n  brevis_query_hash: string;\n  brevis_query_fee: string;\n  proof: string;\n  status: bigint;\n  create_time: Date;\n  update_time: Date;\n  prover_id: string;\n  request_sent: boolean;\n  fee_rebate: string;\n  start_blk_num: bigint;\n  end_blk_num: bigint;\n};\n\ntype Receipt = {\n  id: string;\n  tx_hash: string;\n  status: bigint;\n  data: string;\n  create_time: Date;\n  update_time: Date;\n  should_be_filtered_out: boolean;\n  reason: string;\n  account: string;\n};\n\ntype Storage = {\n  id: string;\n  account: string;\n  key: string;\n  value: string;\n  blk_number: bigint;\n  status: bigint;\n  data: string;\n  create_time: Date;\n  update_time: Date;\n}; \n\nfunction validTimeNumber(input: Number): boolean {\n  return moment.utc(input.toString(), \"YYYYMMDD\", true).isValid()\n}\n\nfunction getCurrentDay(input: number): string {\n  if (isNaN(input)) {\n    return \"\"\n  }\n  const date = moment.utc(input.toString(), \"YYYYMMDD\", true)\n  if (!date.isValid()) {\n    return \"\"\n  }\n\n  return date.add(1, \"d\").format(\"YYYY-MM-DD\")\n}\nfunction findNextDay(input: number): string {\n  if (isNaN(input)) {\n    return \"\"\n  }\n  const date = moment.utc(input.toString(), \"YYYYMMDD\", true)\n  if (!date.isValid()) {\n    return \"\"\n  }\n\n  return date.add(1, \"d\").format(\"YYYY-MM-DD\")\n}\n\nfunction findDayStartTimestamp(input: number): number {\n  if (isNaN(input)) {\n    return 0\n  }\n  const date = moment.utc(input.toString(), \"YYYYMMDD\", true)\n  if (!date.isValid()) {\n    return 0\n  }\n  return date.utc().unix()\n}\n\nfunction findDayEndTimestamp(input: number): number {\n  if (isNaN(input)) {\n    return 0\n  }\n  const date = moment.utc(input.toString(), \"YYYYMMDD\", true)\n  if (!date.isValid()) {\n    return 0\n  }\n  return date.utc().add(1, \"d\").unix() - 1\n}\n\nexport { UserTradeVolumeFee, Receipt, Storage, validTimeNumber, getCurrentDay, findNextDay, findDayStartTimestamp, findDayEndTimestamp};\n","// @ts-nocheck\nimport { server } from \"./server/index\";\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\nBigInt.prototype.toJSON = function () {\n  return this.toString();\n};\n\nserver;\n"],"mappings":"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","names":["uuidv4","import_ethers","import_ethers","import_ethers","import_ethers","import_ethers","import_ethers","_abi","import_ethers","_abi","import_ethers","_abi","import_ethers","_abi","import_ethers","_abi","_bytecode","isSuperArgs","import_ethers","_abi","import_ethers","_abi","_bytecode","isSuperArgs","import_ethers","_abi","_bytecode","isSuperArgs","dotenv","FeeReimbursementApp__factory","moment","import_moment","moment","import_ethers","import_moment","express","moment","brevisRequest","dotenv"]}