/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type SwapAmountStruct = {
  token0Amt: BigNumberish;
  token1Amt: BigNumberish;
};

export type SwapAmountStructOutput = [BigNumber, BigNumber] & {
  token0Amt: BigNumber;
  token1Amt: BigNumber;
};

export declare namespace Brevis {
  export type LogExtraInfoStruct = {
    valueFromTopic: BigNumberish;
    valueIndex: BigNumberish;
    contractAddress: string;
    logTopic0: BytesLike;
  };

  export type LogExtraInfoStructOutput = [number, BigNumber, string, string] & {
    valueFromTopic: number;
    valueIndex: BigNumber;
    contractAddress: string;
    logTopic0: string;
  };

  export type LogInfoStruct = {
    logExtraInfo: Brevis.LogExtraInfoStruct;
    logIndex: BigNumberish;
    value: BytesLike;
  };

  export type LogInfoStructOutput = [
    Brevis.LogExtraInfoStructOutput,
    BigNumber,
    string
  ] & {
    logExtraInfo: Brevis.LogExtraInfoStructOutput;
    logIndex: BigNumber;
    value: string;
  };

  export type ReceiptInfoStruct = {
    blkNum: BigNumberish;
    receiptIndex: BigNumberish;
    logs: [
      Brevis.LogInfoStruct,
      Brevis.LogInfoStruct,
      Brevis.LogInfoStruct,
      Brevis.LogInfoStruct,
      Brevis.LogInfoStruct
    ];
  };

  export type ReceiptInfoStructOutput = [
    BigNumber,
    BigNumber,
    [
      Brevis.LogInfoStructOutput,
      Brevis.LogInfoStructOutput,
      Brevis.LogInfoStructOutput,
      Brevis.LogInfoStructOutput,
      Brevis.LogInfoStructOutput
    ]
  ] & {
    blkNum: BigNumber;
    receiptIndex: BigNumber;
    logs: [
      Brevis.LogInfoStructOutput,
      Brevis.LogInfoStructOutput,
      Brevis.LogInfoStructOutput,
      Brevis.LogInfoStructOutput,
      Brevis.LogInfoStructOutput
    ];
  };

  export type StorageInfoStruct = {
    blockHash: BytesLike;
    account: string;
    slot: BytesLike;
    slotValue: BytesLike;
    blockNumber: BigNumberish;
  };

  export type StorageInfoStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber
  ] & {
    blockHash: string;
    account: string;
    slot: string;
    slotValue: string;
    blockNumber: BigNumber;
  };

  export type TransactionInfoStruct = {
    leafHash: BytesLike;
    blockHash: BytesLike;
    blockNumber: BigNumberish;
    blockTime: BigNumberish;
    leafRlpPrefix: BytesLike;
  };

  export type TransactionInfoStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    leafHash: string;
    blockHash: string;
    blockNumber: BigNumber;
    blockTime: BigNumber;
    leafRlpPrefix: string;
  };

  export type ExtractInfosStruct = {
    smtRoot: BytesLike;
    receipts: Brevis.ReceiptInfoStruct[];
    stores: Brevis.StorageInfoStruct[];
    txs: Brevis.TransactionInfoStruct[];
  };

  export type ExtractInfosStructOutput = [
    string,
    Brevis.ReceiptInfoStructOutput[],
    Brevis.StorageInfoStructOutput[],
    Brevis.TransactionInfoStructOutput[]
  ] & {
    smtRoot: string;
    receipts: Brevis.ReceiptInfoStructOutput[];
    stores: Brevis.StorageInfoStructOutput[];
    txs: Brevis.TransactionInfoStructOutput[];
  };
}

export interface UserSwapAmountAppInterface extends utils.Interface {
  contractName: "UserSwapAmountApp";
  functions: {
    "brevisCallback(bytes32,bytes)": FunctionFragment;
    "brevisProof()": FunctionFragment;
    "getSwapAmount(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setVkHash(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userSwap(address)": FunctionFragment;
    "validateRequest(bytes32,uint64,(bytes32,(uint64,uint64,tuple[5])[],(bytes32,address,bytes32,bytes32,uint64)[],(bytes32,bytes32,uint64,uint64,bytes)[]))": FunctionFragment;
    "vkHash()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "brevisCallback",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "brevisProof",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapAmount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setVkHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "userSwap", values: [string]): string;
  encodeFunctionData(
    functionFragment: "validateRequest",
    values: [BytesLike, BigNumberish, Brevis.ExtractInfosStruct]
  ): string;
  encodeFunctionData(functionFragment: "vkHash", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "brevisCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "brevisProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVkHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vkHash", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "UserSwapVerified(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserSwapVerified"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type UserSwapVerifiedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; amount0: BigNumber; amount1: BigNumber }
>;

export type UserSwapVerifiedEventFilter =
  TypedEventFilter<UserSwapVerifiedEvent>;

export interface UserSwapAmountApp extends BaseContract {
  contractName: "UserSwapAmountApp";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UserSwapAmountAppInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    brevisCallback(
      _requestId: BytesLike,
      _appCircuitOutput: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    brevisProof(overrides?: CallOverrides): Promise<[string]>;

    getSwapAmount(
      swapper: string,
      overrides?: CallOverrides
    ): Promise<[SwapAmountStructOutput] & { amount: SwapAmountStructOutput }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVkHash(
      _vkHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userSwap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { token0Amt: BigNumber; token1Amt: BigNumber }
    >;

    validateRequest(
      _requestId: BytesLike,
      _chainId: BigNumberish,
      _extractInfos: Brevis.ExtractInfosStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    vkHash(overrides?: CallOverrides): Promise<[string]>;
  };

  brevisCallback(
    _requestId: BytesLike,
    _appCircuitOutput: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  brevisProof(overrides?: CallOverrides): Promise<string>;

  getSwapAmount(
    swapper: string,
    overrides?: CallOverrides
  ): Promise<SwapAmountStructOutput>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVkHash(
    _vkHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userSwap(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { token0Amt: BigNumber; token1Amt: BigNumber }
  >;

  validateRequest(
    _requestId: BytesLike,
    _chainId: BigNumberish,
    _extractInfos: Brevis.ExtractInfosStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  vkHash(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    brevisCallback(
      _requestId: BytesLike,
      _appCircuitOutput: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    brevisProof(overrides?: CallOverrides): Promise<string>;

    getSwapAmount(
      swapper: string,
      overrides?: CallOverrides
    ): Promise<SwapAmountStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setVkHash(_vkHash: BytesLike, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userSwap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { token0Amt: BigNumber; token1Amt: BigNumber }
    >;

    validateRequest(
      _requestId: BytesLike,
      _chainId: BigNumberish,
      _extractInfos: Brevis.ExtractInfosStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vkHash(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "UserSwapVerified(address,uint256,uint256)"(
      user?: string | null,
      amount0?: null,
      amount1?: null
    ): UserSwapVerifiedEventFilter;
    UserSwapVerified(
      user?: string | null,
      amount0?: null,
      amount1?: null
    ): UserSwapVerifiedEventFilter;
  };

  estimateGas: {
    brevisCallback(
      _requestId: BytesLike,
      _appCircuitOutput: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    brevisProof(overrides?: CallOverrides): Promise<BigNumber>;

    getSwapAmount(
      swapper: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVkHash(
      _vkHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userSwap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    validateRequest(
      _requestId: BytesLike,
      _chainId: BigNumberish,
      _extractInfos: Brevis.ExtractInfosStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vkHash(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    brevisCallback(
      _requestId: BytesLike,
      _appCircuitOutput: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    brevisProof(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSwapAmount(
      swapper: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVkHash(
      _vkHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userSwap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateRequest(
      _requestId: BytesLike,
      _chainId: BigNumberish,
      _extractInfos: Brevis.ExtractInfosStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vkHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
