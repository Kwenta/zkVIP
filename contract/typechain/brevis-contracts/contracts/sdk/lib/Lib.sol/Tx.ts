/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export declare namespace Tx {
  export type TxInfoStruct = {
    chainId: BigNumberish;
    nonce: BigNumberish;
    gasTipCap: BigNumberish;
    gasFeeCap: BigNumberish;
    gas: BigNumberish;
    to: AddressLike;
    value: BigNumberish;
    data: BytesLike;
    from: AddressLike;
  };

  export type TxInfoStructOutput = [
    chainId: bigint,
    nonce: bigint,
    gasTipCap: bigint,
    gasFeeCap: bigint,
    gas: bigint,
    to: string,
    value: bigint,
    data: string,
    from: string
  ] & {
    chainId: bigint;
    nonce: bigint;
    gasTipCap: bigint;
    gasFeeCap: bigint;
    gas: bigint;
    to: string;
    value: bigint;
    data: string;
    from: string;
  };
}

export interface TxInterface extends Interface {
  getFunction(nameOrSignature: "decodeTx"): FunctionFragment;

  encodeFunctionData(functionFragment: "decodeTx", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "decodeTx", data: BytesLike): Result;
}

export interface Tx extends BaseContract {
  connect(runner?: ContractRunner | null): Tx;
  waitForDeployment(): Promise<this>;

  interface: TxInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  decodeTx: TypedContractMethod<
    [txRaw: BytesLike],
    [Tx.TxInfoStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "decodeTx"
  ): TypedContractMethod<[txRaw: BytesLike], [Tx.TxInfoStructOutput], "view">;

  filters: {};
}
