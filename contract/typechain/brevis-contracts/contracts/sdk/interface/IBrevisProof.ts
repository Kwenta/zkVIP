/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace Brevis {
  export type ProofDataStruct = {
    commitHash: BytesLike;
    vkHash: BytesLike;
    appCommitHash: BytesLike;
    appVkHash: BytesLike;
    smtRoot: BytesLike;
  };

  export type ProofDataStructOutput = [
    commitHash: string,
    vkHash: string,
    appCommitHash: string,
    appVkHash: string,
    smtRoot: string
  ] & {
    commitHash: string;
    vkHash: string;
    appCommitHash: string;
    appVkHash: string;
    smtRoot: string;
  };

  export type LogExtraInfoStruct = {
    valueFromTopic: BigNumberish;
    valueIndex: BigNumberish;
    contractAddress: AddressLike;
    logTopic0: BytesLike;
  };

  export type LogExtraInfoStructOutput = [
    valueFromTopic: bigint,
    valueIndex: bigint,
    contractAddress: string,
    logTopic0: string
  ] & {
    valueFromTopic: bigint;
    valueIndex: bigint;
    contractAddress: string;
    logTopic0: string;
  };

  export type LogInfoStruct = {
    logExtraInfo: Brevis.LogExtraInfoStruct;
    logIndex: BigNumberish;
    value: BytesLike;
  };

  export type LogInfoStructOutput = [
    logExtraInfo: Brevis.LogExtraInfoStructOutput,
    logIndex: bigint,
    value: string
  ] & {
    logExtraInfo: Brevis.LogExtraInfoStructOutput;
    logIndex: bigint;
    value: string;
  };

  export type ReceiptInfoStruct = {
    blkNum: BigNumberish;
    receiptIndex: BigNumberish;
    logs: [
      Brevis.LogInfoStruct,
      Brevis.LogInfoStruct,
      Brevis.LogInfoStruct,
      Brevis.LogInfoStruct,
      Brevis.LogInfoStruct
    ];
  };

  export type ReceiptInfoStructOutput = [
    blkNum: bigint,
    receiptIndex: bigint,
    logs: [
      Brevis.LogInfoStructOutput,
      Brevis.LogInfoStructOutput,
      Brevis.LogInfoStructOutput,
      Brevis.LogInfoStructOutput,
      Brevis.LogInfoStructOutput
    ]
  ] & {
    blkNum: bigint;
    receiptIndex: bigint;
    logs: [
      Brevis.LogInfoStructOutput,
      Brevis.LogInfoStructOutput,
      Brevis.LogInfoStructOutput,
      Brevis.LogInfoStructOutput,
      Brevis.LogInfoStructOutput
    ];
  };

  export type StorageInfoStruct = {
    blockHash: BytesLike;
    account: AddressLike;
    slot: BytesLike;
    slotValue: BytesLike;
    blockNumber: BigNumberish;
  };

  export type StorageInfoStructOutput = [
    blockHash: string,
    account: string,
    slot: string,
    slotValue: string,
    blockNumber: bigint
  ] & {
    blockHash: string;
    account: string;
    slot: string;
    slotValue: string;
    blockNumber: bigint;
  };

  export type TransactionInfoStruct = {
    leafHash: BytesLike;
    blockHash: BytesLike;
    blockNumber: BigNumberish;
    blockTime: BigNumberish;
    leafRlpPrefix: BytesLike;
  };

  export type TransactionInfoStructOutput = [
    leafHash: string,
    blockHash: string,
    blockNumber: bigint,
    blockTime: bigint,
    leafRlpPrefix: string
  ] & {
    leafHash: string;
    blockHash: string;
    blockNumber: bigint;
    blockTime: bigint;
    leafRlpPrefix: string;
  };

  export type ExtractInfosStruct = {
    smtRoot: BytesLike;
    receipts: Brevis.ReceiptInfoStruct[];
    stores: Brevis.StorageInfoStruct[];
    txs: Brevis.TransactionInfoStruct[];
  };

  export type ExtractInfosStructOutput = [
    smtRoot: string,
    receipts: Brevis.ReceiptInfoStructOutput[],
    stores: Brevis.StorageInfoStructOutput[],
    txs: Brevis.TransactionInfoStructOutput[]
  ] & {
    smtRoot: string;
    receipts: Brevis.ReceiptInfoStructOutput[];
    stores: Brevis.StorageInfoStructOutput[];
    txs: Brevis.TransactionInfoStructOutput[];
  };
}

export interface IBrevisProofInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getProofAppData"
      | "getProofData"
      | "hasProof"
      | "mustSubmitAggProof"
      | "mustValidateRequest"
      | "mustValidateRequests"
      | "submitProof"
      | "validateRequest"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getProofAppData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProofData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "hasProof", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "mustSubmitAggProof",
    values: [BigNumberish, BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mustValidateRequest",
    values: [
      BigNumberish,
      Brevis.ProofDataStruct,
      BytesLike,
      BytesLike[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mustValidateRequests",
    values: [BigNumberish, Brevis.ProofDataStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProof",
    values: [BigNumberish, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "validateRequest",
    values: [BytesLike, BigNumberish, Brevis.ExtractInfosStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "getProofAppData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProofData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasProof", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mustSubmitAggProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mustValidateRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mustValidateRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateRequest",
    data: BytesLike
  ): Result;
}

export interface IBrevisProof extends BaseContract {
  connect(runner?: ContractRunner | null): IBrevisProof;
  waitForDeployment(): Promise<this>;

  interface: IBrevisProofInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getProofAppData: TypedContractMethod<
    [_requestId: BytesLike],
    [[string, string]],
    "view"
  >;

  getProofData: TypedContractMethod<
    [_requestId: BytesLike],
    [Brevis.ProofDataStructOutput],
    "view"
  >;

  hasProof: TypedContractMethod<[_requestId: BytesLike], [boolean], "view">;

  mustSubmitAggProof: TypedContractMethod<
    [
      _chainId: BigNumberish,
      _requestIds: BytesLike[],
      _proofWithPubInputs: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  mustValidateRequest: TypedContractMethod<
    [
      _chainId: BigNumberish,
      _proofData: Brevis.ProofDataStruct,
      _merkleRoot: BytesLike,
      _merkleProof: BytesLike[],
      _nodeIndex: BigNumberish
    ],
    [void],
    "view"
  >;

  mustValidateRequests: TypedContractMethod<
    [_chainId: BigNumberish, _proofDataArray: Brevis.ProofDataStruct[]],
    [void],
    "view"
  >;

  submitProof: TypedContractMethod<
    [
      _chainId: BigNumberish,
      _proofWithPubInputs: BytesLike,
      _withAppProof: boolean
    ],
    [string],
    "nonpayable"
  >;

  validateRequest: TypedContractMethod<
    [
      _requestId: BytesLike,
      _chainId: BigNumberish,
      _info: Brevis.ExtractInfosStruct
    ],
    [void],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getProofAppData"
  ): TypedContractMethod<[_requestId: BytesLike], [[string, string]], "view">;
  getFunction(
    nameOrSignature: "getProofData"
  ): TypedContractMethod<
    [_requestId: BytesLike],
    [Brevis.ProofDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasProof"
  ): TypedContractMethod<[_requestId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "mustSubmitAggProof"
  ): TypedContractMethod<
    [
      _chainId: BigNumberish,
      _requestIds: BytesLike[],
      _proofWithPubInputs: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mustValidateRequest"
  ): TypedContractMethod<
    [
      _chainId: BigNumberish,
      _proofData: Brevis.ProofDataStruct,
      _merkleRoot: BytesLike,
      _merkleProof: BytesLike[],
      _nodeIndex: BigNumberish
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "mustValidateRequests"
  ): TypedContractMethod<
    [_chainId: BigNumberish, _proofDataArray: Brevis.ProofDataStruct[]],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitProof"
  ): TypedContractMethod<
    [
      _chainId: BigNumberish,
      _proofWithPubInputs: BytesLike,
      _withAppProof: boolean
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateRequest"
  ): TypedContractMethod<
    [
      _requestId: BytesLike,
      _chainId: BigNumberish,
      _info: Brevis.ExtractInfosStruct
    ],
    [void],
    "view"
  >;

  filters: {};
}
