/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FeeReimbursementApp,
  FeeReimbursementAppInterface,
} from "../FeeReimbursementApp";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_brevisProof",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "tradeYearMonth",
        type: "uint24",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "FeeReimbursed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_requestId",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "_appCircuitOutput",
        type: "bytes",
      },
    ],
    name: "brevisCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "brevisProof",
    outputs: [
      {
        internalType: "contract IBrevisProof",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_vkHash",
        type: "bytes32",
      },
    ],
    name: "setVkHash",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_requestId",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "_chainId",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "smtRoot",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "uint64",
                name: "blkNum",
                type: "uint64",
              },
              {
                internalType: "uint64",
                name: "receiptIndex",
                type: "uint64",
              },
              {
                components: [
                  {
                    components: [
                      {
                        internalType: "uint8",
                        name: "valueFromTopic",
                        type: "uint8",
                      },
                      {
                        internalType: "uint64",
                        name: "valueIndex",
                        type: "uint64",
                      },
                      {
                        internalType: "address",
                        name: "contractAddress",
                        type: "address",
                      },
                      {
                        internalType: "bytes32",
                        name: "logTopic0",
                        type: "bytes32",
                      },
                    ],
                    internalType: "struct Brevis.LogExtraInfo",
                    name: "logExtraInfo",
                    type: "tuple",
                  },
                  {
                    internalType: "uint64",
                    name: "logIndex",
                    type: "uint64",
                  },
                  {
                    internalType: "bytes32",
                    name: "value",
                    type: "bytes32",
                  },
                ],
                internalType: "struct Brevis.LogInfo[5]",
                name: "logs",
                type: "tuple[5]",
              },
            ],
            internalType: "struct Brevis.ReceiptInfo[]",
            name: "receipts",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32",
              },
              {
                internalType: "address",
                name: "account",
                type: "address",
              },
              {
                internalType: "bytes32",
                name: "slot",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "slotValue",
                type: "bytes32",
              },
              {
                internalType: "uint64",
                name: "blockNumber",
                type: "uint64",
              },
            ],
            internalType: "struct Brevis.StorageInfo[]",
            name: "stores",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "leafHash",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32",
              },
              {
                internalType: "uint64",
                name: "blockNumber",
                type: "uint64",
              },
              {
                internalType: "uint64",
                name: "blockTime",
                type: "uint64",
              },
              {
                internalType: "bytes",
                name: "leafRlpPrefix",
                type: "bytes",
              },
            ],
            internalType: "struct Brevis.TransactionInfo[]",
            name: "txs",
            type: "tuple[]",
          },
        ],
        internalType: "struct Brevis.ExtractInfos",
        name: "_extractInfos",
        type: "tuple",
      },
    ],
    name: "validateRequest",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "vkHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a0346100be57601f610e1b38819003918201601f19168301916001600160401b038311848410176100c3578084926020946040528339810103126100be57516001600160a01b0390818116908190036100be576080526000543360018060a01b0319821617600055604051913391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3610d4190816100da8239608051818181610189015281816103ae015281816104a9015261099b0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c9081634fe840f514610ba757508063715018a614610b3d5780637859f6d914610b0e57806379d6b6a21461092b5780637c08aa74146101d45780638da5cb5b146101ad578063c7f5aaa0146101695763f2fde38b1461007757600080fd5b34610164576020366003190112610164576004356001600160a01b0380821680920361016457600054908116906100af338314610cc0565b82156100f95773ffffffffffffffffffffffffffffffffffffffff19839116176000557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b600080fd5b346101645760003660031901126101645760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b346101645760003660031901126101645760206001600160a01b0360005416604051908152f35b3461016457600319606036820112610164576024359067ffffffffffffffff821682036101645767ffffffffffffffff6044351161016457608090604435360301126101645760405161022681610bd7565b6044356004013581526024604435013567ffffffffffffffff81116101645760443501366023820112156101645760048101359061026382610c4d565b916102716040519384610c2b565b808352602083019136602483600a1b830101116101645760248101925b602483600a1b83010184106108165750505050602082015260448035013567ffffffffffffffff8111610164576044350136602382011215610164576004810135906102d982610c4d565b916102e76040519384610c2b565b808352602083019136602460a0840283010111610164579160248301925b602460a0840282010184106107b2575050505060408201526064604435013567ffffffffffffffff8111610164573660238260443501011215610164576004816044350101359061035582610c4d565b916103636040519384610c2b565b80835260208301913660248360051b8360443501010111610164576024816044350101925b60248360051b8360443501010184106106dd575050505060608201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163b1561016457604051631f022a9d60e21b8152600480359082015267ffffffffffffffff9092166024830152606060448301528051606483015260208082015160806084850152805160e4850181905284936101048501939092019060005b81811061061f575050506040810151916063198482030160a48501526020808451928381520193019060005b8181106105c65750505060600151906063198382030160c484015281519081815260208101916020808260051b8401019401926000925b82841061051b5786600081808903816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa801561050f576104e1575b602060405160018152f35b67ffffffffffffffff81116104f957604052806104d6565b634e487b7160e01b600052604160045260246000fd5b6040513d6000823e3d90fd5b919395509193601f1982820301835260808651805183526020810151602084015267ffffffffffffffff604082015116604084015267ffffffffffffffff606082015116606084015201519060a060808201528151918260a083015260005b8381106105b05750506020600192819260c0916000838284010152601f8019910116010197019301940191929093869594610490565b80602080928401015160c082860101520161057a565b9194509192602060a060019267ffffffffffffffff60808951805184526001600160a01b038682015116868501526040810151604085015260608101516060850152015116608082015201950191019185949392610459565b91945091926040855167ffffffffffffffff815116835267ffffffffffffffff6020820151166020840152015160408201906000915b600583106106775750505060206104006001920195019101918594939261042d565b602060c0600192604085516060815160ff815116855267ffffffffffffffff8782015116878601526001600160a01b038482015116848601520151606084015267ffffffffffffffff85820151166080840152015160a082015201920192019190610655565b833567ffffffffffffffff81116101645760a06044358401820136036023190112610164576040519161070f83610c0f565b60448035850183016024810135855290810135602085015261073390606401610bc2565b604084015261074a60848386604435010101610bc2565b606084015260a48285604435010101359067ffffffffffffffff8211610164573660438385886044350101010112156101645760249360209384936107a0913691604480358b0190920101808901359101610c79565b60808201528152019401939050610388565b60a0843603126101645760a08060206024946040516107d081610c0f565b883581526107df838a01610c65565b83820152604089013560408201526060890135606082015261080360808a01610bc2565b6080820152815201950194925050610305565b610400843603126101645760405161082d81610bf3565b61083685610bc2565b815261084460208601610bc2565b602082015236605f860112156101645760405161086081610c0f565b80366104008801116101645760408701905b6104008801821061089657505060408201528152610400939093019260200161028e565b60c08236031261016457604051906108ad82610bf3565b60808336031261016457604051906108c482610bd7565b60ff8435168435036101645760c092602092853581526108e5848701610bc2565b848201526108f560408701610c65565b604082015260608601356060820152815261091260808601610bc2565b8382015260a08501356040820152815201910190610872565b3461016457604036600319011261016457602480359067ffffffffffffffff808311610164573660238401121561016457826004013590811161016457818301913681838601011161016457604051632cc27dc960e11b8152600435600482015260408183816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa90811561050f57600090600092610ad4575b506109db368587610c79565b6020815191012003610a905760015403610a4c5750806014116101645780601711610164576036116101645760407fdc6e05973da8a8a27836d1d7e3c4d89673dded99116bf15261dd5a9b8b3f6a0891603b825194603881013560e81c8652013560081c60208501523560601c92a2005b606490600a6040519162461bcd60e51b8352602060048401528201527f696e76616c696420766b000000000000000000000000000000000000000000006044820152fd5b60405162461bcd60e51b8152602060048201819052818401527f6661696c656420746f206f70656e206f757470757420636f6d6d69746d656e746044820152606490fd5b9150506040813d604011610b06575b81610af060409383610c2b565b81010312610164576020815191015190866109cf565b3d9150610ae3565b3461016457602036600319011261016457610b356001600160a01b03600054163314610cc0565b600435600155005b34610164576000366003190112610164576000805473ffffffffffffffffffffffffffffffffffffffff196001600160a01b03821691610b7e338414610cc0565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b34610164576000366003190112610164576020906001548152f35b359067ffffffffffffffff8216820361016457565b6080810190811067ffffffffffffffff8211176104f957604052565b6060810190811067ffffffffffffffff8211176104f957604052565b60a0810190811067ffffffffffffffff8211176104f957604052565b90601f8019910116810190811067ffffffffffffffff8211176104f957604052565b67ffffffffffffffff81116104f95760051b60200190565b35906001600160a01b038216820361016457565b92919267ffffffffffffffff82116104f95760405191610ca3601f8201601f191660200184610c2b565b829481845281830111610164578281602093846000960137010152565b15610cc757565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfea2646970667358221220c8ac0c48a6a77cdf109efb43e6f8120c6bcb04596931370ea001f57b24f256ee64736f6c63430008140033";

type FeeReimbursementAppConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FeeReimbursementAppConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FeeReimbursementApp__factory extends ContractFactory {
  constructor(...args: FeeReimbursementAppConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "FeeReimbursementApp";
  }

  deploy(
    _brevisProof: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FeeReimbursementApp> {
    return super.deploy(
      _brevisProof,
      overrides || {}
    ) as Promise<FeeReimbursementApp>;
  }
  getDeployTransaction(
    _brevisProof: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_brevisProof, overrides || {});
  }
  attach(address: string): FeeReimbursementApp {
    return super.attach(address) as FeeReimbursementApp;
  }
  connect(signer: Signer): FeeReimbursementApp__factory {
    return super.connect(signer) as FeeReimbursementApp__factory;
  }
  static readonly contractName: "FeeReimbursementApp";
  public readonly contractName: "FeeReimbursementApp";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FeeReimbursementAppInterface {
    return new utils.Interface(_abi) as FeeReimbursementAppInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FeeReimbursementApp {
    return new Contract(address, _abi, signerOrProvider) as FeeReimbursementApp;
  }
}
