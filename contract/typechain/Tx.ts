/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Tx {
  export type TxInfoStruct = {
    chainId: BigNumberish;
    nonce: BigNumberish;
    gasTipCap: BigNumberish;
    gasFeeCap: BigNumberish;
    gas: BigNumberish;
    to: string;
    value: BigNumberish;
    data: BytesLike;
    from: string;
  };

  export type TxInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    string
  ] & {
    chainId: BigNumber;
    nonce: BigNumber;
    gasTipCap: BigNumber;
    gasFeeCap: BigNumber;
    gas: BigNumber;
    to: string;
    value: BigNumber;
    data: string;
    from: string;
  };
}

export interface TxInterface extends utils.Interface {
  contractName: "Tx";
  functions: {
    "decodeTx(bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "decodeTx", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "decodeTx", data: BytesLike): Result;

  events: {};
}

export interface Tx extends BaseContract {
  contractName: "Tx";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TxInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decodeTx(
      txRaw: BytesLike,
      overrides?: CallOverrides
    ): Promise<[Tx.TxInfoStructOutput] & { info: Tx.TxInfoStructOutput }>;
  };

  decodeTx(
    txRaw: BytesLike,
    overrides?: CallOverrides
  ): Promise<Tx.TxInfoStructOutput>;

  callStatic: {
    decodeTx(
      txRaw: BytesLike,
      overrides?: CallOverrides
    ): Promise<Tx.TxInfoStructOutput>;
  };

  filters: {};

  estimateGas: {
    decodeTx(txRaw: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    decodeTx(
      txRaw: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
