{
  "address": "0xa289Edd1613FAd703C40C917BeE48881B6Fe1648",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_brevisProof",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidNewClaimPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "onlyClaimContractCanAccess",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "BrevisProofUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ClaimerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ContractsHashUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint248",
          "name": "feeRebate",
          "type": "uint248"
        },
        {
          "indexed": false,
          "internalType": "uint248",
          "name": "volume30D",
          "type": "uint248"
        },
        {
          "indexed": false,
          "internalType": "uint248",
          "name": "feeRebateWithRate",
          "type": "uint248"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "startBlockNumber",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "endBlockNumber",
          "type": "uint64"
        }
      ],
      "name": "FeeRebateAccumulated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "FeeRebateTireModuleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint248",
          "name": "feeRebate",
          "type": "uint248"
        }
      ],
      "name": "FeeReimbursed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "MigrationDone",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint248",
          "name": "feeAccumulated",
          "type": "uint248"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "startBlockNumber",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "endBlockNumber",
          "type": "uint64"
        }
      ],
      "name": "MigrationFinishedForAccount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "vkHashes",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "internalType": "uint16[]",
          "name": "sizes",
          "type": "uint16[]"
        }
      ],
      "name": "VkHashesUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountAccumulatedFee",
      "outputs": [
        {
          "internalType": "uint248",
          "name": "",
          "type": "uint248"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountClaimPeriod",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "startBlockNumber",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "endBlockNumber",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "commitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "vkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appCommitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appVkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "smtRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Brevis.ProofData[]",
          "name": "_proofDataArray",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_appCircuitOutputs",
          "type": "bytes[]"
        }
      ],
      "name": "brevisBatchCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_appCircuitOutput",
          "type": "bytes"
        }
      ],
      "name": "brevisCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "brevisProof",
      "outputs": [
        {
          "internalType": "contract IBrevisProof",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractsHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRebateTierModule",
      "outputs": [
        {
          "internalType": "contract IFeeRebateTierModule",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardTokenDecimals",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_brevisProof",
          "type": "address"
        }
      ],
      "name": "setBrevisProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimContract",
          "type": "address"
        }
      ],
      "name": "setClaimContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        }
      ],
      "name": "setClaimer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractsHash",
          "type": "uint256"
        }
      ],
      "name": "setContractsHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IFeeRebateTierModule",
          "name": "_feeRebateTierModule",
          "type": "address"
        }
      ],
      "name": "setFeeRebateTierModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "_decimals",
          "type": "uint24"
        }
      ],
      "name": "setRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_vkHashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint16[]",
          "name": "_sizes",
          "type": "uint16[]"
        }
      ],
      "name": "setVkHashes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "commitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "vkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appCommitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appVkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "smtRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Brevis.ProofData",
          "name": "_proofData",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint8",
          "name": "_nodeIndex",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_appCircuitOutput",
          "type": "bytes"
        }
      ],
      "name": "singleRun",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "smtRoot",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "blkNum",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "receiptIndex",
                  "type": "uint64"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint8",
                          "name": "valueFromTopic",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint64",
                          "name": "valueIndex",
                          "type": "uint64"
                        },
                        {
                          "internalType": "address",
                          "name": "contractAddress",
                          "type": "address"
                        },
                        {
                          "internalType": "bytes32",
                          "name": "logTopic0",
                          "type": "bytes32"
                        }
                      ],
                      "internalType": "struct Brevis.LogExtraInfo",
                      "name": "logExtraInfo",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint64",
                      "name": "logIndex",
                      "type": "uint64"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "value",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct Brevis.LogInfo[5]",
                  "name": "logs",
                  "type": "tuple[5]"
                }
              ],
              "internalType": "struct Brevis.ReceiptInfo[]",
              "name": "receipts",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "blockHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "slot",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "slotValue",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "blockNumber",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Brevis.StorageInfo[]",
              "name": "stores",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "leafHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "blockHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "blockNumber",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "blockTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes",
                  "name": "leafRlpPrefix",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Brevis.TransactionInfo[]",
              "name": "txs",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Brevis.ExtractInfos",
          "name": "_extractInfos",
          "type": "tuple"
        }
      ],
      "name": "validateRequest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "vkHashesToCircuitSize",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x19bc11ae834ad1b4d5cd5b03741a643a2c76648ed70100eb16f992c8eed1fec1",
  "receipt": {
    "to": null,
    "from": "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "contractAddress": "0xa289Edd1613FAd703C40C917BeE48881B6Fe1648",
    "transactionIndex": 1,
    "gasUsed": "1789121",
    "logsBloom": "0x
    "blockHash": "0x5736a5442203b4aed257e16eb5e4cc9f028f20408f50cc86b2cdb27108a18a34",
    "transactionHash": "0x19bc11ae834ad1b4d5cd5b03741a643a2c76648ed70100eb16f992c8eed1fec1",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 123793181,
        "transactionHash": "0x19bc11ae834ad1b4d5cd5b03741a643a2c76648ed70100eb16f992c8eed1fec1",
        "address": "0xa289Edd1613FAd703C40C917BeE48881B6Fe1648",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5736a5442203b4aed257e16eb5e4cc9f028f20408f50cc86b2cdb27108a18a34"
      }
    ],
    "blockNumber": 123793181,
    "cumulativeGasUsed": "1832960",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6CD95817F275bDf5C9cC401CbCcbFfd99c7f186A"
  ],
  "numDeployments": 14,
  "solcInputHash": "664a78316a0667c92708cb4a54c63b38",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_brevisProof\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidNewClaimPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"onlyClaimContractCanAccess\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BrevisProofUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ClaimerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ContractsHashUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint248\",\"name\":\"feeRebate\",\"type\":\"uint248\"},{\"indexed\":false,\"internalType\":\"uint248\",\"name\":\"volume30D\",\"type\":\"uint248\"},{\"indexed\":false,\"internalType\":\"uint248\",\"name\":\"feeRebateWithRate\",\"type\":\"uint248\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"startBlockNumber\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"endBlockNumber\",\"type\":\"uint64\"}],\"name\":\"FeeRebateAccumulated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"FeeRebateTireModuleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint248\",\"name\":\"feeRebate\",\"type\":\"uint248\"}],\"name\":\"FeeReimbursed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MigrationDone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint248\",\"name\":\"feeAccumulated\",\"type\":\"uint248\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"startBlockNumber\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"endBlockNumber\",\"type\":\"uint64\"}],\"name\":\"MigrationFinishedForAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"vkHashes\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"sizes\",\"type\":\"uint16[]\"}],\"name\":\"VkHashesUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountAccumulatedFee\",\"outputs\":[{\"internalType\":\"uint248\",\"name\":\"\",\"type\":\"uint248\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountClaimPeriod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"startBlockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endBlockNumber\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"commitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"vkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.ProofData[]\",\"name\":\"_proofDataArray\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_appCircuitOutputs\",\"type\":\"bytes[]\"}],\"name\":\"brevisBatchCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_appCircuitOutput\",\"type\":\"bytes\"}],\"name\":\"brevisCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brevisProof\",\"outputs\":[{\"internalType\":\"contract IBrevisProof\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractsHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRebateTierModule\",\"outputs\":[{\"internalType\":\"contract IFeeRebateTierModule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenDecimals\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_brevisProof\",\"type\":\"address\"}],\"name\":\"setBrevisProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimContract\",\"type\":\"address\"}],\"name\":\"setClaimContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"setClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractsHash\",\"type\":\"uint256\"}],\"name\":\"setContractsHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeeRebateTierModule\",\"name\":\"_feeRebateTierModule\",\"type\":\"address\"}],\"name\":\"setFeeRebateTierModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_decimals\",\"type\":\"uint24\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_vkHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_sizes\",\"type\":\"uint16[]\"}],\"name\":\"setVkHashes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"commitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"vkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.ProofData\",\"name\":\"_proofData\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"_nodeIndex\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_appCircuitOutput\",\"type\":\"bytes\"}],\"name\":\"singleRun\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blkNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiptIndex\",\"type\":\"uint64\"},{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"valueFromTopic\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"valueIndex\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"logTopic0\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.LogExtraInfo\",\"name\":\"logExtraInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"logIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.LogInfo[5]\",\"name\":\"logs\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct Brevis.ReceiptInfo[]\",\"name\":\"receipts\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"slotValue\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"}],\"internalType\":\"struct Brevis.StorageInfo[]\",\"name\":\"stores\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leafHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"blockTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"leafRlpPrefix\",\"type\":\"bytes\"}],\"internalType\":\"struct Brevis.TransactionInfo[]\",\"name\":\"txs\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Brevis.ExtractInfos\",\"name\":\"_extractInfos\",\"type\":\"tuple\"}],\"name\":\"validateRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"vkHashesToCircuitSize\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ZeroAddress()\":[{\"notice\":\"cannot set this value to the zero address\"}],\"onlyClaimContractCanAccess()\":[{\"notice\":\"Only Claim Contract can access this\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FeeReimbursementApp.sol\":\"FeeReimbursementApp\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"brevis-contracts/contracts/sdk/apps/framework/BrevisApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../../interface/IBrevisProof.sol\\\";\\nimport \\\"../../lib/Lib.sol\\\";\\n\\nabstract contract BrevisApp {\\n    IBrevisProof public brevisProof;\\n\\n    constructor(IBrevisProof _brevisProof) {\\n        brevisProof = _brevisProof;\\n    }\\n\\n    function validateRequest(\\n        bytes32 _requestId,\\n        uint64 _chainId,\\n        Brevis.ExtractInfos memory _extractInfos\\n    ) public view virtual returns (bool) {\\n        brevisProof.validateRequest(_requestId, _chainId, _extractInfos);\\n        return true;\\n    }\\n\\n    function brevisCallback(bytes32 _requestId, bytes calldata _appCircuitOutput) external {\\n        (bytes32 appCommitHash, bytes32 appVkHash) = IBrevisProof(brevisProof).getProofAppData(_requestId);\\n        require(appCommitHash == keccak256(_appCircuitOutput), \\\"failed to open output commitment\\\");\\n        handleProofResult(_requestId, appVkHash, _appCircuitOutput);\\n    }\\n\\n    function handleProofResult(bytes32 _requestId, bytes32 _vkHash, bytes calldata _appCircuitOutput) internal virtual {\\n        // to be overrided by custom app\\n    }\\n\\n    function brevisBatchCallback(\\n        uint64 _chainId,\\n        Brevis.ProofData[] calldata _proofDataArray,\\n        bytes[] calldata _appCircuitOutputs\\n    ) external {\\n        require(_proofDataArray.length == _appCircuitOutputs.length, \\\"length not match\\\");\\n        IBrevisProof(brevisProof).mustValidateRequests(_chainId, _proofDataArray);\\n        for (uint i = 0; i < _proofDataArray.length; i++) {\\n            require(\\n                _proofDataArray[i].appCommitHash == keccak256(_appCircuitOutputs[i]),\\n                \\\"failed to open output commitment\\\"\\n            );\\n            handleProofResult(_proofDataArray[i].commitHash, _proofDataArray[i].appVkHash, _appCircuitOutputs[i]);\\n        }\\n    }\\n\\n    // handle request in AggProof case, called by biz side\\n    function singleRun(\\n        uint64 _chainId,\\n        Brevis.ProofData calldata _proofData,\\n        bytes32 _merkleRoot,\\n        bytes32[] calldata _merkleProof,\\n        uint8 _nodeIndex,\\n        bytes calldata _appCircuitOutput\\n    ) external {\\n        IBrevisProof(brevisProof).mustValidateRequest(_chainId, _proofData, _merkleRoot, _merkleProof, _nodeIndex);\\n        require(_proofData.appCommitHash == keccak256(_appCircuitOutput), \\\"failed to open output commitment\\\");\\n        handleProofResult(_proofData.commitHash, _proofData.appVkHash, _appCircuitOutput);\\n    }\\n}\\n\",\"keccak256\":\"0x445ba02d0b13502dcab218e326dc946d3024c1886dd1ef6c4f416b7d27264801\",\"license\":\"MIT\"},\"brevis-contracts/contracts/sdk/interface/IBrevisProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../lib/Lib.sol\\\";\\n\\ninterface IBrevisProof {\\n    function submitProof(\\n        uint64 _chainId,\\n        bytes calldata _proofWithPubInputs,\\n        bool _withAppProof\\n    ) external returns (bytes32 _requestId);\\n\\n    function hasProof(bytes32 _requestId) external view returns (bool);\\n\\n    // used by contract app\\n    function validateRequest(bytes32 _requestId, uint64 _chainId, Brevis.ExtractInfos memory _info) external view;\\n\\n    function getProofData(bytes32 _requestId) external view returns (Brevis.ProofData memory);\\n\\n    // return appCommitHash and appVkHash\\n    function getProofAppData(bytes32 _requestId) external view returns (bytes32, bytes32);\\n\\n    function mustValidateRequest(\\n        uint64 _chainId,\\n        Brevis.ProofData calldata _proofData,\\n        bytes32 _merkleRoot,\\n        bytes32[] calldata _merkleProof,\\n        uint8 _nodeIndex\\n    ) external view;\\n\\n    function mustValidateRequests(uint64 _chainId, Brevis.ProofData[] calldata _proofDataArray) external view;\\n\\n    function mustSubmitAggProof(\\n        uint64 _chainId,\\n        bytes32[] calldata _requestIds,\\n        bytes calldata _proofWithPubInputs\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0eeacecc363649dc7f8fc93a273ccf5df26dad339382a278964ed06a4d71a178\",\"license\":\"MIT\"},\"brevis-contracts/contracts/sdk/lib/Lib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"solidity-rlp/contracts/RLPReader.sol\\\";\\n\\nlibrary Brevis {\\n    uint256 constant NumField = 5; // supports at most 5 fields per receipt log\\n\\n    struct ReceiptInfo {\\n        uint64 blkNum;\\n        uint64 receiptIndex; // ReceiptIndex in the block\\n        LogInfo[NumField] logs;\\n    }\\n\\n    struct LogInfo {\\n        LogExtraInfo logExtraInfo;\\n        uint64 logIndex; // LogIndex of the field\\n        bytes32 value;\\n    }\\n\\n    struct LogExtraInfo {\\n        uint8 valueFromTopic;\\n        uint64 valueIndex; // index of the fields in topic or data\\n        address contractAddress;\\n        bytes32 logTopic0;\\n    }\\n\\n    struct StorageInfo {\\n        bytes32 blockHash;\\n        address account;\\n        bytes32 slot;\\n        bytes32 slotValue;\\n        uint64 blockNumber;\\n    }\\n\\n    struct TransactionInfo {\\n        bytes32 leafHash;\\n        bytes32 blockHash;\\n        uint64 blockNumber;\\n        uint64 blockTime;\\n        bytes leafRlpPrefix;\\n    }\\n\\n    struct ExtractInfos {\\n        bytes32 smtRoot;\\n        ReceiptInfo[] receipts;\\n        StorageInfo[] stores;\\n        TransactionInfo[] txs;\\n    }\\n\\n    // retrieved from proofData, to align the logs with circuit...\\n    struct ProofData {\\n        bytes32 commitHash;\\n        bytes32 vkHash;\\n        bytes32 appCommitHash; // zk-program computing circuit commit hash\\n        bytes32 appVkHash; // zk-program computing circuit Verify Key hash\\n        bytes32 smtRoot; // for zk-program computing proof only\\n    }\\n}\\n\\nlibrary Tx {\\n    using RLPReader for bytes;\\n    using RLPReader for uint;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    struct TxInfo {\\n        uint64 chainId;\\n        uint64 nonce;\\n        uint256 gasTipCap;\\n        uint256 gasFeeCap;\\n        uint256 gas;\\n        address to;\\n        uint256 value;\\n        bytes data;\\n        address from; // calculate from V R S\\n    }\\n\\n    // support DynamicFeeTxType for now\\n    function decodeTx(bytes calldata txRaw) public pure returns (TxInfo memory info) {\\n        uint8 txType = uint8(txRaw[0]);\\n        require(txType == 2, \\\"not a DynamicFeeTxType\\\");\\n\\n        bytes memory rlpData = txRaw[1:];\\n        RLPReader.RLPItem[] memory values = rlpData.toRlpItem().toList();\\n        info.chainId = uint64(values[0].toUint());\\n        info.nonce = uint64(values[1].toUint());\\n        info.gasTipCap = values[2].toUint();\\n        info.gasFeeCap = values[3].toUint();\\n        info.gas = values[4].toUint();\\n        info.to = values[5].toAddress();\\n        info.value = values[6].toUint();\\n        info.data = values[7].toBytes();\\n\\n        (uint8 v, bytes32 r, bytes32 s) = (\\n            uint8(values[9].toUint()),\\n            bytes32(values[10].toBytes()),\\n            bytes32(values[11].toBytes())\\n        );\\n        // remove r,s,v and adjust length field\\n        bytes memory unsignedTxRaw;\\n        uint16 unsignedTxRawDataLength;\\n        uint8 prefix = uint8(txRaw[1]);\\n        uint8 lenBytes = prefix - 0xf7; // assume lenBytes won't larger than 2, means the tx rlp data size won't exceed 2^16\\n        if (lenBytes == 1) {\\n            unsignedTxRawDataLength = uint8(bytes1(txRaw[2:3])) - 67; //67 is the bytes of r,s,v\\n        } else {\\n            unsignedTxRawDataLength = uint16(bytes2(txRaw[2:2 + lenBytes])) - 67;\\n        }\\n        if (unsignedTxRawDataLength <= 55) {\\n            unsignedTxRaw = abi.encodePacked(txRaw[:2], txRaw[3:txRaw.length - 67]);\\n            unsignedTxRaw[1] = bytes1(0xc0 + uint8(unsignedTxRawDataLength));\\n        } else {\\n            if (unsignedTxRawDataLength <= 255) {\\n                unsignedTxRaw = abi.encodePacked(\\n                    txRaw[0],\\n                    bytes1(0xf8),\\n                    bytes1(uint8(unsignedTxRawDataLength)),\\n                    txRaw[2 + lenBytes:txRaw.length - 67]\\n                );\\n            } else {\\n                unsignedTxRaw = abi.encodePacked(\\n                    txRaw[0],\\n                    bytes1(0xf9),\\n                    bytes2(unsignedTxRawDataLength),\\n                    txRaw[2 + lenBytes:txRaw.length - 67]\\n                );\\n            }\\n        }\\n        info.from = recover(keccak256(unsignedTxRaw), r, s, v);\\n    }\\n\\n    function recover(bytes32 message, bytes32 r, bytes32 s, uint8 v) internal pure returns (address) {\\n        if (v < 27) {\\n            v += 27;\\n        }\\n        return ecrecover(message, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0x86a85c2e49d0b867dac8bbad39ae87d80e77e673c077daf0c76c7eaed98ae925\",\"license\":\"MIT\"},\"contracts/FeeReimbursementApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"brevis-contracts/contracts/sdk/apps/framework/BrevisApp.sol\\\";\\nimport \\\"brevis-contracts/contracts/sdk/interface/IBrevisProof.sol\\\";\\n\\ninterface IFeeRebateTierModule {\\n    function getFeeRebatePercentage(uint248 volume30D) external view returns (uint64);\\n}\\n\\nstruct ClaimPeriod {\\n    uint64 startBlockNumber;\\n    uint64 endBlockNumber;     \\n}\\n\\nerror InvalidNewClaimPeriod();\\n/// @notice Only Claim Contract can access this\\nerror onlyClaimContractCanAccess();\\n/// @notice cannot set this value to the zero address\\nerror ZeroAddress();\\n/// @notice Claim contract was already set\\nerror AlreadySet();\\n\\ncontract FeeReimbursementApp is BrevisApp, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    address public rewardToken;\\n    uint24 public rewardTokenDecimals;\\n    IFeeRebateTierModule public feeRebateTierModule;\\n    address public claimer;\\n    uint256 public contractsHash;\\n    mapping(bytes32 => uint16) public vkHashesToCircuitSize; // batch tier vk hashes => tier batch size\\n    mapping(address => ClaimPeriod) public accountClaimPeriod;\\n    mapping(address => uint248) public accountAccumulatedFee;\\n    address public claimContract;\\n\\n    event FeeRebateAccumulated(address account, uint248 feeRebate, uint248 volume30D, uint248 feeRebateWithRate,  uint64 startBlockNumber,uint64 endBlockNumber);\\n    event VkHashesUpdated(bytes32[] vkHashes, uint16[] sizes);\\n    event FeeReimbursed(address account, uint248 feeRebate);\\n    event BrevisProofUpdated(address);\\n    event FeeRebateTireModuleUpdated(address);\\n    event ClaimerUpdated(address);\\n    event ContractsHashUpdated(uint256);\\n    event MigrationDone();\\n    event MigrationFinishedForAccount(address account, uint248 feeAccumulated, uint64 startBlockNumber, uint64 endBlockNumber);\\n    \\n    constructor(address _brevisProof) BrevisApp(IBrevisProof(_brevisProof)) {}\\n\\n    // BrevisQuery contract will call our callback once Brevis backend submits the proof.\\n    function handleProofResult(\\n        bytes32 /*_requestId*/,\\n        bytes32 _vkHash,\\n        bytes calldata _circuitOutput\\n    ) internal override {\\n        // We need to check if the verifying key that Brevis used to verify the proof generated by our circuit is indeed\\n        // our designated verifying keys. This proves that the _circuitOutput is authentic\\n        uint16 circuitSize = vkHashesToCircuitSize[_vkHash];\\n        require(circuitSize > 0, \\\"vkHash not valid\\\");\\n\\n        (address account, uint248 feeRebate, uint248 volume30D, uint64 startBlockNumber, uint64 endBlockNumber, uint256 hash) = decodeOutput(_circuitOutput);\\n        require(contractsHash == hash, \\\"invalid contracts hash\\\");\\n        \\n        uint64 percentage;\\n        uint248 feeRebateWithRate = feeRebate;\\n        if (feeRebate > 0) {\\n            percentage = feeRebateTierModule.getFeeRebatePercentage(volume30D);\\n            feeRebateWithRate = feeRebate * percentage / 100; \\n        }\\n       \\n        ClaimPeriod memory claimPeriod = _newClaimPeriod(startBlockNumber, endBlockNumber, account);\\n        accountClaimPeriod[account] = claimPeriod;\\n        uint248 accumulatedFee = accountAccumulatedFee[account];\\n        accountAccumulatedFee[account] = accumulatedFee + feeRebateWithRate;        \\n        emit FeeRebateAccumulated(account, feeRebate, volume30D, feeRebateWithRate, startBlockNumber, endBlockNumber);\\n    }\\n\\n    function decodeOutput(bytes calldata o) internal pure returns (address account, uint248 feeRebate, uint248 volume30D, uint64 startBlockNumber,uint64 endBlockNumber, uint256 hash) {\\n        account = address(bytes20(o[0:20]));\\n        feeRebate = uint248(bytes31(o[20:51]));\\n        volume30D = uint248(bytes31(o[51:82]));\\n        startBlockNumber = uint64(bytes8(o[82:90]));\\n        endBlockNumber = uint64(bytes8(o[90:98]));\\n        hash = uint256(bytes32(o[98:130]));\\n    }\\n\\n    function _newClaimPeriod(uint64 startBlockNumber, uint64 endBlockNumber, address account) internal view returns (ClaimPeriod memory) {\\n        ClaimPeriod memory claimPeriod = accountClaimPeriod[account];\\n        // No claim record at all\\n        if (claimPeriod.startBlockNumber == 0 && claimPeriod.endBlockNumber == 0) {\\n            claimPeriod.startBlockNumber = startBlockNumber;\\n            claimPeriod.endBlockNumber = endBlockNumber;\\n            return claimPeriod;\\n        }\\n        // Make sure block numbers in claimPeriod are consecutive.\\n        // claimed.startB ---> claimed.endB ---> claimed.endB+1 = startB --> endB\\n        if (startBlockNumber == claimPeriod.endBlockNumber + 1) {\\n            claimPeriod.endBlockNumber = endBlockNumber;\\n            return claimPeriod;\\n        }\\n\\n        revert InvalidNewClaimPeriod();\\n    }\\n\\n    function setVkHashes(bytes32[] calldata _vkHashes, uint16[] calldata _sizes) public onlyOwner {\\n        require(_vkHashes.length == _sizes.length, \\\"length not match\\\");\\n        for (uint256 i = 0; i < _vkHashes.length; i++) {\\n            vkHashesToCircuitSize[_vkHashes[i]] = _sizes[i];\\n        }\\n\\n        emit VkHashesUpdated(_vkHashes, _sizes);\\n    }\\n\\n    function setRewardToken(address _rewardToken, uint24 _decimals) external onlyOwner {\\n        rewardToken = _rewardToken;\\n        rewardTokenDecimals = _decimals;\\n    }\\n\\n    function setFeeRebateTierModule(IFeeRebateTierModule _feeRebateTierModule) external onlyOwner {\\n        feeRebateTierModule = _feeRebateTierModule;\\n        emit FeeRebateTireModuleUpdated(address(_feeRebateTierModule));\\n    }\\n\\n    function setClaimer(address _claimer) external onlyOwner {\\n        claimer = _claimer;\\n        emit ClaimerUpdated(_claimer);\\n    }\\n\\n    function setContractsHash(uint256 _contractsHash) external onlyOwner {\\n        contractsHash = _contractsHash;\\n        emit ContractsHashUpdated(_contractsHash);\\n    }\\n\\n    // After reimburse user's fee, call claim to reset accumulatedFee\\n    function claim(address account) public onlyClaimContract {\\n        uint248 feeRebate = accountAccumulatedFee[account];\\n        accountAccumulatedFee[account] = 0;\\n        emit FeeReimbursed(account, feeRebate);\\n    }\\n\\n    function setBrevisProof(address _brevisProof) external onlyOwner {\\n        brevisProof = IBrevisProof(_brevisProof);\\n        emit BrevisProofUpdated(_brevisProof);\\n    }\\n\\n    /// @notice access control modifier for claimContract\\n    modifier onlyClaimContract() {\\n        _onlyClaimContract();\\n        _;\\n    }\\n\\n    function _onlyClaimContract() internal view {\\n        if (msg.sender != claimContract) revert onlyClaimContractCanAccess();\\n    }\\n\\n    function setClaimContract(address _claimContract) external onlyOwner {\\n        if (_claimContract == address(0)) revert ZeroAddress();\\n        claimContract = _claimContract;\\n    }\\n}\\n\",\"keccak256\":\"0xd81d9f0ebb4b4bf82a47dbff3735e3f95c851f81e473f4ce7996bda73761679a\",\"license\":\"MIT\"},\"solidity-rlp/contracts/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n */\\npragma solidity >=0.5.10 <0.9.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     * @return (memPtr, len) pair: location of the item's payload in memory.\\n     */\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 memPtr = item.memPtr + offset;\\n        uint256 len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        (, uint256 len) = payloadLocation(item);\\n        return len;\\n    }\\n\\n    /*\\n     * @param the RLP item containing the encoded list.\\n     */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte except \\\"0x80\\\" is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        // SEE Github Issue #5.\\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\\n        // \\\"0\\\" as \\\"0x80\\\" instead of as \\\"0\\\". We handle this edge case explicitly\\n        // here.\\n        if (result == 0 || result == STRING_SHORT_START) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n\\n        uint256 result;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shift to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(memPtr, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            itemLen = 1;\\n        } else if (byte0 < STRING_LONG_START) {\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            return 0;\\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\\n            return 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        } else {\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n        }\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len > 0) {\\n            // left over bytes. Mask is used to remove unwanted bytes from the word\\n            uint256 mask = 256**(WORD_SIZE - len) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask)) // zero out src\\n                let destpart := and(mload(dest), mask) // retrieve the bytes\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3a44f2de3c752fa4f926f3fd4cad8338dab742484150c0d7d2f785409ed8db4d\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6080346100a957601f611f4438819003918201601f19168301916001600160401b038311848410176100ae578084926020946040528339810103126100a957516001600160a01b0390818116908190036100a95760018060a01b031990816000541617600055600154903390821617600155604051913391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3611e7f90816100c58239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60c0604052600436101561001257600080fd5b6000803560e01c80631dd3f354146118ab5780631e83409a14611817578063360fde49146117bb57806343c927a91461179d5780634a30d3eb1461173e5780635419f27c146116f25780635d1c29eb1461151b57806366345da4146114f4578063715018a61461149457806379d6b6a2146111285780637c08aa7414610a315780637f239c4d14610a0a5780638da5cb5b146109e35780639bdcecd1146109bd578063a184a0c71461098f578063ada323ff14610902578063b18c0868146108c1578063b90c209a1461084b578063c772c87f146107db578063c7f5aaa0146107b5578063cdfb583214610743578063d379be231461071c578063ed1fe83b14610238578063f2fde38b146101595763f7c618c11461013057600080fd5b3461015657806003193601126101565760206001600160a01b0360025416604051908152f35b80fd5b503461015657602036600319011261015657610173611a28565b600154906001600160a01b038083169161018e338414611bc7565b169182156101cd576001600160a01b03191682176001557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b503461015657606036600319011261015657610252611a52565b6024359067ffffffffffffffff821161071857366023830112156107185767ffffffffffffffff8260040135116107185736602460a0846004013502840101116107185760443567ffffffffffffffff8111610714576102b69036906004016119f7565b9290916102c884836004013514611c5d565b6001600160a01b0385541690813b156107105785906040519063cf7ac5a960e01b825267ffffffffffffffff604483019116600483015260406024830152846004013590526064810192602485019384845b876004013581106106cf57505083918380809303915afa80156106c4576106ac575b505b8260040135811061034d578580f35b610385604061036183866004013586611cce565b0135610378610371848989611cf4565b3691611b80565b6020815191012014611c12565b61039481846004013584611cce565b5060606103a682856004013585611cce565b01356103b3828787611cf4565b90918852600660205261ffff60408920541615610674578060141161066c578060331161066c578060521161066c5780605a1161066c576062908082116106705760821161066c578101356005540361062757601481013560081c908180610558575b610433823560601c605a84013560c01c605285013560c01c611d73565b823560601c8a52600760205260408a209067ffffffffffffffff8151166fffffffffffffffff00000000000000006020845493015160401b16916fffffffffffffffffffffffffffffffff19161717905560086020526001600160f81b0360408a2054166001600160f81b038083168201116105445792605a836001600160f81b0360c09461053f9897828f6040907f865837efc36f96ff0de4b15e50b0ead4bf18a6928f7045e7e39161eebf7c5dc79a3560601c815260086020522091818416011660ff60f81b82541617905560405194833560601c86526020860152603383013560081c60408601521660608401526052810135841c60808401520135821c60a0820152a1611ca9565b61033e565b634e487b7160e01b8a52601160045260248afd5b602460206001600160a01b03600354166040519283809263b72bf50960e01b8252603388013560081c60048301525afa801561061c578a906105cd575b67ffffffffffffffff91501690806001600160f81b03838202160482148115171561054457606491026001600160f81b031604610416565b506020813d602011610614575b816105e760209383611b46565b81010312610610575167ffffffffffffffff811681036106105767ffffffffffffffff90610595565b8980fd5b3d91506105da565b6040513d8c823e3d90fd5b60405162461bcd60e51b815260206004820152601660248201527f696e76616c696420636f6e7472616374732068617368000000000000000000006044820152606490fd5b8780fd5b8880fd5b60405162461bcd60e51b815260206004820152601060248201526f1d9ad2185cda081b9bdd081d985b1a5960821b6044820152606490fd5b6106b590611aac565b6106c057843861033c565b8480fd5b6040513d84823e3d90fd5b81358352602080830135908401526040808301359084015260608083013590840152608080830135908401528a955060a0928301929091019060010161031a565b8580fd5b8380fd5b8280fd5b503461015657806003193601126101565760206001600160a01b0360045416604051908152f35b5034610156576020366003190112610156577fad74290dd7363323a597a949fa2f97ae088f486218d8190369bb417a41a075e36020610780611a28565b6001600160a01b039061079882600154163314611bc7565b16806001600160a01b03196004541617600455604051908152a180f35b50346101565780600319360112610156576001600160a01b036020915416604051908152f35b5034610156576020366003190112610156577f1bf3143ab1544528303e489724067fb6c3ff3f7e3b0a6df041cae24242e447736020610818611a28565b6001600160a01b039061083082600154163314611bc7565b16806001600160a01b0319855416178455604051908152a180f35b5034610156576020366003190112610156576004356001600160a01b03808216809203610718577fae4a28486e59e557cbe94f201dc6e5c485bd89a590bc78f414add8c2f6b4bd8d916108a5602092600154163314611bc7565b806001600160a01b03196003541617600355604051908152a180f35b5034610156576020366003190112610156576001600160f81b0360406020926001600160a01b036108f0611a28565b16815260088452205416604051908152f35b50346101565760403660031901126101565761091c611a28565b60243562ffffff81168103610718577fffffffffffffffffff00000000000000000000000000000000000000000000006001600160a01b0361096381600154163314611bc7565b76ffffff00000000000000000000000000000000000000006002549360a01b1693169116171760025580f35b50346101565760203660031901126101565761ffff6040602092600435815260068452205416604051908152f35b5034610156578060031936011261015657602062ffffff60025460a01c16604051908152f35b503461015657806003193601126101565760206001600160a01b0360015416604051908152f35b503461015657806003193601126101565760206001600160a01b0360035416604051908152f35b503461015657600319606036820112611124576024359067ffffffffffffffff8216820361110f576044359067ffffffffffffffff82116107145760809082360301126107185760405190610a8582611ad6565b80600401358252602481013567ffffffffffffffff81116106c0578101366023820112156106c057600481013590610abc82611b68565b91610aca6040519384611b46565b808352602083019136602483600a1b8301011161066c5760248101925b602483600a1b8301018410610ffb57505050506020830152604481013567ffffffffffffffff81116106c0578101366023820112156106c057600481013590610b2f82611b68565b91610b3d6040519384611b46565b808352602083019136602460a084028301011161066c579160248301925b602460a084028201018410610f975750505050604083015260648101359067ffffffffffffffff82116106c0573660238383010112156106c0576004828201013590610ba682611b68565b92610bb46040519485611b46565b82845260208401913660248560051b84840101011161066c57602482820101925b60248560051b84840101018410610ec957505050505060608201526001600160a01b0383541690813b156107145791839167ffffffffffffffff93604051948593631f022a9d60e21b855260043560048601521660248401526060604484015260e48301908051606485015260208101519160806084860152825180915260206101048601930190865b818110610e06575050506040810151916063198582030160a486015260208084519283815201930190865b818110610da75750505060600151906063198482030160c4850152815180825260208201916020808360051b83010194019287915b838310610cfc57505050505082809103915afa80156106c457610ce8575b602060405160018152f35b610cf28291611aac565b6101565780610cdd565b9295975092955092601f1982820301835260808651805183526020810151602084015267ffffffffffffffff604082015116604084015267ffffffffffffffff606082015116606084015201519060a060808201528151918260a08301528a5b838110610d915750506020600192819260c0918d838284010152601f8019910116010197019301930187959389979592610cbf565b80602080928401015160c0828601015201610d5c565b929496509281955060a060209167ffffffffffffffff608060019551805184526001600160a01b038682015116868501526040810151604085015260608101516060850152015116608082015201950191019086949288969492610c8a565b92949650929094506040855167ffffffffffffffff815116835267ffffffffffffffff60208201511660208401520151604082019089915b60058310610e6357505050602061040060019201950191019086949288969492610c5f565b602060c0600192604085516060815160ff815116855267ffffffffffffffff8782015116878601526001600160a01b038482015116848601520151606084015267ffffffffffffffff85820151166080840152015160a082015201920192019190610e3e565b833567ffffffffffffffff81116106105760a08385018201360360231901126106105760405191610ef983611b0e565b83850182016024810135845260448101356020850152610f1b90606401611a69565b6040840152610f306084838787010101611a69565b606084015260a4828686010101359067ffffffffffffffff8211610f935736604383858989010101011215610f93576024936020938493610f819136918a8a01909101018088013590604401611b80565b60808201528152019401939050610bd5565b8b80fd5b60a0843603126106705760a0806020602494604051610fb581611b0e565b88358152610fc4838a01611a3e565b838201526040890135604082015260608901356060820152610fe860808a01611a69565b6080820152815201950194925050610b5b565b6104008085360312610610576040519061101482611af2565b61101d86611a69565b825261102b60208701611a69565b602083015236605f87011215611120576040519061104882611b0e565b8190368189011161111c5760408801915b818901831061107c57505050604082015281526104009390930192602001610ae7565b60c0833603126111185760405161109281611af2565b60808436031261111457604051916110a983611ad6565b84359160ff8316830361110f578360209360c095526110c9848801611a69565b848201526110d960408801611a3e565b60408201526060870135606082015281526110f660808701611a69565b8382015260a08601356040820152815201920191611059565b600080fd5b8e80fd5b8d80fd5b8c80fd5b8a80fd5b5080fd5b503461015657604036600319011261015657602467ffffffffffffffff81358181116107145761115c903690600401611a7e565b916001600160a01b039084604083885416815197888092632cc27dc960e11b825260043560048301525afa80156114895787968891611450575b506111b46111a5368888611b80565b9788516020809a012014611c12565b87526006865261ffff6040882054161561141a578460141161141657833560601c958560331161066c57601485013560081c918660521161067057603386013560081c9387605a1161061057605287013560c01c968860621161112057605a81013560c01c986082116111205760620135600554036113d25783958415908115611321575b5050611246898989611d73565b898b526007845260408b20918151166fffffffffffffffff000000000000000085845493015160401b16916fffffffffffffffffffffffffffffffff191617179055600882526001600160f81b03808060408c20541696168096019181831161130f57509160c097959391899795937f865837efc36f96ff0de4b15e50b0ead4bf18a6928f7045e7e39161eebf7c5dc79a8c526008835260408c20911660ff60f81b82541617905560405196875286015260408501526060840152608083015260a0820152a180f35b634e487b7160e01b8b5260116004528afd5b83919297508490600354166040519283809263b72bf50960e01b82528a60048301525afa80156113c75787918c9161138d575b5016906001600160f81b03828602169185830414171561137a5760649004943880611239565b50634e487b7160e01b8952601160045288fd5b809250858092503d83116113c0575b6113a68183611b46565b810103126111205751868116810361112057869038611354565b503d61139c565b6040513d8d823e3d90fd5b60405162461bcd60e51b8152600481018490526016818401527f696e76616c696420636f6e7472616374732068617368000000000000000000006044820152606490fd5b8680fd5b8560106064926040519262461bcd60e51b845260048401528201526f1d9ad2185cda081b9bdd081d985b1a5960821b6044820152fd5b9650506040863d604011611481575b8161146c60409383611b46565b81010312611416576020865196015138611196565b3d915061145f565b6040513d89823e3d90fd5b503461015657806003193601126101565760006001546001600160a01b03196001600160a01b038216916114c9338414611bc7565b166001557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461015657806003193601126101565760206001600160a01b0360095416604051908152f35b50346101565761014036600319011261015657611536611a52565b60a03660231901126111245767ffffffffffffffff60e435818111610714576115639036906004016119f7565b926101049283359260ff8416809403611416578661012496873584811161071857611592903690600401611a7e565b9790966001600160a01b03968785541692833b1561071057879260405197889687958695632247cd8f60e01b875216600486015260249e8f803590870152604435604487015260643580608052606487015260843560a05260a051608487015260a43560a487015260c43560c487015260e48601610120905285019061161792611d36565b9183015203915afa8015611489576116df575b50611636368585611b80565b9461164b865160208098012060805114611c12565b60a05187526006865261ffff6040882054161561141a578460141161141657833560601c958560331161066c57601485013560081c918660521161067057603386013560081c9387605a1161061057605287013560c01c968860621161112057605a81013560c01c986082116111205760620135600554036113d25783958415908115611321575050611246898989611d73565b6116eb90969196611aac565b943861162a565b503461015657602036600319011261015657604080916001600160a01b03611718611a28565b1681526007602052205481519067ffffffffffffffff908181168352831c166020820152f35b503461015657602036600319011261015657611758611a28565b6001600160a01b039061177082600154163314611bc7565b16801561178b576001600160a01b0319600954161760095580f35b60405163d92e233d60e01b8152600490fd5b50346101565780600319360112610156576020600554604051908152f35b5034610156576020366003190112610156577f7bfc81ef745ea2254ff60bbb4fb7e8855f897b7aa3907ea8eebc957c362d8f5e60206004356118096001600160a01b03600154163314611bc7565b80600555604051908152a180f35b503461015657602036600319011261015657611831611a28565b6001600160a01b039081600954163303611899577f17525e7c25776b686f3c5fb5714aac26a41bdccd536c711002922e7e5ffb4c2c916040911680845260086020526001600160f81b0382852080549060ff60f81b821690558351928352166020820152a180f35b6040516332bc53e960e21b8152600490fd5b50346101565760403660031901126101565767ffffffffffffffff600435818111610718576118de9036906004016119f7565b91602435908111610714576118f79036906004016119f7565b90916001906119116001600160a01b038354163314611bc7565b61191c838614611c5d565b855b8581106119a8575061193c9060405195604087526040870191611d36565b916020838682950382880152828152019392865b82811061198157877fb3f7d79a2f90dac793ddd7d86f2d7d5d073e107289c685083e9d4329f1640f5c88880389a180f35b909192939485359061ffff8216809203610670579081528201948201939291908301611950565b6119b6818587969596611e39565b359061ffff821680920361066c576119ef916119d3828986611e39565b3589526006602052604089209061ffff19825416179055611ca9565b92919261191e565b9181601f8401121561110f5782359167ffffffffffffffff831161110f576020808501948460051b01011161110f57565b600435906001600160a01b038216820361110f57565b35906001600160a01b038216820361110f57565b6004359067ffffffffffffffff8216820361110f57565b359067ffffffffffffffff8216820361110f57565b9181601f8401121561110f5782359167ffffffffffffffff831161110f576020838186019501011161110f57565b67ffffffffffffffff8111611ac057604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff821117611ac057604052565b6060810190811067ffffffffffffffff821117611ac057604052565b60a0810190811067ffffffffffffffff821117611ac057604052565b6040810190811067ffffffffffffffff821117611ac057604052565b90601f8019910116810190811067ffffffffffffffff821117611ac057604052565b67ffffffffffffffff8111611ac05760051b60200190565b92919267ffffffffffffffff8211611ac05760405191611baa601f8201601f191660200184611b46565b82948184528183011161110f578281602093846000960137010152565b15611bce57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b15611c1957565b606460405162461bcd60e51b815260206004820152602060248201527f6661696c656420746f206f70656e206f757470757420636f6d6d69746d656e746044820152fd5b15611c6457565b60405162461bcd60e51b815260206004820152601060248201527f6c656e677468206e6f74206d61746368000000000000000000000000000000006044820152606490fd5b6000198114611cb85760010190565b634e487b7160e01b600052601160045260246000fd5b9190811015611cde5760a0020190565b634e487b7160e01b600052603260045260246000fd5b9190811015611cde5760051b81013590601e198136030182121561110f57019081359167ffffffffffffffff831161110f57602001823603811361110f579190565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831161110f5760209260051b809284830137010190565b90916001600160a01b03602091604051611d8c81611b2a565b600093818580935201521681526007602052604081209260405193611db085611b2a565b549267ffffffffffffffff9283808087169687895260401c166020880196818852159081611e30575b50611e245785511660010190848211611e10575083809116911614611e0a57604051632d75bc4f60e01b8152600490fd5b16905290565b634e487b7160e01b81526011600452602490fd5b91905016845216905290565b90501538611dd9565b9190811015611cde5760051b019056fea2646970667358221220dc85070f7487acae879ba7894f70030a71b5b44a0c45b141034a77c9b340105d64736f6c63430008140033",
  "deployedBytecode": "0x60c0604052600436101561001257600080fd5b6000803560e01c80631dd3f354146118ab5780631e83409a14611817578063360fde49146117bb57806343c927a91461179d5780634a30d3eb1461173e5780635419f27c146116f25780635d1c29eb1461151b57806366345da4146114f4578063715018a61461149457806379d6b6a2146111285780637c08aa7414610a315780637f239c4d14610a0a5780638da5cb5b146109e35780639bdcecd1146109bd578063a184a0c71461098f578063ada323ff14610902578063b18c0868146108c1578063b90c209a1461084b578063c772c87f146107db578063c7f5aaa0146107b5578063cdfb583214610743578063d379be231461071c578063ed1fe83b14610238578063f2fde38b146101595763f7c618c11461013057600080fd5b3461015657806003193601126101565760206001600160a01b0360025416604051908152f35b80fd5b503461015657602036600319011261015657610173611a28565b600154906001600160a01b038083169161018e338414611bc7565b169182156101cd576001600160a01b03191682176001557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b503461015657606036600319011261015657610252611a52565b6024359067ffffffffffffffff821161071857366023830112156107185767ffffffffffffffff8260040135116107185736602460a0846004013502840101116107185760443567ffffffffffffffff8111610714576102b69036906004016119f7565b9290916102c884836004013514611c5d565b6001600160a01b0385541690813b156107105785906040519063cf7ac5a960e01b825267ffffffffffffffff604483019116600483015260406024830152846004013590526064810192602485019384845b876004013581106106cf57505083918380809303915afa80156106c4576106ac575b505b8260040135811061034d578580f35b610385604061036183866004013586611cce565b0135610378610371848989611cf4565b3691611b80565b6020815191012014611c12565b61039481846004013584611cce565b5060606103a682856004013585611cce565b01356103b3828787611cf4565b90918852600660205261ffff60408920541615610674578060141161066c578060331161066c578060521161066c5780605a1161066c576062908082116106705760821161066c578101356005540361062757601481013560081c908180610558575b610433823560601c605a84013560c01c605285013560c01c611d73565b823560601c8a52600760205260408a209067ffffffffffffffff8151166fffffffffffffffff00000000000000006020845493015160401b16916fffffffffffffffffffffffffffffffff19161717905560086020526001600160f81b0360408a2054166001600160f81b038083168201116105445792605a836001600160f81b0360c09461053f9897828f6040907f865837efc36f96ff0de4b15e50b0ead4bf18a6928f7045e7e39161eebf7c5dc79a3560601c815260086020522091818416011660ff60f81b82541617905560405194833560601c86526020860152603383013560081c60408601521660608401526052810135841c60808401520135821c60a0820152a1611ca9565b61033e565b634e487b7160e01b8a52601160045260248afd5b602460206001600160a01b03600354166040519283809263b72bf50960e01b8252603388013560081c60048301525afa801561061c578a906105cd575b67ffffffffffffffff91501690806001600160f81b03838202160482148115171561054457606491026001600160f81b031604610416565b506020813d602011610614575b816105e760209383611b46565b81010312610610575167ffffffffffffffff811681036106105767ffffffffffffffff90610595565b8980fd5b3d91506105da565b6040513d8c823e3d90fd5b60405162461bcd60e51b815260206004820152601660248201527f696e76616c696420636f6e7472616374732068617368000000000000000000006044820152606490fd5b8780fd5b8880fd5b60405162461bcd60e51b815260206004820152601060248201526f1d9ad2185cda081b9bdd081d985b1a5960821b6044820152606490fd5b6106b590611aac565b6106c057843861033c565b8480fd5b6040513d84823e3d90fd5b81358352602080830135908401526040808301359084015260608083013590840152608080830135908401528a955060a0928301929091019060010161031a565b8580fd5b8380fd5b8280fd5b503461015657806003193601126101565760206001600160a01b0360045416604051908152f35b5034610156576020366003190112610156577fad74290dd7363323a597a949fa2f97ae088f486218d8190369bb417a41a075e36020610780611a28565b6001600160a01b039061079882600154163314611bc7565b16806001600160a01b03196004541617600455604051908152a180f35b50346101565780600319360112610156576001600160a01b036020915416604051908152f35b5034610156576020366003190112610156577f1bf3143ab1544528303e489724067fb6c3ff3f7e3b0a6df041cae24242e447736020610818611a28565b6001600160a01b039061083082600154163314611bc7565b16806001600160a01b0319855416178455604051908152a180f35b5034610156576020366003190112610156576004356001600160a01b03808216809203610718577fae4a28486e59e557cbe94f201dc6e5c485bd89a590bc78f414add8c2f6b4bd8d916108a5602092600154163314611bc7565b806001600160a01b03196003541617600355604051908152a180f35b5034610156576020366003190112610156576001600160f81b0360406020926001600160a01b036108f0611a28565b16815260088452205416604051908152f35b50346101565760403660031901126101565761091c611a28565b60243562ffffff81168103610718577fffffffffffffffffff00000000000000000000000000000000000000000000006001600160a01b0361096381600154163314611bc7565b76ffffff00000000000000000000000000000000000000006002549360a01b1693169116171760025580f35b50346101565760203660031901126101565761ffff6040602092600435815260068452205416604051908152f35b5034610156578060031936011261015657602062ffffff60025460a01c16604051908152f35b503461015657806003193601126101565760206001600160a01b0360015416604051908152f35b503461015657806003193601126101565760206001600160a01b0360035416604051908152f35b503461015657600319606036820112611124576024359067ffffffffffffffff8216820361110f576044359067ffffffffffffffff82116107145760809082360301126107185760405190610a8582611ad6565b80600401358252602481013567ffffffffffffffff81116106c0578101366023820112156106c057600481013590610abc82611b68565b91610aca6040519384611b46565b808352602083019136602483600a1b8301011161066c5760248101925b602483600a1b8301018410610ffb57505050506020830152604481013567ffffffffffffffff81116106c0578101366023820112156106c057600481013590610b2f82611b68565b91610b3d6040519384611b46565b808352602083019136602460a084028301011161066c579160248301925b602460a084028201018410610f975750505050604083015260648101359067ffffffffffffffff82116106c0573660238383010112156106c0576004828201013590610ba682611b68565b92610bb46040519485611b46565b82845260208401913660248560051b84840101011161066c57602482820101925b60248560051b84840101018410610ec957505050505060608201526001600160a01b0383541690813b156107145791839167ffffffffffffffff93604051948593631f022a9d60e21b855260043560048601521660248401526060604484015260e48301908051606485015260208101519160806084860152825180915260206101048601930190865b818110610e06575050506040810151916063198582030160a486015260208084519283815201930190865b818110610da75750505060600151906063198482030160c4850152815180825260208201916020808360051b83010194019287915b838310610cfc57505050505082809103915afa80156106c457610ce8575b602060405160018152f35b610cf28291611aac565b6101565780610cdd565b9295975092955092601f1982820301835260808651805183526020810151602084015267ffffffffffffffff604082015116604084015267ffffffffffffffff606082015116606084015201519060a060808201528151918260a08301528a5b838110610d915750506020600192819260c0918d838284010152601f8019910116010197019301930187959389979592610cbf565b80602080928401015160c0828601015201610d5c565b929496509281955060a060209167ffffffffffffffff608060019551805184526001600160a01b038682015116868501526040810151604085015260608101516060850152015116608082015201950191019086949288969492610c8a565b92949650929094506040855167ffffffffffffffff815116835267ffffffffffffffff60208201511660208401520151604082019089915b60058310610e6357505050602061040060019201950191019086949288969492610c5f565b602060c0600192604085516060815160ff815116855267ffffffffffffffff8782015116878601526001600160a01b038482015116848601520151606084015267ffffffffffffffff85820151166080840152015160a082015201920192019190610e3e565b833567ffffffffffffffff81116106105760a08385018201360360231901126106105760405191610ef983611b0e565b83850182016024810135845260448101356020850152610f1b90606401611a69565b6040840152610f306084838787010101611a69565b606084015260a4828686010101359067ffffffffffffffff8211610f935736604383858989010101011215610f93576024936020938493610f819136918a8a01909101018088013590604401611b80565b60808201528152019401939050610bd5565b8b80fd5b60a0843603126106705760a0806020602494604051610fb581611b0e565b88358152610fc4838a01611a3e565b838201526040890135604082015260608901356060820152610fe860808a01611a69565b6080820152815201950194925050610b5b565b6104008085360312610610576040519061101482611af2565b61101d86611a69565b825261102b60208701611a69565b602083015236605f87011215611120576040519061104882611b0e565b8190368189011161111c5760408801915b818901831061107c57505050604082015281526104009390930192602001610ae7565b60c0833603126111185760405161109281611af2565b60808436031261111457604051916110a983611ad6565b84359160ff8316830361110f578360209360c095526110c9848801611a69565b848201526110d960408801611a3e565b60408201526060870135606082015281526110f660808701611a69565b8382015260a08601356040820152815201920191611059565b600080fd5b8e80fd5b8d80fd5b8c80fd5b8a80fd5b5080fd5b503461015657604036600319011261015657602467ffffffffffffffff81358181116107145761115c903690600401611a7e565b916001600160a01b039084604083885416815197888092632cc27dc960e11b825260043560048301525afa80156114895787968891611450575b506111b46111a5368888611b80565b9788516020809a012014611c12565b87526006865261ffff6040882054161561141a578460141161141657833560601c958560331161066c57601485013560081c918660521161067057603386013560081c9387605a1161061057605287013560c01c968860621161112057605a81013560c01c986082116111205760620135600554036113d25783958415908115611321575b5050611246898989611d73565b898b526007845260408b20918151166fffffffffffffffff000000000000000085845493015160401b16916fffffffffffffffffffffffffffffffff191617179055600882526001600160f81b03808060408c20541696168096019181831161130f57509160c097959391899795937f865837efc36f96ff0de4b15e50b0ead4bf18a6928f7045e7e39161eebf7c5dc79a8c526008835260408c20911660ff60f81b82541617905560405196875286015260408501526060840152608083015260a0820152a180f35b634e487b7160e01b8b5260116004528afd5b83919297508490600354166040519283809263b72bf50960e01b82528a60048301525afa80156113c75787918c9161138d575b5016906001600160f81b03828602169185830414171561137a5760649004943880611239565b50634e487b7160e01b8952601160045288fd5b809250858092503d83116113c0575b6113a68183611b46565b810103126111205751868116810361112057869038611354565b503d61139c565b6040513d8d823e3d90fd5b60405162461bcd60e51b8152600481018490526016818401527f696e76616c696420636f6e7472616374732068617368000000000000000000006044820152606490fd5b8680fd5b8560106064926040519262461bcd60e51b845260048401528201526f1d9ad2185cda081b9bdd081d985b1a5960821b6044820152fd5b9650506040863d604011611481575b8161146c60409383611b46565b81010312611416576020865196015138611196565b3d915061145f565b6040513d89823e3d90fd5b503461015657806003193601126101565760006001546001600160a01b03196001600160a01b038216916114c9338414611bc7565b166001557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461015657806003193601126101565760206001600160a01b0360095416604051908152f35b50346101565761014036600319011261015657611536611a52565b60a03660231901126111245767ffffffffffffffff60e435818111610714576115639036906004016119f7565b926101049283359260ff8416809403611416578661012496873584811161071857611592903690600401611a7e565b9790966001600160a01b03968785541692833b1561071057879260405197889687958695632247cd8f60e01b875216600486015260249e8f803590870152604435604487015260643580608052606487015260843560a05260a051608487015260a43560a487015260c43560c487015260e48601610120905285019061161792611d36565b9183015203915afa8015611489576116df575b50611636368585611b80565b9461164b865160208098012060805114611c12565b60a05187526006865261ffff6040882054161561141a578460141161141657833560601c958560331161066c57601485013560081c918660521161067057603386013560081c9387605a1161061057605287013560c01c968860621161112057605a81013560c01c986082116111205760620135600554036113d25783958415908115611321575050611246898989611d73565b6116eb90969196611aac565b943861162a565b503461015657602036600319011261015657604080916001600160a01b03611718611a28565b1681526007602052205481519067ffffffffffffffff908181168352831c166020820152f35b503461015657602036600319011261015657611758611a28565b6001600160a01b039061177082600154163314611bc7565b16801561178b576001600160a01b0319600954161760095580f35b60405163d92e233d60e01b8152600490fd5b50346101565780600319360112610156576020600554604051908152f35b5034610156576020366003190112610156577f7bfc81ef745ea2254ff60bbb4fb7e8855f897b7aa3907ea8eebc957c362d8f5e60206004356118096001600160a01b03600154163314611bc7565b80600555604051908152a180f35b503461015657602036600319011261015657611831611a28565b6001600160a01b039081600954163303611899577f17525e7c25776b686f3c5fb5714aac26a41bdccd536c711002922e7e5ffb4c2c916040911680845260086020526001600160f81b0382852080549060ff60f81b821690558351928352166020820152a180f35b6040516332bc53e960e21b8152600490fd5b50346101565760403660031901126101565767ffffffffffffffff600435818111610718576118de9036906004016119f7565b91602435908111610714576118f79036906004016119f7565b90916001906119116001600160a01b038354163314611bc7565b61191c838614611c5d565b855b8581106119a8575061193c9060405195604087526040870191611d36565b916020838682950382880152828152019392865b82811061198157877fb3f7d79a2f90dac793ddd7d86f2d7d5d073e107289c685083e9d4329f1640f5c88880389a180f35b909192939485359061ffff8216809203610670579081528201948201939291908301611950565b6119b6818587969596611e39565b359061ffff821680920361066c576119ef916119d3828986611e39565b3589526006602052604089209061ffff19825416179055611ca9565b92919261191e565b9181601f8401121561110f5782359167ffffffffffffffff831161110f576020808501948460051b01011161110f57565b600435906001600160a01b038216820361110f57565b35906001600160a01b038216820361110f57565b6004359067ffffffffffffffff8216820361110f57565b359067ffffffffffffffff8216820361110f57565b9181601f8401121561110f5782359167ffffffffffffffff831161110f576020838186019501011161110f57565b67ffffffffffffffff8111611ac057604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff821117611ac057604052565b6060810190811067ffffffffffffffff821117611ac057604052565b60a0810190811067ffffffffffffffff821117611ac057604052565b6040810190811067ffffffffffffffff821117611ac057604052565b90601f8019910116810190811067ffffffffffffffff821117611ac057604052565b67ffffffffffffffff8111611ac05760051b60200190565b92919267ffffffffffffffff8211611ac05760405191611baa601f8201601f191660200184611b46565b82948184528183011161110f578281602093846000960137010152565b15611bce57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b15611c1957565b606460405162461bcd60e51b815260206004820152602060248201527f6661696c656420746f206f70656e206f757470757420636f6d6d69746d656e746044820152fd5b15611c6457565b60405162461bcd60e51b815260206004820152601060248201527f6c656e677468206e6f74206d61746368000000000000000000000000000000006044820152606490fd5b6000198114611cb85760010190565b634e487b7160e01b600052601160045260246000fd5b9190811015611cde5760a0020190565b634e487b7160e01b600052603260045260246000fd5b9190811015611cde5760051b81013590601e198136030182121561110f57019081359167ffffffffffffffff831161110f57602001823603811361110f579190565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831161110f5760209260051b809284830137010190565b90916001600160a01b03602091604051611d8c81611b2a565b600093818580935201521681526007602052604081209260405193611db085611b2a565b549267ffffffffffffffff9283808087169687895260401c166020880196818852159081611e30575b50611e245785511660010190848211611e10575083809116911614611e0a57604051632d75bc4f60e01b8152600490fd5b16905290565b634e487b7160e01b81526011600452602490fd5b91905016845216905290565b90501538611dd9565b9190811015611cde5760051b019056fea2646970667358221220dc85070f7487acae879ba7894f70030a71b5b44a0c45b141034a77c9b340105d64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ZeroAddress()": [
        {
          "notice": "cannot set this value to the zero address"
        }
      ],
      "onlyClaimContractCanAccess()": [
        {
          "notice": "Only Claim Contract can access this"
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 730,
        "contract": "contracts/FeeReimbursementApp.sol:FeeReimbursementApp",
        "label": "brevisProof",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IBrevisProof)1010"
      },
      {
        "astId": 7,
        "contract": "contracts/FeeReimbursementApp.sol:FeeReimbursementApp",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1523,
        "contract": "contracts/FeeReimbursementApp.sol:FeeReimbursementApp",
        "label": "rewardToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1525,
        "contract": "contracts/FeeReimbursementApp.sol:FeeReimbursementApp",
        "label": "rewardTokenDecimals",
        "offset": 20,
        "slot": "2",
        "type": "t_uint24"
      },
      {
        "astId": 1528,
        "contract": "contracts/FeeReimbursementApp.sol:FeeReimbursementApp",
        "label": "feeRebateTierModule",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IFeeRebateTierModule)1497"
      },
      {
        "astId": 1530,
        "contract": "contracts/FeeReimbursementApp.sol:FeeReimbursementApp",
        "label": "claimer",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1532,
        "contract": "contracts/FeeReimbursementApp.sol:FeeReimbursementApp",
        "label": "contractsHash",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1536,
        "contract": "contracts/FeeReimbursementApp.sol:FeeReimbursementApp",
        "label": "vkHashesToCircuitSize",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_uint16)"
      },
      {
        "astId": 1541,
        "contract": "contracts/FeeReimbursementApp.sol:FeeReimbursementApp",
        "label": "accountClaimPeriod",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(ClaimPeriod)1502_storage)"
      },
      {
        "astId": 1545,
        "contract": "contracts/FeeReimbursementApp.sol:FeeReimbursementApp",
        "label": "accountAccumulatedFee",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint248)"
      },
      {
        "astId": 1547,
        "contract": "contracts/FeeReimbursementApp.sol:FeeReimbursementApp",
        "label": "claimContract",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBrevisProof)1010": {
        "encoding": "inplace",
        "label": "contract IBrevisProof",
        "numberOfBytes": "20"
      },
      "t_contract(IFeeRebateTierModule)1497": {
        "encoding": "inplace",
        "label": "contract IFeeRebateTierModule",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(ClaimPeriod)1502_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ClaimPeriod)",
        "numberOfBytes": "32",
        "value": "t_struct(ClaimPeriod)1502_storage"
      },
      "t_mapping(t_address,t_uint248)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint248)",
        "numberOfBytes": "32",
        "value": "t_uint248"
      },
      "t_mapping(t_bytes32,t_uint16)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_struct(ClaimPeriod)1502_storage": {
        "encoding": "inplace",
        "label": "struct ClaimPeriod",
        "members": [
          {
            "astId": 1499,
            "contract": "contracts/FeeReimbursementApp.sol:FeeReimbursementApp",
            "label": "startBlockNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1501,
            "contract": "contracts/FeeReimbursementApp.sol:FeeReimbursementApp",
            "label": "endBlockNumber",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint248": {
        "encoding": "inplace",
        "label": "uint248",
        "numberOfBytes": "31"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}